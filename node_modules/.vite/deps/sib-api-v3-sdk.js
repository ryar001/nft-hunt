import {
  require_fs
} from "./chunk-ILIJ27K5.js";
import {
  __commonJS,
  __require
} from "./chunk-62VDRKYJ.js";

// node_modules/sib-api-v3-sdk/package.json
var require_package = __commonJS({
  "node_modules/sib-api-v3-sdk/package.json"(exports, module) {
    module.exports = {
      name: "sib-api-v3-sdk",
      version: "8.4.2",
      description: "SendinBlue_provide_a_RESTFul_API_that_can_be_used_with_any_languages__With_this_API_you_will_be_able_to_____Manage_your_campaigns_and_get_the_statistics____Manage_your_contacts____Send_transactional_Emails_and_SMS____and_much_more___You_can_download_our_wrappers_at_httpsgithub_comorgssendinbluePossible_responses___Code__Message____________________________________200___OK__Successful_Request_____201___OK__Successful_Creation____202___OK__Request_accepted____204___OK__Successful_UpdateDeletion_____400___Error__Bad_Request_____401___Error__Authentication_Needed_____402___Error__Not_enough_credit_plan_upgrade_needed_____403___Error__Permission_denied_____404___Error__Object_does_not_exist____405___Error__Method_not_allowed_____406___Error__Not_Acceptable__",
      license: "MIT",
      main: "src/index.js",
      scripts: {
        test: "mocha --recursive"
      },
      browser: {
        fs: false
      },
      dependencies: {
        superagent: "3.7.0",
        querystring: "0.2.0"
      },
      devDependencies: {
        mocha: "~2.3.4",
        sinon: "1.17.3",
        "expect.js": "~0.3.1"
      }
    };
  }
});

// node_modules/component-emitter/index.js
var require_component_emitter = __commonJS({
  "node_modules/component-emitter/index.js"(exports, module) {
    if (typeof module !== "undefined") {
      module.exports = Emitter;
    }
    function Emitter(obj) {
      if (obj)
        return mixin(obj);
    }
    function mixin(obj) {
      for (var key in Emitter.prototype) {
        obj[key] = Emitter.prototype[key];
      }
      return obj;
    }
    Emitter.prototype.on = Emitter.prototype.addEventListener = function(event, fn) {
      this._callbacks = this._callbacks || {};
      (this._callbacks["$" + event] = this._callbacks["$" + event] || []).push(fn);
      return this;
    };
    Emitter.prototype.once = function(event, fn) {
      function on() {
        this.off(event, on);
        fn.apply(this, arguments);
      }
      on.fn = fn;
      this.on(event, on);
      return this;
    };
    Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function(event, fn) {
      this._callbacks = this._callbacks || {};
      if (0 == arguments.length) {
        this._callbacks = {};
        return this;
      }
      var callbacks = this._callbacks["$" + event];
      if (!callbacks)
        return this;
      if (1 == arguments.length) {
        delete this._callbacks["$" + event];
        return this;
      }
      var cb;
      for (var i = 0; i < callbacks.length; i++) {
        cb = callbacks[i];
        if (cb === fn || cb.fn === fn) {
          callbacks.splice(i, 1);
          break;
        }
      }
      if (callbacks.length === 0) {
        delete this._callbacks["$" + event];
      }
      return this;
    };
    Emitter.prototype.emit = function(event) {
      this._callbacks = this._callbacks || {};
      var args = new Array(arguments.length - 1), callbacks = this._callbacks["$" + event];
      for (var i = 1; i < arguments.length; i++) {
        args[i - 1] = arguments[i];
      }
      if (callbacks) {
        callbacks = callbacks.slice(0);
        for (var i = 0, len = callbacks.length; i < len; ++i) {
          callbacks[i].apply(this, args);
        }
      }
      return this;
    };
    Emitter.prototype.listeners = function(event) {
      this._callbacks = this._callbacks || {};
      return this._callbacks["$" + event] || [];
    };
    Emitter.prototype.hasListeners = function(event) {
      return !!this.listeners(event).length;
    };
  }
});

// node_modules/superagent/lib/is-object.js
var require_is_object = __commonJS({
  "node_modules/superagent/lib/is-object.js"(exports, module) {
    "use strict";
    function isObject(obj) {
      return null !== obj && "object" === typeof obj;
    }
    module.exports = isObject;
  }
});

// node_modules/superagent/lib/request-base.js
var require_request_base = __commonJS({
  "node_modules/superagent/lib/request-base.js"(exports, module) {
    "use strict";
    var isObject = require_is_object();
    module.exports = RequestBase;
    function RequestBase(obj) {
      if (obj)
        return mixin(obj);
    }
    function mixin(obj) {
      for (var key in RequestBase.prototype) {
        obj[key] = RequestBase.prototype[key];
      }
      return obj;
    }
    RequestBase.prototype.clearTimeout = function _clearTimeout() {
      clearTimeout(this._timer);
      clearTimeout(this._responseTimeoutTimer);
      delete this._timer;
      delete this._responseTimeoutTimer;
      return this;
    };
    RequestBase.prototype.parse = function parse(fn) {
      this._parser = fn;
      return this;
    };
    RequestBase.prototype.responseType = function(val) {
      this._responseType = val;
      return this;
    };
    RequestBase.prototype.serialize = function serialize(fn) {
      this._serializer = fn;
      return this;
    };
    RequestBase.prototype.timeout = function timeout(options) {
      if (!options || "object" !== typeof options) {
        this._timeout = options;
        this._responseTimeout = 0;
        return this;
      }
      for (var option in options) {
        switch (option) {
          case "deadline":
            this._timeout = options.deadline;
            break;
          case "response":
            this._responseTimeout = options.response;
            break;
          default:
            console.warn("Unknown timeout option", option);
        }
      }
      return this;
    };
    RequestBase.prototype.retry = function retry(count) {
      if (arguments.length === 0 || count === true)
        count = 1;
      if (count <= 0)
        count = 0;
      this._maxRetries = count;
      this._retries = 0;
      return this;
    };
    RequestBase.prototype._retry = function() {
      this.clearTimeout();
      if (this.req) {
        this.req = null;
        this.req = this.request();
      }
      this._aborted = false;
      this.timedout = false;
      return this._end();
    };
    RequestBase.prototype.then = function then(resolve, reject) {
      if (!this._fullfilledPromise) {
        var self2 = this;
        if (this._endCalled) {
          console.warn("Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises");
        }
        this._fullfilledPromise = new Promise(function(innerResolve, innerReject) {
          self2.end(function(err, res) {
            if (err)
              innerReject(err);
            else
              innerResolve(res);
          });
        });
      }
      return this._fullfilledPromise.then(resolve, reject);
    };
    RequestBase.prototype.catch = function(cb) {
      return this.then(void 0, cb);
    };
    RequestBase.prototype.use = function use(fn) {
      fn(this);
      return this;
    };
    RequestBase.prototype.ok = function(cb) {
      if ("function" !== typeof cb)
        throw Error("Callback required");
      this._okCallback = cb;
      return this;
    };
    RequestBase.prototype._isResponseOK = function(res) {
      if (!res) {
        return false;
      }
      if (this._okCallback) {
        return this._okCallback(res);
      }
      return res.status >= 200 && res.status < 300;
    };
    RequestBase.prototype.get = function(field) {
      return this._header[field.toLowerCase()];
    };
    RequestBase.prototype.getHeader = RequestBase.prototype.get;
    RequestBase.prototype.set = function(field, val) {
      if (isObject(field)) {
        for (var key in field) {
          this.set(key, field[key]);
        }
        return this;
      }
      this._header[field.toLowerCase()] = val;
      this.header[field] = val;
      return this;
    };
    RequestBase.prototype.unset = function(field) {
      delete this._header[field.toLowerCase()];
      delete this.header[field];
      return this;
    };
    RequestBase.prototype.field = function(name, val) {
      if (null === name || void 0 === name) {
        throw new Error(".field(name, val) name can not be empty");
      }
      if (this._data) {
        console.error(".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()");
      }
      if (isObject(name)) {
        for (var key in name) {
          this.field(key, name[key]);
        }
        return this;
      }
      if (Array.isArray(val)) {
        for (var i in val) {
          this.field(name, val[i]);
        }
        return this;
      }
      if (null === val || void 0 === val) {
        throw new Error(".field(name, val) val can not be empty");
      }
      if ("boolean" === typeof val) {
        val = "" + val;
      }
      this._getFormData().append(name, val);
      return this;
    };
    RequestBase.prototype.abort = function() {
      if (this._aborted) {
        return this;
      }
      this._aborted = true;
      this.xhr && this.xhr.abort();
      this.req && this.req.abort();
      this.clearTimeout();
      this.emit("abort");
      return this;
    };
    RequestBase.prototype.withCredentials = function(on) {
      if (on == void 0)
        on = true;
      this._withCredentials = on;
      return this;
    };
    RequestBase.prototype.redirects = function(n) {
      this._maxRedirects = n;
      return this;
    };
    RequestBase.prototype.maxResponseSize = function(n) {
      if ("number" !== typeof n) {
        throw TypeError("Invalid argument");
      }
      this._maxResponseSize = n;
      return this;
    };
    RequestBase.prototype.toJSON = function() {
      return {
        method: this.method,
        url: this.url,
        data: this._data,
        headers: this._header
      };
    };
    RequestBase.prototype.send = function(data) {
      var isObj = isObject(data);
      var type = this._header["content-type"];
      if (this._formData) {
        console.error(".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()");
      }
      if (isObj && !this._data) {
        if (Array.isArray(data)) {
          this._data = [];
        } else if (!this._isHost(data)) {
          this._data = {};
        }
      } else if (data && this._data && this._isHost(this._data)) {
        throw Error("Can't merge these send calls");
      }
      if (isObj && isObject(this._data)) {
        for (var key in data) {
          this._data[key] = data[key];
        }
      } else if ("string" == typeof data) {
        if (!type)
          this.type("form");
        type = this._header["content-type"];
        if ("application/x-www-form-urlencoded" == type) {
          this._data = this._data ? this._data + "&" + data : data;
        } else {
          this._data = (this._data || "") + data;
        }
      } else {
        this._data = data;
      }
      if (!isObj || this._isHost(data)) {
        return this;
      }
      if (!type)
        this.type("json");
      return this;
    };
    RequestBase.prototype.sortQuery = function(sort) {
      this._sort = typeof sort === "undefined" ? true : sort;
      return this;
    };
    RequestBase.prototype._finalizeQueryString = function() {
      var query = this._query.join("&");
      if (query) {
        this.url += (this.url.indexOf("?") >= 0 ? "&" : "?") + query;
      }
      this._query.length = 0;
      if (this._sort) {
        var index = this.url.indexOf("?");
        if (index >= 0) {
          var queryArr = this.url.substring(index + 1).split("&");
          if ("function" === typeof this._sort) {
            queryArr.sort(this._sort);
          } else {
            queryArr.sort();
          }
          this.url = this.url.substring(0, index) + "?" + queryArr.join("&");
        }
      }
    };
    RequestBase.prototype._appendQueryString = function() {
      console.trace("Unsupported");
    };
    RequestBase.prototype._timeoutError = function(reason, timeout, errno) {
      if (this._aborted) {
        return;
      }
      var err = new Error(reason + timeout + "ms exceeded");
      err.timeout = timeout;
      err.code = "ECONNABORTED";
      err.errno = errno;
      this.timedout = true;
      this.abort();
      this.callback(err);
    };
    RequestBase.prototype._setTimeouts = function() {
      var self2 = this;
      if (this._timeout && !this._timer) {
        this._timer = setTimeout(function() {
          self2._timeoutError("Timeout of ", self2._timeout, "ETIME");
        }, this._timeout);
      }
      if (this._responseTimeout && !this._responseTimeoutTimer) {
        this._responseTimeoutTimer = setTimeout(function() {
          self2._timeoutError("Response timeout of ", self2._responseTimeout, "ETIMEDOUT");
        }, this._responseTimeout);
      }
    };
  }
});

// node_modules/superagent/lib/utils.js
var require_utils = __commonJS({
  "node_modules/superagent/lib/utils.js"(exports) {
    "use strict";
    exports.type = function(str) {
      return str.split(/ *; */).shift();
    };
    exports.params = function(str) {
      return str.split(/ *; */).reduce(function(obj, str2) {
        var parts = str2.split(/ *= */);
        var key = parts.shift();
        var val = parts.shift();
        if (key && val)
          obj[key] = val;
        return obj;
      }, {});
    };
    exports.parseLinks = function(str) {
      return str.split(/ *, */).reduce(function(obj, str2) {
        var parts = str2.split(/ *; */);
        var url = parts[0].slice(1, -1);
        var rel = parts[1].split(/ *= */)[1].slice(1, -1);
        obj[rel] = url;
        return obj;
      }, {});
    };
    exports.cleanHeader = function(header, shouldStripCookie) {
      delete header["content-type"];
      delete header["content-length"];
      delete header["transfer-encoding"];
      delete header["host"];
      if (shouldStripCookie) {
        delete header["cookie"];
      }
      return header;
    };
  }
});

// node_modules/superagent/lib/response-base.js
var require_response_base = __commonJS({
  "node_modules/superagent/lib/response-base.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = ResponseBase;
    function ResponseBase(obj) {
      if (obj)
        return mixin(obj);
    }
    function mixin(obj) {
      for (var key in ResponseBase.prototype) {
        obj[key] = ResponseBase.prototype[key];
      }
      return obj;
    }
    ResponseBase.prototype.get = function(field) {
      return this.header[field.toLowerCase()];
    };
    ResponseBase.prototype._setHeaderProperties = function(header) {
      var ct = header["content-type"] || "";
      this.type = utils.type(ct);
      var params = utils.params(ct);
      for (var key in params)
        this[key] = params[key];
      this.links = {};
      try {
        if (header.link) {
          this.links = utils.parseLinks(header.link);
        }
      } catch (err) {
      }
    };
    ResponseBase.prototype._setStatusProperties = function(status) {
      var type = status / 100 | 0;
      this.status = this.statusCode = status;
      this.statusType = type;
      this.info = 1 == type;
      this.ok = 2 == type;
      this.redirect = 3 == type;
      this.clientError = 4 == type;
      this.serverError = 5 == type;
      this.error = 4 == type || 5 == type ? this.toError() : false;
      this.accepted = 202 == status;
      this.noContent = 204 == status;
      this.badRequest = 400 == status;
      this.unauthorized = 401 == status;
      this.notAcceptable = 406 == status;
      this.forbidden = 403 == status;
      this.notFound = 404 == status;
    };
  }
});

// node_modules/superagent/lib/should-retry.js
var require_should_retry = __commonJS({
  "node_modules/superagent/lib/should-retry.js"(exports, module) {
    "use strict";
    var ERROR_CODES = [
      "ECONNRESET",
      "ETIMEDOUT",
      "EADDRINFO",
      "ESOCKETTIMEDOUT"
    ];
    module.exports = function shouldRetry(err, res) {
      if (err && err.code && ~ERROR_CODES.indexOf(err.code))
        return true;
      if (res && res.status && res.status >= 500)
        return true;
      if (err && "timeout" in err && err.code == "ECONNABORTED")
        return true;
      if (err && "crossDomain" in err)
        return true;
      return false;
    };
  }
});

// node_modules/superagent/lib/client.js
var require_client = __commonJS({
  "node_modules/superagent/lib/client.js"(exports, module) {
    var root;
    if (typeof window !== "undefined") {
      root = window;
    } else if (typeof self !== "undefined") {
      root = self;
    } else {
      console.warn("Using browser-only version of superagent in non-browser environment");
      root = exports;
    }
    var Emitter = require_component_emitter();
    var RequestBase = require_request_base();
    var isObject = require_is_object();
    var ResponseBase = require_response_base();
    var shouldRetry = require_should_retry();
    function noop() {
    }
    var request = exports = module.exports = function(method, url) {
      if ("function" == typeof url) {
        return new exports.Request("GET", method).end(url);
      }
      if (1 == arguments.length) {
        return new exports.Request("GET", method);
      }
      return new exports.Request(method, url);
    };
    exports.Request = Request;
    request.getXHR = function() {
      if (root.XMLHttpRequest && (!root.location || "file:" != root.location.protocol || !root.ActiveXObject)) {
        return new XMLHttpRequest();
      } else {
        try {
          return new ActiveXObject("Microsoft.XMLHTTP");
        } catch (e) {
        }
        try {
          return new ActiveXObject("Msxml2.XMLHTTP.6.0");
        } catch (e) {
        }
        try {
          return new ActiveXObject("Msxml2.XMLHTTP.3.0");
        } catch (e) {
        }
        try {
          return new ActiveXObject("Msxml2.XMLHTTP");
        } catch (e) {
        }
      }
      throw Error("Browser-only version of superagent could not find XHR");
    };
    var trim = "".trim ? function(s) {
      return s.trim();
    } : function(s) {
      return s.replace(/(^\s*|\s*$)/g, "");
    };
    function serialize(obj) {
      if (!isObject(obj))
        return obj;
      var pairs = [];
      for (var key in obj) {
        pushEncodedKeyValuePair(pairs, key, obj[key]);
      }
      return pairs.join("&");
    }
    function pushEncodedKeyValuePair(pairs, key, val) {
      if (val != null) {
        if (Array.isArray(val)) {
          val.forEach(function(v) {
            pushEncodedKeyValuePair(pairs, key, v);
          });
        } else if (isObject(val)) {
          for (var subkey in val) {
            pushEncodedKeyValuePair(pairs, key + "[" + subkey + "]", val[subkey]);
          }
        } else {
          pairs.push(encodeURIComponent(key) + "=" + encodeURIComponent(val));
        }
      } else if (val === null) {
        pairs.push(encodeURIComponent(key));
      }
    }
    request.serializeObject = serialize;
    function parseString(str) {
      var obj = {};
      var pairs = str.split("&");
      var pair;
      var pos;
      for (var i = 0, len = pairs.length; i < len; ++i) {
        pair = pairs[i];
        pos = pair.indexOf("=");
        if (pos == -1) {
          obj[decodeURIComponent(pair)] = "";
        } else {
          obj[decodeURIComponent(pair.slice(0, pos))] = decodeURIComponent(pair.slice(pos + 1));
        }
      }
      return obj;
    }
    request.parseString = parseString;
    request.types = {
      html: "text/html",
      json: "application/json",
      xml: "text/xml",
      urlencoded: "application/x-www-form-urlencoded",
      "form": "application/x-www-form-urlencoded",
      "form-data": "application/x-www-form-urlencoded"
    };
    request.serialize = {
      "application/x-www-form-urlencoded": serialize,
      "application/json": JSON.stringify
    };
    request.parse = {
      "application/x-www-form-urlencoded": parseString,
      "application/json": JSON.parse
    };
    function parseHeader(str) {
      var lines = str.split(/\r?\n/);
      var fields = {};
      var index;
      var line;
      var field;
      var val;
      for (var i = 0, len = lines.length; i < len; ++i) {
        line = lines[i];
        index = line.indexOf(":");
        if (index === -1) {
          continue;
        }
        field = line.slice(0, index).toLowerCase();
        val = trim(line.slice(index + 1));
        fields[field] = val;
      }
      return fields;
    }
    function isJSON(mime) {
      return /[\/+]json\b/.test(mime);
    }
    function Response(req) {
      this.req = req;
      this.xhr = this.req.xhr;
      this.text = this.req.method != "HEAD" && (this.xhr.responseType === "" || this.xhr.responseType === "text") || typeof this.xhr.responseType === "undefined" ? this.xhr.responseText : null;
      this.statusText = this.req.xhr.statusText;
      var status = this.xhr.status;
      if (status === 1223) {
        status = 204;
      }
      this._setStatusProperties(status);
      this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());
      this.header["content-type"] = this.xhr.getResponseHeader("content-type");
      this._setHeaderProperties(this.header);
      if (null === this.text && req._responseType) {
        this.body = this.xhr.response;
      } else {
        this.body = this.req.method != "HEAD" ? this._parseBody(this.text ? this.text : this.xhr.response) : null;
      }
    }
    ResponseBase(Response.prototype);
    Response.prototype._parseBody = function(str) {
      var parse = request.parse[this.type];
      if (this.req._parser) {
        return this.req._parser(this, str);
      }
      if (!parse && isJSON(this.type)) {
        parse = request.parse["application/json"];
      }
      return parse && str && (str.length || str instanceof Object) ? parse(str) : null;
    };
    Response.prototype.toError = function() {
      var req = this.req;
      var method = req.method;
      var url = req.url;
      var msg = "cannot " + method + " " + url + " (" + this.status + ")";
      var err = new Error(msg);
      err.status = this.status;
      err.method = method;
      err.url = url;
      return err;
    };
    request.Response = Response;
    function Request(method, url) {
      var self2 = this;
      this._query = this._query || [];
      this.method = method;
      this.url = url;
      this.header = {};
      this._header = {};
      this.on("end", function() {
        var err = null;
        var res = null;
        try {
          res = new Response(self2);
        } catch (e) {
          err = new Error("Parser is unable to parse the response");
          err.parse = true;
          err.original = e;
          if (self2.xhr) {
            err.rawResponse = typeof self2.xhr.responseType == "undefined" ? self2.xhr.responseText : self2.xhr.response;
            err.status = self2.xhr.status ? self2.xhr.status : null;
            err.statusCode = err.status;
          } else {
            err.rawResponse = null;
            err.status = null;
          }
          return self2.callback(err);
        }
        self2.emit("response", res);
        var new_err;
        try {
          if (!self2._isResponseOK(res)) {
            new_err = new Error(res.statusText || "Unsuccessful HTTP response");
          }
        } catch (custom_err) {
          new_err = custom_err;
        }
        if (new_err) {
          new_err.original = err;
          new_err.response = res;
          new_err.status = res.status;
          self2.callback(new_err, res);
        } else {
          self2.callback(null, res);
        }
      });
    }
    Emitter(Request.prototype);
    RequestBase(Request.prototype);
    Request.prototype.type = function(type) {
      this.set("Content-Type", request.types[type] || type);
      return this;
    };
    Request.prototype.accept = function(type) {
      this.set("Accept", request.types[type] || type);
      return this;
    };
    Request.prototype.auth = function(user, pass, options) {
      if (typeof pass === "object" && pass !== null) {
        options = pass;
      }
      if (!options) {
        options = {
          type: "function" === typeof btoa ? "basic" : "auto"
        };
      }
      switch (options.type) {
        case "basic":
          this.set("Authorization", "Basic " + btoa(user + ":" + pass));
          break;
        case "auto":
          this.username = user;
          this.password = pass;
          break;
        case "bearer":
          this.set("Authorization", "Bearer " + user);
          break;
      }
      return this;
    };
    Request.prototype.query = function(val) {
      if ("string" != typeof val)
        val = serialize(val);
      if (val)
        this._query.push(val);
      return this;
    };
    Request.prototype.attach = function(field, file, options) {
      if (file) {
        if (this._data) {
          throw Error("superagent can't mix .send() and .attach()");
        }
        this._getFormData().append(field, file, options || file.name);
      }
      return this;
    };
    Request.prototype._getFormData = function() {
      if (!this._formData) {
        this._formData = new root.FormData();
      }
      return this._formData;
    };
    Request.prototype.callback = function(err, res) {
      if (this._maxRetries && this._retries++ < this._maxRetries && shouldRetry(err, res)) {
        return this._retry();
      }
      var fn = this._callback;
      this.clearTimeout();
      if (err) {
        if (this._maxRetries)
          err.retries = this._retries - 1;
        this.emit("error", err);
      }
      fn(err, res);
    };
    Request.prototype.crossDomainError = function() {
      var err = new Error("Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.");
      err.crossDomain = true;
      err.status = this.status;
      err.method = this.method;
      err.url = this.url;
      this.callback(err);
    };
    Request.prototype.buffer = Request.prototype.ca = Request.prototype.agent = function() {
      console.warn("This is not supported in browser version of superagent");
      return this;
    };
    Request.prototype.pipe = Request.prototype.write = function() {
      throw Error("Streaming is not supported in browser version of superagent");
    };
    Request.prototype._isHost = function _isHost(obj) {
      return obj && "object" === typeof obj && !Array.isArray(obj) && Object.prototype.toString.call(obj) !== "[object Object]";
    };
    Request.prototype.end = function(fn) {
      if (this._endCalled) {
        console.warn("Warning: .end() was called twice. This is not supported in superagent");
      }
      this._endCalled = true;
      this._callback = fn || noop;
      this._finalizeQueryString();
      return this._end();
    };
    Request.prototype._end = function() {
      var self2 = this;
      var xhr = this.xhr = request.getXHR();
      var data = this._formData || this._data;
      this._setTimeouts();
      xhr.onreadystatechange = function() {
        var readyState = xhr.readyState;
        if (readyState >= 2 && self2._responseTimeoutTimer) {
          clearTimeout(self2._responseTimeoutTimer);
        }
        if (4 != readyState) {
          return;
        }
        var status;
        try {
          status = xhr.status;
        } catch (e) {
          status = 0;
        }
        if (!status) {
          if (self2.timedout || self2._aborted)
            return;
          return self2.crossDomainError();
        }
        self2.emit("end");
      };
      var handleProgress = function(direction, e) {
        if (e.total > 0) {
          e.percent = e.loaded / e.total * 100;
        }
        e.direction = direction;
        self2.emit("progress", e);
      };
      if (this.hasListeners("progress")) {
        try {
          xhr.onprogress = handleProgress.bind(null, "download");
          if (xhr.upload) {
            xhr.upload.onprogress = handleProgress.bind(null, "upload");
          }
        } catch (e) {
        }
      }
      try {
        if (this.username && this.password) {
          xhr.open(this.method, this.url, true, this.username, this.password);
        } else {
          xhr.open(this.method, this.url, true);
        }
      } catch (err) {
        return this.callback(err);
      }
      if (this._withCredentials)
        xhr.withCredentials = true;
      if (!this._formData && "GET" != this.method && "HEAD" != this.method && "string" != typeof data && !this._isHost(data)) {
        var contentType = this._header["content-type"];
        var serialize2 = this._serializer || request.serialize[contentType ? contentType.split(";")[0] : ""];
        if (!serialize2 && isJSON(contentType)) {
          serialize2 = request.serialize["application/json"];
        }
        if (serialize2)
          data = serialize2(data);
      }
      for (var field in this.header) {
        if (null == this.header[field])
          continue;
        if (this.header.hasOwnProperty(field))
          xhr.setRequestHeader(field, this.header[field]);
      }
      if (this._responseType) {
        xhr.responseType = this._responseType;
      }
      this.emit("request", this);
      xhr.send(typeof data !== "undefined" ? data : null);
      return this;
    };
    request.get = function(url, data, fn) {
      var req = request("GET", url);
      if ("function" == typeof data)
        fn = data, data = null;
      if (data)
        req.query(data);
      if (fn)
        req.end(fn);
      return req;
    };
    request.head = function(url, data, fn) {
      var req = request("HEAD", url);
      if ("function" == typeof data)
        fn = data, data = null;
      if (data)
        req.query(data);
      if (fn)
        req.end(fn);
      return req;
    };
    request.options = function(url, data, fn) {
      var req = request("OPTIONS", url);
      if ("function" == typeof data)
        fn = data, data = null;
      if (data)
        req.send(data);
      if (fn)
        req.end(fn);
      return req;
    };
    function del(url, data, fn) {
      var req = request("DELETE", url);
      if ("function" == typeof data)
        fn = data, data = null;
      if (data)
        req.send(data);
      if (fn)
        req.end(fn);
      return req;
    }
    request["del"] = del;
    request["delete"] = del;
    request.patch = function(url, data, fn) {
      var req = request("PATCH", url);
      if ("function" == typeof data)
        fn = data, data = null;
      if (data)
        req.send(data);
      if (fn)
        req.end(fn);
      return req;
    };
    request.post = function(url, data, fn) {
      var req = request("POST", url);
      if ("function" == typeof data)
        fn = data, data = null;
      if (data)
        req.send(data);
      if (fn)
        req.end(fn);
      return req;
    };
    request.put = function(url, data, fn) {
      var req = request("PUT", url);
      if ("function" == typeof data)
        fn = data, data = null;
      if (data)
        req.send(data);
      if (fn)
        req.end(fn);
      return req;
    };
  }
});

// node_modules/querystring/decode.js
var require_decode = __commonJS({
  "node_modules/querystring/decode.js"(exports, module) {
    "use strict";
    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    module.exports = function(qs, sep, eq, options) {
      sep = sep || "&";
      eq = eq || "=";
      var obj = {};
      if (typeof qs !== "string" || qs.length === 0) {
        return obj;
      }
      var regexp = /\+/g;
      qs = qs.split(sep);
      var maxKeys = 1e3;
      if (options && typeof options.maxKeys === "number") {
        maxKeys = options.maxKeys;
      }
      var len = qs.length;
      if (maxKeys > 0 && len > maxKeys) {
        len = maxKeys;
      }
      for (var i = 0; i < len; ++i) {
        var x = qs[i].replace(regexp, "%20"), idx = x.indexOf(eq), kstr, vstr, k, v;
        if (idx >= 0) {
          kstr = x.substr(0, idx);
          vstr = x.substr(idx + 1);
        } else {
          kstr = x;
          vstr = "";
        }
        k = decodeURIComponent(kstr);
        v = decodeURIComponent(vstr);
        if (!hasOwnProperty(obj, k)) {
          obj[k] = v;
        } else if (Array.isArray(obj[k])) {
          obj[k].push(v);
        } else {
          obj[k] = [obj[k], v];
        }
      }
      return obj;
    };
  }
});

// node_modules/querystring/encode.js
var require_encode = __commonJS({
  "node_modules/querystring/encode.js"(exports, module) {
    "use strict";
    var stringifyPrimitive = function(v) {
      switch (typeof v) {
        case "string":
          return v;
        case "boolean":
          return v ? "true" : "false";
        case "number":
          return isFinite(v) ? v : "";
        default:
          return "";
      }
    };
    module.exports = function(obj, sep, eq, name) {
      sep = sep || "&";
      eq = eq || "=";
      if (obj === null) {
        obj = void 0;
      }
      if (typeof obj === "object") {
        return Object.keys(obj).map(function(k) {
          var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
          if (Array.isArray(obj[k])) {
            return obj[k].map(function(v) {
              return ks + encodeURIComponent(stringifyPrimitive(v));
            }).join(sep);
          } else {
            return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
          }
        }).join(sep);
      }
      if (!name)
        return "";
      return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
    };
  }
});

// node_modules/querystring/index.js
var require_querystring = __commonJS({
  "node_modules/querystring/index.js"(exports) {
    "use strict";
    exports.decode = exports.parse = require_decode();
    exports.encode = exports.stringify = require_encode();
  }
});

// node_modules/sib-api-v3-sdk/src/ApiClient.js
var require_ApiClient = __commonJS({
  "node_modules/sib-api-v3-sdk/src/ApiClient.js"(exports, module) {
    var pkgJson = require_package();
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["superagent", "querystring"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_client(), require_querystring());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.ApiClient = factory(root.superagent, root.querystring);
      }
    })(exports, function(superagent, querystring) {
      "use strict";
      var exports2 = function() {
        this.basePath = "https://api.sendinblue.com/v3".replace(/\/+$/, "");
        this.authentications = {
          "api-key": { type: "apiKey", "in": "header", name: "api-key" },
          "partner-key": { type: "apiKey", "in": "header", name: "partner-key" }
        };
        this.defaultHeaders = {
          "user-agent": `sendinblue_clientAPI/v${pkgJson.version}/node`
        };
        this.timeout = 6e4;
        this.cache = true;
        this.enableCookies = false;
        if (typeof window === "undefined") {
          this.agent = new superagent.agent();
        }
        this.requestAgent = null;
      };
      exports2.prototype.paramToString = function(param) {
        if (param == void 0 || param == null) {
          return "";
        }
        if (param instanceof Date) {
          return param.toISOString();
        }
        return param.toString();
      };
      exports2.prototype.buildUrl = function(path, pathParams) {
        if (!path.match(/^\//)) {
          path = "/" + path;
        }
        var url = this.basePath + path;
        var _this = this;
        url = url.replace(/\{([\w-]+)\}/g, function(fullMatch, key) {
          var value;
          if (pathParams.hasOwnProperty(key)) {
            value = _this.paramToString(pathParams[key]);
          } else {
            value = fullMatch;
          }
          return encodeURIComponent(value);
        });
        return url;
      };
      exports2.prototype.isJsonMime = function(contentType) {
        return Boolean(contentType != null && contentType.match(/^application\/json(;.*)?$/i));
      };
      exports2.prototype.jsonPreferredMime = function(contentTypes) {
        for (var i = 0; i < contentTypes.length; i++) {
          if (this.isJsonMime(contentTypes[i])) {
            return contentTypes[i];
          }
        }
        return contentTypes[0];
      };
      exports2.prototype.isFileParam = function(param) {
        if (typeof __require === "function") {
          var fs;
          try {
            fs = require_fs();
          } catch (err) {
          }
          if (fs && fs.ReadStream && param instanceof fs.ReadStream) {
            return true;
          }
        }
        if (typeof Buffer === "function" && param instanceof Buffer) {
          return true;
        }
        if (typeof Blob === "function" && param instanceof Blob) {
          return true;
        }
        if (typeof File === "function" && param instanceof File) {
          return true;
        }
        return false;
      };
      exports2.prototype.normalizeParams = function(params) {
        var newParams = {};
        for (var key in params) {
          if (params.hasOwnProperty(key) && params[key] != void 0 && params[key] != null) {
            var value = params[key];
            if (this.isFileParam(value) || Array.isArray(value)) {
              newParams[key] = value;
            } else {
              newParams[key] = this.paramToString(value);
            }
          }
        }
        return newParams;
      };
      exports2.CollectionFormatEnum = {
        CSV: ",",
        SSV: " ",
        TSV: "	",
        PIPES: "|",
        MULTI: "multi"
      };
      exports2.prototype.buildCollectionParam = function buildCollectionParam(param, collectionFormat) {
        if (param == null) {
          return null;
        }
        switch (collectionFormat) {
          case "csv":
            return param.map(this.paramToString).join(",");
          case "ssv":
            return param.map(this.paramToString).join(" ");
          case "tsv":
            return param.map(this.paramToString).join("	");
          case "pipes":
            return param.map(this.paramToString).join("|");
          case "multi":
            return param.map(this.paramToString);
          default:
            throw new Error("Unknown collection format: " + collectionFormat);
        }
      };
      exports2.prototype.applyAuthToRequest = function(request, authNames) {
        var _this = this;
        authNames.forEach(function(authName) {
          var auth = _this.authentications[authName];
          switch (auth.type) {
            case "basic":
              if (auth.username || auth.password) {
                request.auth(auth.username || "", auth.password || "");
              }
              break;
            case "apiKey":
              if (auth.apiKey) {
                var data = {};
                if (auth.apiKeyPrefix) {
                  data[auth.name] = auth.apiKeyPrefix + " " + auth.apiKey;
                } else {
                  data[auth.name] = auth.apiKey;
                }
                if (auth["in"] === "header") {
                  request.set(data);
                } else {
                  request.query(data);
                }
              }
              break;
            case "oauth2":
              if (auth.accessToken) {
                request.set({ "Authorization": "Bearer " + auth.accessToken });
              }
              break;
            default:
              throw new Error("Unknown authentication type: " + auth.type);
          }
        });
      };
      exports2.prototype.deserialize = function deserialize(response, returnType) {
        if (response == null || returnType == null || response.status == 204) {
          return null;
        }
        var data = response.body;
        if (data == null || typeof data === "object" && typeof data.length === "undefined" && !Object.keys(data).length) {
          data = response.text;
        }
        return exports2.convertToType(data, returnType);
      };
      exports2.prototype.callApi = function callApi(path, httpMethod, pathParams, queryParams, collectionQueryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts, returnType) {
        var _this = this;
        var url = this.buildUrl(path, pathParams);
        var request = superagent(httpMethod, url);
        this.applyAuthToRequest(request, authNames);
        for (var key in collectionQueryParams) {
          if (collectionQueryParams.hasOwnProperty(key)) {
            var param = collectionQueryParams[key];
            if (param.collectionFormat === "csv") {
              if (param.value != null) {
                var value = param.value.map(this.paramToString).map(encodeURIComponent).join(",");
                request.query(encodeURIComponent(key) + "=" + value);
              }
            } else {
              queryParams[key] = this.buildCollectionParam(param.value, param.collectionFormat);
            }
          }
        }
        if (httpMethod.toUpperCase() === "GET" && this.cache === false) {
          queryParams["_"] = new Date().getTime();
        }
        request.query(this.normalizeParams(queryParams));
        request.set(this.defaultHeaders).set(this.normalizeParams(headerParams));
        if (this.requestAgent) {
          request.agent(this.requestAgent);
        }
        request.timeout(this.timeout);
        var contentType = this.jsonPreferredMime(contentTypes);
        if (contentType) {
          if (contentType != "multipart/form-data") {
            request.type(contentType);
          }
        } else if (!request.header["Content-Type"]) {
          request.type("application/json");
        }
        if (contentType === "application/x-www-form-urlencoded") {
          request.send(querystring.stringify(this.normalizeParams(formParams)));
        } else if (contentType == "multipart/form-data") {
          var _formParams = this.normalizeParams(formParams);
          for (var key in _formParams) {
            if (_formParams.hasOwnProperty(key)) {
              if (this.isFileParam(_formParams[key])) {
                request.attach(key, _formParams[key]);
              } else {
                request.field(key, _formParams[key]);
              }
            }
          }
        } else if (bodyParam) {
          request.send(bodyParam);
        }
        var accept = this.jsonPreferredMime(accepts);
        if (accept) {
          request.accept(accept);
        }
        if (this.enableCookies) {
          if (typeof window === "undefined") {
            this.agent.attachCookies(request);
          } else {
            request.withCredentials();
          }
        }
        return new Promise(function(resolve, reject) {
          request.end(function(error, response) {
            if (error) {
              reject(error);
            } else {
              try {
                var data = _this.deserialize(response, returnType);
                if (_this.enableCookies && typeof window === "undefined") {
                  _this.agent.saveCookies(response);
                }
                resolve({ data, response });
              } catch (err) {
                reject(err);
              }
            }
          });
        });
      };
      exports2.parseDate = function(str) {
        return new Date(str);
      };
      exports2.convertToType = function(data, type) {
        if (data === null || data === void 0)
          return data;
        switch (type) {
          case "Boolean":
            return Boolean(data);
          case "Integer":
            return parseInt(data, 10);
          case "Number":
            return parseFloat(data);
          case "String":
            return String(data);
          case "Date":
            return this.parseDate(String(data));
          case "Blob":
            return data;
          default:
            if (type === Object) {
              return data;
            } else if (typeof type === "function") {
              return type.constructFromObject(data);
            } else if (Array.isArray(type)) {
              var itemType = type[0];
              return data.map(function(item) {
                return exports2.convertToType(item, itemType);
              });
            } else if (typeof type === "object") {
              var keyType, valueType;
              for (var k in type) {
                if (type.hasOwnProperty(k)) {
                  keyType = k;
                  valueType = type[k];
                  break;
                }
              }
              var result = {};
              for (var k in data) {
                if (data.hasOwnProperty(k)) {
                  var key = exports2.convertToType(k, keyType);
                  var value = exports2.convertToType(data[k], valueType);
                  result[key] = value;
                }
              }
              return result;
            } else {
              return data;
            }
        }
      };
      exports2.constructFromObject = function(data, obj, itemType) {
        if (Array.isArray(data)) {
          for (var i = 0; i < data.length; i++) {
            if (data.hasOwnProperty(i))
              obj[i] = exports2.convertToType(data[i], itemType);
          }
        } else {
          for (var k in data) {
            if (data.hasOwnProperty(k))
              obj[k] = exports2.convertToType(data[k], itemType);
          }
        }
      };
      exports2.setUserAgent = function(header) {
        if (typeof header == "string" && header.substr(0, 11).trim().toLowerCase() === "sendinblue_") {
          exports2.instance.defaultHeaders["user-agent"] = header;
        }
        return;
      };
      exports2.instance = new exports2();
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/AbTestVersionClicksInner.js
var require_AbTestVersionClicksInner = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/AbTestVersionClicksInner.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.AbTestVersionClicksInner = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(link, clicksCount, clickRate) {
        this.link = link;
        this.clicksCount = clicksCount;
        this.clickRate = clickRate;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("link"))
            obj.link = ApiClient.convertToType(data["link"], "String");
          if (data.hasOwnProperty("clicksCount"))
            obj.clicksCount = ApiClient.convertToType(data["clicksCount"], "Number");
          if (data.hasOwnProperty("clickRate"))
            obj.clickRate = ApiClient.convertToType(data["clickRate"], "String");
        }
        return obj;
      };
      exports2.prototype.link = void 0;
      exports2.prototype.clicksCount = void 0;
      exports2.prototype.clickRate = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/AbTestVersionClicks.js
var require_AbTestVersionClicks = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/AbTestVersionClicks.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/AbTestVersionClicksInner"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_AbTestVersionClicksInner());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.AbTestVersionClicks = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.AbTestVersionClicksInner);
      }
    })(exports, function(ApiClient, AbTestVersionClicksInner) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          ApiClient.constructFromObject(data, obj, "AbTestVersionClicksInner");
        }
        return obj;
      };
      Object.setPrototypeOf(exports2.prototype, new Array());
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/AbTestCampaignResultClickedLinks.js
var require_AbTestCampaignResultClickedLinks = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/AbTestCampaignResultClickedLinks.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/AbTestVersionClicks"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_AbTestVersionClicks());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.AbTestCampaignResultClickedLinks = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.AbTestVersionClicks);
      }
    })(exports, function(ApiClient, AbTestVersionClicks) {
      "use strict";
      var exports2 = function(versionA, versionB) {
        this.versionA = versionA;
        this.versionB = versionB;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("Version A"))
            obj.versionA = AbTestVersionClicks.constructFromObject(data["Version A"]);
          if (data.hasOwnProperty("Version B"))
            obj.versionB = AbTestVersionClicks.constructFromObject(data["Version B"]);
        }
        return obj;
      };
      exports2.prototype.versionA = void 0;
      exports2.prototype.versionB = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/AbTestVersionStats.js
var require_AbTestVersionStats = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/AbTestVersionStats.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.AbTestVersionStats = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(versionA, versionB) {
        this.versionA = versionA;
        this.versionB = versionB;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("Version A"))
            obj.versionA = ApiClient.convertToType(data["Version A"], "String");
          if (data.hasOwnProperty("Version B"))
            obj.versionB = ApiClient.convertToType(data["Version B"], "String");
        }
        return obj;
      };
      exports2.prototype.versionA = void 0;
      exports2.prototype.versionB = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/AbTestCampaignResultStatistics.js
var require_AbTestCampaignResultStatistics = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/AbTestCampaignResultStatistics.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/AbTestVersionStats"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_AbTestVersionStats());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.AbTestCampaignResultStatistics = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.AbTestVersionStats);
      }
    })(exports, function(ApiClient, AbTestVersionStats) {
      "use strict";
      var exports2 = function(openers, clicks, unsubscribed, hardBounces, softBounces, complaints) {
        this.openers = openers;
        this.clicks = clicks;
        this.unsubscribed = unsubscribed;
        this.hardBounces = hardBounces;
        this.softBounces = softBounces;
        this.complaints = complaints;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("openers"))
            obj.openers = AbTestVersionStats.constructFromObject(data["openers"]);
          if (data.hasOwnProperty("clicks"))
            obj.clicks = AbTestVersionStats.constructFromObject(data["clicks"]);
          if (data.hasOwnProperty("unsubscribed"))
            obj.unsubscribed = AbTestVersionStats.constructFromObject(data["unsubscribed"]);
          if (data.hasOwnProperty("hardBounces"))
            obj.hardBounces = AbTestVersionStats.constructFromObject(data["hardBounces"]);
          if (data.hasOwnProperty("softBounces"))
            obj.softBounces = AbTestVersionStats.constructFromObject(data["softBounces"]);
          if (data.hasOwnProperty("complaints"))
            obj.complaints = AbTestVersionStats.constructFromObject(data["complaints"]);
        }
        return obj;
      };
      exports2.prototype.openers = void 0;
      exports2.prototype.clicks = void 0;
      exports2.prototype.unsubscribed = void 0;
      exports2.prototype.hardBounces = void 0;
      exports2.prototype.softBounces = void 0;
      exports2.prototype.complaints = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/AbTestCampaignResult.js
var require_AbTestCampaignResult = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/AbTestCampaignResult.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/AbTestCampaignResultClickedLinks", "model/AbTestCampaignResultStatistics"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_AbTestCampaignResultClickedLinks(), require_AbTestCampaignResultStatistics());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.AbTestCampaignResult = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.AbTestCampaignResultClickedLinks, root.SibApiV3Sdk.AbTestCampaignResultStatistics);
      }
    })(exports, function(ApiClient, AbTestCampaignResultClickedLinks, AbTestCampaignResultStatistics) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("winningVersion"))
            obj.winningVersion = ApiClient.convertToType(data["winningVersion"], "String");
          if (data.hasOwnProperty("winningCriteria"))
            obj.winningCriteria = ApiClient.convertToType(data["winningCriteria"], "String");
          if (data.hasOwnProperty("winningSubjectLine"))
            obj.winningSubjectLine = ApiClient.convertToType(data["winningSubjectLine"], "String");
          if (data.hasOwnProperty("openRate"))
            obj.openRate = ApiClient.convertToType(data["openRate"], "String");
          if (data.hasOwnProperty("clickRate"))
            obj.clickRate = ApiClient.convertToType(data["clickRate"], "String");
          if (data.hasOwnProperty("winningVersionRate"))
            obj.winningVersionRate = ApiClient.convertToType(data["winningVersionRate"], "String");
          if (data.hasOwnProperty("statistics"))
            obj.statistics = AbTestCampaignResultStatistics.constructFromObject(data["statistics"]);
          if (data.hasOwnProperty("clickedLinks"))
            obj.clickedLinks = AbTestCampaignResultClickedLinks.constructFromObject(data["clickedLinks"]);
        }
        return obj;
      };
      exports2.prototype.winningVersion = void 0;
      exports2.prototype.winningCriteria = void 0;
      exports2.prototype.winningSubjectLine = void 0;
      exports2.prototype.openRate = void 0;
      exports2.prototype.clickRate = void 0;
      exports2.prototype.winningVersionRate = void 0;
      exports2.prototype.statistics = void 0;
      exports2.prototype.clickedLinks = void 0;
      exports2.WinningVersionEnum = {
        notAvailable: "notAvailable",
        pending: "pending",
        tie: "tie",
        A: "A",
        B: "B"
      };
      exports2.WinningCriteriaEnum = {
        open: "Open",
        click: "Click"
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/AddChildDomain.js
var require_AddChildDomain = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/AddChildDomain.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.AddChildDomain = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("domain"))
            obj.domain = ApiClient.convertToType(data["domain"], "String");
        }
        return obj;
      };
      exports2.prototype.domain = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/AddContactToList.js
var require_AddContactToList = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/AddContactToList.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.AddContactToList = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("emails"))
            obj.emails = ApiClient.convertToType(data["emails"], ["String"]);
          if (data.hasOwnProperty("ids"))
            obj.ids = ApiClient.convertToType(data["ids"], ["Number"]);
        }
        return obj;
      };
      exports2.prototype.emails = void 0;
      exports2.prototype.ids = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/AddCredits.js
var require_AddCredits = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/AddCredits.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.AddCredits = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("sms"))
            obj.sms = ApiClient.convertToType(data["sms"], "Number");
          if (data.hasOwnProperty("email"))
            obj.email = ApiClient.convertToType(data["email"], "Number");
        }
        return obj;
      };
      exports2.prototype.sms = void 0;
      exports2.prototype.email = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/BlockDomain.js
var require_BlockDomain = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/BlockDomain.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.BlockDomain = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(domain) {
        this.domain = domain;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("domain"))
            obj.domain = ApiClient.convertToType(data["domain"], "String");
        }
        return obj;
      };
      exports2.prototype.domain = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/Body.js
var require_Body = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/Body.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.Body = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(name) {
        this.name = name;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
          if (data.hasOwnProperty("attributes"))
            obj.attributes = ApiClient.convertToType(data["attributes"], Object);
        }
        return obj;
      };
      exports2.prototype.name = void 0;
      exports2.prototype.attributes = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/Body1.js
var require_Body1 = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/Body1.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.Body1 = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
          if (data.hasOwnProperty("attributes"))
            obj.attributes = ApiClient.convertToType(data["attributes"], Object);
          if (data.hasOwnProperty("duration"))
            obj.duration = ApiClient.convertToType(data["duration"], "Number");
          if (data.hasOwnProperty("taskTypeId"))
            obj.taskTypeId = ApiClient.convertToType(data["taskTypeId"], "String");
          if (data.hasOwnProperty("date"))
            obj._date = ApiClient.convertToType(data["date"], "Date");
          if (data.hasOwnProperty("notes"))
            obj.notes = ApiClient.convertToType(data["notes"], "String");
          if (data.hasOwnProperty("done"))
            obj.done = ApiClient.convertToType(data["done"], "Boolean");
          if (data.hasOwnProperty("assignToId"))
            obj.assignToId = ApiClient.convertToType(data["assignToId"], "String");
          if (data.hasOwnProperty("contactsIds"))
            obj.contactsIds = ApiClient.convertToType(data["contactsIds"], ["Number"]);
          if (data.hasOwnProperty("dealsIds"))
            obj.dealsIds = ApiClient.convertToType(data["dealsIds"], ["String"]);
          if (data.hasOwnProperty("companiesIds"))
            obj.companiesIds = ApiClient.convertToType(data["companiesIds"], ["String"]);
          if (data.hasOwnProperty("reminder"))
            obj.reminder = TaskReminder.constructFromObject(data["reminder"]);
        }
        return obj;
      };
      exports2.prototype.name = void 0;
      exports2.prototype.duration = void 0;
      exports2.prototype.taskTypeId = void 0;
      exports2.prototype._date = void 0;
      exports2.prototype.notes = void 0;
      exports2.prototype.done = void 0;
      exports2.prototype.assignToId = void 0;
      exports2.prototype.contactsIds = void 0;
      exports2.prototype.dealsIds = void 0;
      exports2.prototype.companiesIds = void 0;
      exports2.prototype.reminder = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/Body2.js
var require_Body2 = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/Body2.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.Body2 = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(name) {
        this.name = name;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
          if (data.hasOwnProperty("attributes"))
            obj.attributes = ApiClient.convertToType(data["attributes"], Object);
        }
        return obj;
      };
      exports2.prototype.name = void 0;
      exports2.prototype.attributes = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/Body3.js
var require_Body3 = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/Body3.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.Body3 = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
          if (data.hasOwnProperty("attributes"))
            obj.attributes = ApiClient.convertToType(data["attributes"], Object);
        }
        return obj;
      };
      exports2.prototype.name = void 0;
      exports2.prototype.attributes = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/Body4.js
var require_Body4 = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/Body4.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.Body4 = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("linkContactIds"))
            obj.linkContactIds = ApiClient.convertToType(data["linkContactIds"], ["Number"]);
          if (data.hasOwnProperty("unlinkContactIds"))
            obj.unlinkContactIds = ApiClient.convertToType(data["unlinkContactIds"], ["Number"]);
          if (data.hasOwnProperty("linkDealsIds"))
            obj.linkDealsIds = ApiClient.convertToType(data["linkDealsIds"], ["String"]);
          if (data.hasOwnProperty("unlinkDealsIds"))
            obj.unlinkDealsIds = ApiClient.convertToType(data["unlinkDealsIds"], ["String"]);
        }
        return obj;
      };
      exports2.prototype.linkContactIds = void 0;
      exports2.prototype.unlinkContactIds = void 0;
      exports2.prototype.linkDealsIds = void 0;
      exports2.prototype.unlinkDealsIds = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/TaskReminder.js
var require_TaskReminder = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/TaskReminder.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.TaskReminder = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("value"))
            obj.value = ApiClient.convertToType(data["value"], "Number");
          if (data.hasOwnProperty("unit"))
            obj.unit = ApiClient.convertToType(data["unit"], "String");
          if (data.hasOwnProperty("types"))
            obj.types = ApiClient.convertToType(data["types"], ["String"]);
        }
        return obj;
      };
      exports2.prototype.value = void 0;
      exports2.prototype.unit = void 0;
      exports2.prototype.types = void 0;
      exports2.UnitEnum = {
        minutes: "minutes",
        hours: "hours",
        weeks: "weeks",
        days: "days"
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/Body5.js
var require_Body5 = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/Body5.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/TaskReminder"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_TaskReminder());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.Body5 = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.TaskReminder);
      }
    })(exports, function(ApiClient, TaskReminder2) {
      "use strict";
      var exports2 = function(name, taskTypeId, _date) {
        this.name = name;
        this.taskTypeId = taskTypeId;
        this._date = _date;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
          if (data.hasOwnProperty("duration"))
            obj.duration = ApiClient.convertToType(data["duration"], "Number");
          if (data.hasOwnProperty("taskTypeId"))
            obj.taskTypeId = ApiClient.convertToType(data["taskTypeId"], "String");
          if (data.hasOwnProperty("date"))
            obj._date = ApiClient.convertToType(data["date"], "Date");
          if (data.hasOwnProperty("notes"))
            obj.notes = ApiClient.convertToType(data["notes"], "String");
          if (data.hasOwnProperty("done"))
            obj.done = ApiClient.convertToType(data["done"], "Boolean");
          if (data.hasOwnProperty("assignToId"))
            obj.assignToId = ApiClient.convertToType(data["assignToId"], "String");
          if (data.hasOwnProperty("contactsIds"))
            obj.contactsIds = ApiClient.convertToType(data["contactsIds"], ["Number"]);
          if (data.hasOwnProperty("dealsIds"))
            obj.dealsIds = ApiClient.convertToType(data["dealsIds"], ["String"]);
          if (data.hasOwnProperty("companiesIds"))
            obj.companiesIds = ApiClient.convertToType(data["companiesIds"], ["String"]);
          if (data.hasOwnProperty("reminder"))
            obj.reminder = TaskReminder2.constructFromObject(data["reminder"]);
        }
        return obj;
      };
      exports2.prototype.name = void 0;
      exports2.prototype.duration = void 0;
      exports2.prototype.taskTypeId = void 0;
      exports2.prototype._date = void 0;
      exports2.prototype.notes = void 0;
      exports2.prototype.done = void 0;
      exports2.prototype.assignToId = void 0;
      exports2.prototype.contactsIds = void 0;
      exports2.prototype.dealsIds = void 0;
      exports2.prototype.companiesIds = void 0;
      exports2.prototype.reminder = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/Body6.js
var require_Body6 = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/Body6.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.Body6 = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
          if (data.hasOwnProperty("duration"))
            obj.duration = ApiClient.convertToType(data["duration"], "Number");
          if (data.hasOwnProperty("taskTypeId"))
            obj.taskTypeId = ApiClient.convertToType(data["taskTypeId"], "String");
          if (data.hasOwnProperty("date"))
            obj._date = ApiClient.convertToType(data["date"], "Date");
          if (data.hasOwnProperty("notes"))
            obj.notes = ApiClient.convertToType(data["notes"], "String");
          if (data.hasOwnProperty("done"))
            obj.done = ApiClient.convertToType(data["done"], "Boolean");
          if (data.hasOwnProperty("assignToId"))
            obj.assignToId = ApiClient.convertToType(data["assignToId"], "String");
          if (data.hasOwnProperty("contactsIds"))
            obj.contactsIds = ApiClient.convertToType(data["contactsIds"], ["Number"]);
          if (data.hasOwnProperty("dealsIds"))
            obj.dealsIds = ApiClient.convertToType(data["dealsIds"], ["String"]);
          if (data.hasOwnProperty("companiesIds"))
            obj.companiesIds = ApiClient.convertToType(data["companiesIds"], ["String"]);
        }
        return obj;
      };
      exports2.prototype.name = void 0;
      exports2.prototype.duration = void 0;
      exports2.prototype.taskTypeId = void 0;
      exports2.prototype._date = void 0;
      exports2.prototype.notes = void 0;
      exports2.prototype.done = void 0;
      exports2.prototype.assignToId = void 0;
      exports2.prototype.contactsIds = void 0;
      exports2.prototype.dealsIds = void 0;
      exports2.prototype.companiesIds = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/Company.js
var require_Company = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/Company.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.Company = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("id"))
            obj.id = ApiClient.convertToType(data["id"], "String");
          if (data.hasOwnProperty("attributes"))
            obj.attributes = ApiClient.convertToType(data["attributes"], Object);
          if (data.hasOwnProperty("linkedContactsIds"))
            obj.linkedContactsIds = ApiClient.convertToType(data["linkedContactsIds"], ["Number"]);
          if (data.hasOwnProperty("linkedDealsIds"))
            obj.linkedDealsIds = ApiClient.convertToType(data["linkedDealsIds"], ["String"]);
        }
        return obj;
      };
      exports2.prototype.id = void 0;
      exports2.prototype.attributes = void 0;
      exports2.prototype.linkedContactsIds = void 0;
      exports2.prototype.linkedDealsIds = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/CompaniesList.js
var require_CompaniesList = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/CompaniesList.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/Company"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_Company());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.CompaniesList = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.Company);
      }
    })(exports, function(ApiClient, Company) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("items"))
            obj.items = ApiClient.convertToType(data["items"], [Company]);
        }
        return obj;
      };
      exports2.prototype.items = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/CompanyAttributesInner.js
var require_CompanyAttributesInner = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/CompanyAttributesInner.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.CompanyAttributesInner = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("internalName"))
            obj.internalName = ApiClient.convertToType(data["internalName"], "String");
          if (data.hasOwnProperty("label"))
            obj.label = ApiClient.convertToType(data["label"], "String");
          if (data.hasOwnProperty("attributeTypeName"))
            obj.attributeTypeName = ApiClient.convertToType(data["attributeTypeName"], "String");
          if (data.hasOwnProperty("attributeOptions"))
            obj.attributeOptions = ApiClient.convertToType(data["attributeOptions"], [Object]);
          if (data.hasOwnProperty("isRequired"))
            obj.isRequired = ApiClient.convertToType(data["isRequired"], "Boolean");
        }
        return obj;
      };
      exports2.prototype.internalName = void 0;
      exports2.prototype.label = void 0;
      exports2.prototype.attributeTypeName = void 0;
      exports2.prototype.attributeOptions = void 0;
      exports2.prototype.isRequired = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/CompanyAttributes.js
var require_CompanyAttributes = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/CompanyAttributes.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/CompanyAttributesInner"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_CompanyAttributesInner());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.CompanyAttributes = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.CompanyAttributesInner);
      }
    })(exports, function(ApiClient, CompanyAttributesInner) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          ApiClient.constructFromObject(data, obj, "CompanyAttributesInner");
        }
        return obj;
      };
      Object.setPrototypeOf(exports2.prototype, new Array());
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/CreateAttributeEnumeration.js
var require_CreateAttributeEnumeration = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/CreateAttributeEnumeration.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.CreateAttributeEnumeration = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(value, label) {
        this.value = value;
        this.label = label;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("value"))
            obj.value = ApiClient.convertToType(data["value"], "Number");
          if (data.hasOwnProperty("label"))
            obj.label = ApiClient.convertToType(data["label"], "String");
        }
        return obj;
      };
      exports2.prototype.value = void 0;
      exports2.prototype.label = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/CreateAttribute.js
var require_CreateAttribute = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/CreateAttribute.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/CreateAttributeEnumeration"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_CreateAttributeEnumeration());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.CreateAttribute = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.CreateAttributeEnumeration);
      }
    })(exports, function(ApiClient, CreateAttributeEnumeration) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("value"))
            obj.value = ApiClient.convertToType(data["value"], "String");
          if (data.hasOwnProperty("enumeration"))
            obj.enumeration = ApiClient.convertToType(data["enumeration"], [CreateAttributeEnumeration]);
          if (data.hasOwnProperty("type"))
            obj.type = ApiClient.convertToType(data["type"], "String");
        }
        return obj;
      };
      exports2.prototype.value = void 0;
      exports2.prototype.enumeration = void 0;
      exports2.prototype.type = void 0;
      exports2.TypeEnum = {
        text: "text",
        _date: "date",
        _float: "float",
        _boolean: "boolean",
        id: "id",
        category: "category"
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/CreateChild.js
var require_CreateChild = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/CreateChild.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.CreateChild = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(email, firstName, lastName, companyName, password) {
        this.email = email;
        this.firstName = firstName;
        this.lastName = lastName;
        this.companyName = companyName;
        this.password = password;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("email"))
            obj.email = ApiClient.convertToType(data["email"], "String");
          if (data.hasOwnProperty("firstName"))
            obj.firstName = ApiClient.convertToType(data["firstName"], "String");
          if (data.hasOwnProperty("lastName"))
            obj.lastName = ApiClient.convertToType(data["lastName"], "String");
          if (data.hasOwnProperty("companyName"))
            obj.companyName = ApiClient.convertToType(data["companyName"], "String");
          if (data.hasOwnProperty("password"))
            obj.password = ApiClient.convertToType(data["password"], "String");
          if (data.hasOwnProperty("language"))
            obj.language = ApiClient.convertToType(data["language"], "String");
        }
        return obj;
      };
      exports2.prototype.email = void 0;
      exports2.prototype.firstName = void 0;
      exports2.prototype.lastName = void 0;
      exports2.prototype.companyName = void 0;
      exports2.prototype.password = void 0;
      exports2.prototype.language = void 0;
      exports2.LanguageEnum = {
        fr: "fr",
        es: "es",
        pt: "pt",
        it: "it",
        de: "de",
        en: "en"
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/CreateContact.js
var require_CreateContact = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/CreateContact.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.CreateContact = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("email"))
            obj.email = ApiClient.convertToType(data["email"], "String");
          if (data.hasOwnProperty("attributes"))
            obj.attributes = ApiClient.convertToType(data["attributes"], Object);
          if (data.hasOwnProperty("emailBlacklisted"))
            obj.emailBlacklisted = ApiClient.convertToType(data["emailBlacklisted"], "Boolean");
          if (data.hasOwnProperty("smsBlacklisted"))
            obj.smsBlacklisted = ApiClient.convertToType(data["smsBlacklisted"], "Boolean");
          if (data.hasOwnProperty("listIds"))
            obj.listIds = ApiClient.convertToType(data["listIds"], ["Number"]);
          if (data.hasOwnProperty("updateEnabled"))
            obj.updateEnabled = ApiClient.convertToType(data["updateEnabled"], "Boolean");
          if (data.hasOwnProperty("smtpBlacklistSender"))
            obj.smtpBlacklistSender = ApiClient.convertToType(data["smtpBlacklistSender"], ["String"]);
        }
        return obj;
      };
      exports2.prototype.email = void 0;
      exports2.prototype.attributes = void 0;
      exports2.prototype.emailBlacklisted = void 0;
      exports2.prototype.smsBlacklisted = void 0;
      exports2.prototype.listIds = void 0;
      exports2.prototype.updateEnabled = false;
      exports2.prototype.smtpBlacklistSender = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/CreateDoiContact.js
var require_CreateDoiContact = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/CreateDoiContact.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.CreateDoiContact = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(email, includeListIds, templateId, redirectionUrl) {
        this.email = email;
        this.includeListIds = includeListIds;
        this.templateId = templateId;
        this.redirectionUrl = redirectionUrl;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("email"))
            obj.email = ApiClient.convertToType(data["email"], "String");
          if (data.hasOwnProperty("attributes"))
            obj.attributes = ApiClient.convertToType(data["attributes"], Object);
          if (data.hasOwnProperty("includeListIds"))
            obj.includeListIds = ApiClient.convertToType(data["includeListIds"], ["Number"]);
          if (data.hasOwnProperty("excludeListIds"))
            obj.excludeListIds = ApiClient.convertToType(data["excludeListIds"], ["Number"]);
          if (data.hasOwnProperty("templateId"))
            obj.templateId = ApiClient.convertToType(data["templateId"], "Number");
          if (data.hasOwnProperty("redirectionUrl"))
            obj.redirectionUrl = ApiClient.convertToType(data["redirectionUrl"], "String");
        }
        return obj;
      };
      exports2.prototype.email = void 0;
      exports2.prototype.attributes = void 0;
      exports2.prototype.includeListIds = void 0;
      exports2.prototype.excludeListIds = void 0;
      exports2.prototype.templateId = void 0;
      exports2.prototype.redirectionUrl = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/CreateEmailCampaignRecipients.js
var require_CreateEmailCampaignRecipients = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/CreateEmailCampaignRecipients.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.CreateEmailCampaignRecipients = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("exclusionListIds"))
            obj.exclusionListIds = ApiClient.convertToType(data["exclusionListIds"], ["Number"]);
          if (data.hasOwnProperty("listIds"))
            obj.listIds = ApiClient.convertToType(data["listIds"], ["Number"]);
        }
        return obj;
      };
      exports2.prototype.exclusionListIds = void 0;
      exports2.prototype.listIds = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/CreateEmailCampaignSender.js
var require_CreateEmailCampaignSender = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/CreateEmailCampaignSender.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.CreateEmailCampaignSender = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(email) {
        this.email = email;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
          if (data.hasOwnProperty("email"))
            obj.email = ApiClient.convertToType(data["email"], "String");
          if (data.hasOwnProperty("id"))
            obj.id = ApiClient.convertToType(data["id"], "Number");
        }
        return obj;
      };
      exports2.prototype.name = void 0;
      exports2.prototype.email = void 0;
      exports2.prototype.id = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/CreateEmailCampaign.js
var require_CreateEmailCampaign = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/CreateEmailCampaign.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/CreateEmailCampaignRecipients", "model/CreateEmailCampaignSender"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_CreateEmailCampaignRecipients(), require_CreateEmailCampaignSender());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.CreateEmailCampaign = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.CreateEmailCampaignRecipients, root.SibApiV3Sdk.CreateEmailCampaignSender);
      }
    })(exports, function(ApiClient, CreateEmailCampaignRecipients, CreateEmailCampaignSender) {
      "use strict";
      var exports2 = function(sender, name) {
        this.sender = sender;
        this.name = name;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("tag"))
            obj.tag = ApiClient.convertToType(data["tag"], "String");
          if (data.hasOwnProperty("sender"))
            obj.sender = CreateEmailCampaignSender.constructFromObject(data["sender"]);
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
          if (data.hasOwnProperty("htmlContent"))
            obj.htmlContent = ApiClient.convertToType(data["htmlContent"], "String");
          if (data.hasOwnProperty("htmlUrl"))
            obj.htmlUrl = ApiClient.convertToType(data["htmlUrl"], "String");
          if (data.hasOwnProperty("templateId"))
            obj.templateId = ApiClient.convertToType(data["templateId"], "Number");
          if (data.hasOwnProperty("scheduledAt"))
            obj.scheduledAt = ApiClient.convertToType(data["scheduledAt"], "String");
          if (data.hasOwnProperty("subject"))
            obj.subject = ApiClient.convertToType(data["subject"], "String");
          if (data.hasOwnProperty("replyTo"))
            obj.replyTo = ApiClient.convertToType(data["replyTo"], "String");
          if (data.hasOwnProperty("toField"))
            obj.toField = ApiClient.convertToType(data["toField"], "String");
          if (data.hasOwnProperty("recipients"))
            obj.recipients = CreateEmailCampaignRecipients.constructFromObject(data["recipients"]);
          if (data.hasOwnProperty("attachmentUrl"))
            obj.attachmentUrl = ApiClient.convertToType(data["attachmentUrl"], "String");
          if (data.hasOwnProperty("inlineImageActivation"))
            obj.inlineImageActivation = ApiClient.convertToType(data["inlineImageActivation"], "Boolean");
          if (data.hasOwnProperty("mirrorActive"))
            obj.mirrorActive = ApiClient.convertToType(data["mirrorActive"], "Boolean");
          if (data.hasOwnProperty("footer"))
            obj.footer = ApiClient.convertToType(data["footer"], "String");
          if (data.hasOwnProperty("header"))
            obj.header = ApiClient.convertToType(data["header"], "String");
          if (data.hasOwnProperty("utmCampaign"))
            obj.utmCampaign = ApiClient.convertToType(data["utmCampaign"], "String");
          if (data.hasOwnProperty("params"))
            obj.params = ApiClient.convertToType(data["params"], Object);
          if (data.hasOwnProperty("sendAtBestTime"))
            obj.sendAtBestTime = ApiClient.convertToType(data["sendAtBestTime"], "Boolean");
          if (data.hasOwnProperty("abTesting"))
            obj.abTesting = ApiClient.convertToType(data["abTesting"], "Boolean");
          if (data.hasOwnProperty("subjectA"))
            obj.subjectA = ApiClient.convertToType(data["subjectA"], "String");
          if (data.hasOwnProperty("subjectB"))
            obj.subjectB = ApiClient.convertToType(data["subjectB"], "String");
          if (data.hasOwnProperty("splitRule"))
            obj.splitRule = ApiClient.convertToType(data["splitRule"], "Number");
          if (data.hasOwnProperty("winnerCriteria"))
            obj.winnerCriteria = ApiClient.convertToType(data["winnerCriteria"], "String");
          if (data.hasOwnProperty("winnerDelay"))
            obj.winnerDelay = ApiClient.convertToType(data["winnerDelay"], "Number");
          if (data.hasOwnProperty("ipWarmupEnable"))
            obj.ipWarmupEnable = ApiClient.convertToType(data["ipWarmupEnable"], "Boolean");
          if (data.hasOwnProperty("initialQuota"))
            obj.initialQuota = ApiClient.convertToType(data["initialQuota"], "Number");
          if (data.hasOwnProperty("increaseRate"))
            obj.increaseRate = ApiClient.convertToType(data["increaseRate"], "Number");
        }
        return obj;
      };
      exports2.prototype.tag = void 0;
      exports2.prototype.sender = void 0;
      exports2.prototype.name = void 0;
      exports2.prototype.htmlContent = void 0;
      exports2.prototype.htmlUrl = void 0;
      exports2.prototype.templateId = void 0;
      exports2.prototype.scheduledAt = void 0;
      exports2.prototype.subject = void 0;
      exports2.prototype.replyTo = void 0;
      exports2.prototype.toField = void 0;
      exports2.prototype.recipients = void 0;
      exports2.prototype.attachmentUrl = void 0;
      exports2.prototype.inlineImageActivation = false;
      exports2.prototype.mirrorActive = void 0;
      exports2.prototype.footer = void 0;
      exports2.prototype.header = void 0;
      exports2.prototype.utmCampaign = void 0;
      exports2.prototype.params = void 0;
      exports2.prototype.sendAtBestTime = false;
      exports2.prototype.abTesting = false;
      exports2.prototype.subjectA = void 0;
      exports2.prototype.subjectB = void 0;
      exports2.prototype.splitRule = void 0;
      exports2.prototype.winnerCriteria = void 0;
      exports2.prototype.winnerDelay = void 0;
      exports2.prototype.ipWarmupEnable = false;
      exports2.prototype.initialQuota = void 0;
      exports2.prototype.increaseRate = void 0;
      exports2.WinnerCriteriaEnum = {
        open: "open",
        click: "click"
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/CreateList.js
var require_CreateList = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/CreateList.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.CreateList = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(name, folderId) {
        this.name = name;
        this.folderId = folderId;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
          if (data.hasOwnProperty("folderId"))
            obj.folderId = ApiClient.convertToType(data["folderId"], "Number");
        }
        return obj;
      };
      exports2.prototype.name = void 0;
      exports2.prototype.folderId = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/CreateModel.js
var require_CreateModel = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/CreateModel.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.CreateModel = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(id) {
        this.id = id;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("id"))
            obj.id = ApiClient.convertToType(data["id"], "Number");
        }
        return obj;
      };
      exports2.prototype.id = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/CreateReseller.js
var require_CreateReseller = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/CreateReseller.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.CreateReseller = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(authKey) {
        this.authKey = authKey;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("authKey"))
            obj.authKey = ApiClient.convertToType(data["authKey"], "String");
          if (data.hasOwnProperty("id"))
            obj.id = ApiClient.convertToType(data["id"], "Number");
        }
        return obj;
      };
      exports2.prototype.authKey = void 0;
      exports2.prototype.id = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/CreateSenderIps.js
var require_CreateSenderIps = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/CreateSenderIps.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.CreateSenderIps = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(ip, domain) {
        this.ip = ip;
        this.domain = domain;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("ip"))
            obj.ip = ApiClient.convertToType(data["ip"], "String");
          if (data.hasOwnProperty("domain"))
            obj.domain = ApiClient.convertToType(data["domain"], "String");
          if (data.hasOwnProperty("weight"))
            obj.weight = ApiClient.convertToType(data["weight"], "Number");
        }
        return obj;
      };
      exports2.prototype.ip = void 0;
      exports2.prototype.domain = void 0;
      exports2.prototype.weight = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/CreateSender.js
var require_CreateSender = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/CreateSender.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/CreateSenderIps"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_CreateSenderIps());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.CreateSender = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.CreateSenderIps);
      }
    })(exports, function(ApiClient, CreateSenderIps) {
      "use strict";
      var exports2 = function(name, email) {
        this.name = name;
        this.email = email;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
          if (data.hasOwnProperty("email"))
            obj.email = ApiClient.convertToType(data["email"], "String");
          if (data.hasOwnProperty("ips"))
            obj.ips = ApiClient.convertToType(data["ips"], [CreateSenderIps]);
        }
        return obj;
      };
      exports2.prototype.name = void 0;
      exports2.prototype.email = void 0;
      exports2.prototype.ips = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/CreateSenderModel.js
var require_CreateSenderModel = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/CreateSenderModel.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.CreateSenderModel = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(id) {
        this.id = id;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("id"))
            obj.id = ApiClient.convertToType(data["id"], "Number");
          if (data.hasOwnProperty("spfError"))
            obj.spfError = ApiClient.convertToType(data["spfError"], "Boolean");
          if (data.hasOwnProperty("dkimError"))
            obj.dkimError = ApiClient.convertToType(data["dkimError"], "Boolean");
        }
        return obj;
      };
      exports2.prototype.id = void 0;
      exports2.prototype.spfError = void 0;
      exports2.prototype.dkimError = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/CreateSmsCampaignRecipients.js
var require_CreateSmsCampaignRecipients = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/CreateSmsCampaignRecipients.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.CreateSmsCampaignRecipients = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(listIds) {
        this.listIds = listIds;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("listIds"))
            obj.listIds = ApiClient.convertToType(data["listIds"], ["Number"]);
          if (data.hasOwnProperty("exclusionListIds"))
            obj.exclusionListIds = ApiClient.convertToType(data["exclusionListIds"], ["Number"]);
        }
        return obj;
      };
      exports2.prototype.listIds = void 0;
      exports2.prototype.exclusionListIds = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/CreateSmsCampaign.js
var require_CreateSmsCampaign = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/CreateSmsCampaign.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/CreateSmsCampaignRecipients"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_CreateSmsCampaignRecipients());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.CreateSmsCampaign = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.CreateSmsCampaignRecipients);
      }
    })(exports, function(ApiClient, CreateSmsCampaignRecipients) {
      "use strict";
      var exports2 = function(name, sender, content) {
        this.name = name;
        this.sender = sender;
        this.content = content;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
          if (data.hasOwnProperty("sender"))
            obj.sender = ApiClient.convertToType(data["sender"], "String");
          if (data.hasOwnProperty("content"))
            obj.content = ApiClient.convertToType(data["content"], "String");
          if (data.hasOwnProperty("recipients"))
            obj.recipients = CreateSmsCampaignRecipients.constructFromObject(data["recipients"]);
          if (data.hasOwnProperty("scheduledAt"))
            obj.scheduledAt = ApiClient.convertToType(data["scheduledAt"], "String");
          if (data.hasOwnProperty("unicodeEnabled"))
            obj.unicodeEnabled = ApiClient.convertToType(data["unicodeEnabled"], "Boolean");
        }
        return obj;
      };
      exports2.prototype.name = void 0;
      exports2.prototype.sender = void 0;
      exports2.prototype.content = void 0;
      exports2.prototype.recipients = void 0;
      exports2.prototype.scheduledAt = void 0;
      exports2.prototype.unicodeEnabled = false;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/CreateSmtpEmail.js
var require_CreateSmtpEmail = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/CreateSmtpEmail.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.CreateSmtpEmail = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("messageId"))
            obj.messageId = ApiClient.convertToType(data["messageId"], "String");
          if (data.hasOwnProperty("messageIds"))
            obj.messageIds = ApiClient.convertToType(data["messageIds"], ["String"]);
        }
        return obj;
      };
      exports2.prototype.messageId = void 0;
      exports2.prototype.messageIds = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/CreateSmtpTemplateSender.js
var require_CreateSmtpTemplateSender = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/CreateSmtpTemplateSender.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.CreateSmtpTemplateSender = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
          if (data.hasOwnProperty("email"))
            obj.email = ApiClient.convertToType(data["email"], "String");
          if (data.hasOwnProperty("id"))
            obj.id = ApiClient.convertToType(data["id"], "Number");
        }
        return obj;
      };
      exports2.prototype.name = void 0;
      exports2.prototype.email = void 0;
      exports2.prototype.id = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/CreateSmtpTemplate.js
var require_CreateSmtpTemplate = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/CreateSmtpTemplate.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/CreateSmtpTemplateSender"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_CreateSmtpTemplateSender());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.CreateSmtpTemplate = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.CreateSmtpTemplateSender);
      }
    })(exports, function(ApiClient, CreateSmtpTemplateSender) {
      "use strict";
      var exports2 = function(sender, templateName, subject) {
        this.sender = sender;
        this.templateName = templateName;
        this.subject = subject;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("tag"))
            obj.tag = ApiClient.convertToType(data["tag"], "String");
          if (data.hasOwnProperty("sender"))
            obj.sender = CreateSmtpTemplateSender.constructFromObject(data["sender"]);
          if (data.hasOwnProperty("templateName"))
            obj.templateName = ApiClient.convertToType(data["templateName"], "String");
          if (data.hasOwnProperty("htmlContent"))
            obj.htmlContent = ApiClient.convertToType(data["htmlContent"], "String");
          if (data.hasOwnProperty("htmlUrl"))
            obj.htmlUrl = ApiClient.convertToType(data["htmlUrl"], "String");
          if (data.hasOwnProperty("subject"))
            obj.subject = ApiClient.convertToType(data["subject"], "String");
          if (data.hasOwnProperty("replyTo"))
            obj.replyTo = ApiClient.convertToType(data["replyTo"], "String");
          if (data.hasOwnProperty("toField"))
            obj.toField = ApiClient.convertToType(data["toField"], "String");
          if (data.hasOwnProperty("attachmentUrl"))
            obj.attachmentUrl = ApiClient.convertToType(data["attachmentUrl"], "String");
          if (data.hasOwnProperty("isActive"))
            obj.isActive = ApiClient.convertToType(data["isActive"], "Boolean");
        }
        return obj;
      };
      exports2.prototype.tag = void 0;
      exports2.prototype.sender = void 0;
      exports2.prototype.templateName = void 0;
      exports2.prototype.htmlContent = void 0;
      exports2.prototype.htmlUrl = void 0;
      exports2.prototype.subject = void 0;
      exports2.prototype.replyTo = void 0;
      exports2.prototype.toField = void 0;
      exports2.prototype.attachmentUrl = void 0;
      exports2.prototype.isActive = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/CreateSubAccount.js
var require_CreateSubAccount = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/CreateSubAccount.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.CreateSubAccount = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(companyName, email) {
        this.companyName = companyName;
        this.email = email;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("companyName"))
            obj.companyName = ApiClient.convertToType(data["companyName"], "String");
          if (data.hasOwnProperty("email"))
            obj.email = ApiClient.convertToType(data["email"], "String");
          if (data.hasOwnProperty("language"))
            obj.language = ApiClient.convertToType(data["language"], "String");
          if (data.hasOwnProperty("timezone"))
            obj.timezone = ApiClient.convertToType(data["timezone"], "String");
        }
        return obj;
      };
      exports2.prototype.companyName = void 0;
      exports2.prototype.email = void 0;
      exports2.prototype.language = void 0;
      exports2.prototype.timezone = void 0;
      exports2.LanguageEnum = {
        en: "en",
        fr: "fr",
        it: "it",
        es: "es",
        pt: "pt",
        de: "de"
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/CreateSubAccountResponse.js
var require_CreateSubAccountResponse = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/CreateSubAccountResponse.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.CreateSubAccountResponse = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(id) {
        this.id = id;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("id"))
            obj.id = ApiClient.convertToType(data["id"], "Number");
        }
        return obj;
      };
      exports2.prototype.id = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/CreateUpdateContactModel.js
var require_CreateUpdateContactModel = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/CreateUpdateContactModel.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.CreateUpdateContactModel = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("id"))
            obj.id = ApiClient.convertToType(data["id"], "Number");
        }
        return obj;
      };
      exports2.prototype.id = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/CreateUpdateFolder.js
var require_CreateUpdateFolder = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/CreateUpdateFolder.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.CreateUpdateFolder = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
        }
        return obj;
      };
      exports2.prototype.name = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/CreateWebhook.js
var require_CreateWebhook = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/CreateWebhook.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.CreateWebhook = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(url, events) {
        this.url = url;
        this.events = events;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("url"))
            obj.url = ApiClient.convertToType(data["url"], "String");
          if (data.hasOwnProperty("description"))
            obj.description = ApiClient.convertToType(data["description"], "String");
          if (data.hasOwnProperty("events"))
            obj.events = ApiClient.convertToType(data["events"], ["String"]);
          if (data.hasOwnProperty("type"))
            obj.type = ApiClient.convertToType(data["type"], "String");
          if (data.hasOwnProperty("domain"))
            obj.domain = ApiClient.convertToType(data["domain"], "String");
        }
        return obj;
      };
      exports2.prototype.url = void 0;
      exports2.prototype.description = void 0;
      exports2.prototype.events = void 0;
      exports2.prototype.type = "transactional";
      exports2.prototype.domain = void 0;
      exports2.EventsEnum = {
        sent: "sent",
        hardBounce: "hardBounce",
        softBounce: "softBounce",
        blocked: "blocked",
        spam: "spam",
        delivered: "delivered",
        request: "request",
        click: "click",
        invalid: "invalid",
        deferred: "deferred",
        opened: "opened",
        uniqueOpened: "uniqueOpened",
        unsubscribed: "unsubscribed",
        listAddition: "listAddition",
        contactUpdated: "contactUpdated",
        contactDeleted: "contactDeleted",
        inboundEmailProcessed: "inboundEmailProcessed"
      };
      exports2.TypeEnum = {
        transactional: "transactional",
        marketing: "marketing",
        inbound: "inbound"
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/CreatedProcessId.js
var require_CreatedProcessId = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/CreatedProcessId.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.CreatedProcessId = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(processId) {
        this.processId = processId;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("processId"))
            obj.processId = ApiClient.convertToType(data["processId"], "Number");
        }
        return obj;
      };
      exports2.prototype.processId = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/Deal.js
var require_Deal = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/Deal.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.Deal = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("id"))
            obj.id = ApiClient.convertToType(data["id"], "String");
          if (data.hasOwnProperty("attributes"))
            obj.attributes = ApiClient.convertToType(data["attributes"], Object);
          if (data.hasOwnProperty("linkedContactsIds"))
            obj.linkedContactsIds = ApiClient.convertToType(data["linkedContactsIds"], ["Number"]);
          if (data.hasOwnProperty("linkedCompaniesIds"))
            obj.linkedCompaniesIds = ApiClient.convertToType(data["linkedCompaniesIds"], ["String"]);
        }
        return obj;
      };
      exports2.prototype.id = void 0;
      exports2.prototype.attributes = void 0;
      exports2.prototype.linkedContactsIds = void 0;
      exports2.prototype.linkedCompaniesIds = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/DealAttributesInner.js
var require_DealAttributesInner = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/DealAttributesInner.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.DealAttributesInner = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("internalName"))
            obj.internalName = ApiClient.convertToType(data["internalName"], "String");
          if (data.hasOwnProperty("label"))
            obj.label = ApiClient.convertToType(data["label"], "String");
          if (data.hasOwnProperty("attributeTypeName"))
            obj.attributeTypeName = ApiClient.convertToType(data["attributeTypeName"], "String");
          if (data.hasOwnProperty("attributeOptions"))
            obj.attributeOptions = ApiClient.convertToType(data["attributeOptions"], [Object]);
          if (data.hasOwnProperty("isRequired"))
            obj.isRequired = ApiClient.convertToType(data["isRequired"], "Boolean");
        }
        return obj;
      };
      exports2.prototype.internalName = void 0;
      exports2.prototype.label = void 0;
      exports2.prototype.attributeTypeName = void 0;
      exports2.prototype.attributeOptions = void 0;
      exports2.prototype.isRequired = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/DealAttributes.js
var require_DealAttributes = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/DealAttributes.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/DealAttributesInner"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_DealAttributesInner());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.DealAttributes = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.DealAttributesInner);
      }
    })(exports, function(ApiClient, DealAttributesInner) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          ApiClient.constructFromObject(data, obj, "DealAttributesInner");
        }
        return obj;
      };
      Object.setPrototypeOf(exports2.prototype, new Array());
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/DealsList.js
var require_DealsList = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/DealsList.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/Deal"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_Deal());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.DealsList = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.Deal);
      }
    })(exports, function(ApiClient, Deal) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("items"))
            obj.items = ApiClient.convertToType(data["items"], [Deal]);
        }
        return obj;
      };
      exports2.prototype.items = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/DeleteHardbounces.js
var require_DeleteHardbounces = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/DeleteHardbounces.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.DeleteHardbounces = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("startDate"))
            obj.startDate = ApiClient.convertToType(data["startDate"], "String");
          if (data.hasOwnProperty("endDate"))
            obj.endDate = ApiClient.convertToType(data["endDate"], "String");
          if (data.hasOwnProperty("contactEmail"))
            obj.contactEmail = ApiClient.convertToType(data["contactEmail"], "String");
        }
        return obj;
      };
      exports2.prototype.startDate = void 0;
      exports2.prototype.endDate = void 0;
      exports2.prototype.contactEmail = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/EmailExportRecipients.js
var require_EmailExportRecipients = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/EmailExportRecipients.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.EmailExportRecipients = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(recipientsType) {
        this.recipientsType = recipientsType;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("notifyURL"))
            obj.notifyURL = ApiClient.convertToType(data["notifyURL"], "String");
          if (data.hasOwnProperty("recipientsType"))
            obj.recipientsType = ApiClient.convertToType(data["recipientsType"], "String");
        }
        return obj;
      };
      exports2.prototype.notifyURL = void 0;
      exports2.prototype.recipientsType = void 0;
      exports2.RecipientsTypeEnum = {
        all: "all",
        nonClickers: "nonClickers",
        nonOpeners: "nonOpeners",
        clickers: "clickers",
        openers: "openers",
        softBounces: "softBounces",
        hardBounces: "hardBounces",
        unsubscribed: "unsubscribed"
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/ErrorModel.js
var require_ErrorModel = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/ErrorModel.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.ErrorModel = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(code, message) {
        this.code = code;
        this.message = message;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("code"))
            obj.code = ApiClient.convertToType(data["code"], "String");
          if (data.hasOwnProperty("message"))
            obj.message = ApiClient.convertToType(data["message"], "String");
        }
        return obj;
      };
      exports2.prototype.code = void 0;
      exports2.prototype.message = void 0;
      exports2.CodeEnum = {
        invalidParameter: "invalid_parameter",
        missingParameter: "missing_parameter",
        outOfRange: "out_of_range",
        campaignProcessing: "campaign_processing",
        campaignSent: "campaign_sent",
        documentNotFound: "document_not_found",
        resellerPermissionDenied: "reseller_permission_denied",
        notEnoughCredits: "not_enough_credits",
        permissionDenied: "permission_denied",
        duplicateParameter: "duplicate_parameter",
        duplicateRequest: "duplicate_request",
        methodNotAllowed: "method_not_allowed",
        unauthorized: "unauthorized",
        accountUnderValidation: "account_under_validation",
        notAcceptable: "not_acceptable"
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetAccountMarketingAutomation.js
var require_GetAccountMarketingAutomation = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetAccountMarketingAutomation.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetAccountMarketingAutomation = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(enabled) {
        this.enabled = enabled;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("key"))
            obj.key = ApiClient.convertToType(data["key"], "String");
          if (data.hasOwnProperty("enabled"))
            obj.enabled = ApiClient.convertToType(data["enabled"], "Boolean");
        }
        return obj;
      };
      exports2.prototype.key = void 0;
      exports2.prototype.enabled = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetAccountPlan.js
var require_GetAccountPlan = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetAccountPlan.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetAccountPlan = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(type, creditsType, credits) {
        this.type = type;
        this.creditsType = creditsType;
        this.credits = credits;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("type"))
            obj.type = ApiClient.convertToType(data["type"], "String");
          if (data.hasOwnProperty("creditsType"))
            obj.creditsType = ApiClient.convertToType(data["creditsType"], "String");
          if (data.hasOwnProperty("credits"))
            obj.credits = ApiClient.convertToType(data["credits"], "Number");
          if (data.hasOwnProperty("startDate"))
            obj.startDate = ApiClient.convertToType(data["startDate"], "Date");
          if (data.hasOwnProperty("endDate"))
            obj.endDate = ApiClient.convertToType(data["endDate"], "Date");
          if (data.hasOwnProperty("userLimit"))
            obj.userLimit = ApiClient.convertToType(data["userLimit"], "Number");
        }
        return obj;
      };
      exports2.prototype.type = void 0;
      exports2.prototype.creditsType = void 0;
      exports2.prototype.credits = void 0;
      exports2.prototype.startDate = void 0;
      exports2.prototype.endDate = void 0;
      exports2.prototype.userLimit = void 0;
      exports2.TypeEnum = {
        payAsYouGo: "payAsYouGo",
        free: "free",
        subscription: "subscription",
        sms: "sms",
        reseller: "reseller"
      };
      exports2.CreditsTypeEnum = {
        sendLimit: "sendLimit"
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetAccountRelayData.js
var require_GetAccountRelayData = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetAccountRelayData.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetAccountRelayData = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(userName, relay, port) {
        this.userName = userName;
        this.relay = relay;
        this.port = port;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("userName"))
            obj.userName = ApiClient.convertToType(data["userName"], "String");
          if (data.hasOwnProperty("relay"))
            obj.relay = ApiClient.convertToType(data["relay"], "String");
          if (data.hasOwnProperty("port"))
            obj.port = ApiClient.convertToType(data["port"], "Number");
        }
        return obj;
      };
      exports2.prototype.userName = void 0;
      exports2.prototype.relay = void 0;
      exports2.prototype.port = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetAccountRelay.js
var require_GetAccountRelay = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetAccountRelay.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetAccountRelayData"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetAccountRelayData());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetAccountRelay = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetAccountRelayData);
      }
    })(exports, function(ApiClient, GetAccountRelayData) {
      "use strict";
      var exports2 = function(enabled, data) {
        this.enabled = enabled;
        this.data = data;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("enabled"))
            obj.enabled = ApiClient.convertToType(data["enabled"], "Boolean");
          if (data.hasOwnProperty("data"))
            obj.data = GetAccountRelayData.constructFromObject(data["data"]);
        }
        return obj;
      };
      exports2.prototype.enabled = void 0;
      exports2.prototype.data = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetClient.js
var require_GetClient = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetClient.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetClient = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(email, firstName, lastName, companyName) {
        this.email = email;
        this.firstName = firstName;
        this.lastName = lastName;
        this.companyName = companyName;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("email"))
            obj.email = ApiClient.convertToType(data["email"], "String");
          if (data.hasOwnProperty("firstName"))
            obj.firstName = ApiClient.convertToType(data["firstName"], "String");
          if (data.hasOwnProperty("lastName"))
            obj.lastName = ApiClient.convertToType(data["lastName"], "String");
          if (data.hasOwnProperty("companyName"))
            obj.companyName = ApiClient.convertToType(data["companyName"], "String");
        }
        return obj;
      };
      exports2.prototype.email = void 0;
      exports2.prototype.firstName = void 0;
      exports2.prototype.lastName = void 0;
      exports2.prototype.companyName = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetExtendedClientAddress.js
var require_GetExtendedClientAddress = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetExtendedClientAddress.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetExtendedClientAddress = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(street, city, zipCode, country) {
        this.street = street;
        this.city = city;
        this.zipCode = zipCode;
        this.country = country;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("street"))
            obj.street = ApiClient.convertToType(data["street"], "String");
          if (data.hasOwnProperty("city"))
            obj.city = ApiClient.convertToType(data["city"], "String");
          if (data.hasOwnProperty("zipCode"))
            obj.zipCode = ApiClient.convertToType(data["zipCode"], "String");
          if (data.hasOwnProperty("country"))
            obj.country = ApiClient.convertToType(data["country"], "String");
        }
        return obj;
      };
      exports2.prototype.street = void 0;
      exports2.prototype.city = void 0;
      exports2.prototype.zipCode = void 0;
      exports2.prototype.country = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetExtendedClient.js
var require_GetExtendedClient = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetExtendedClient.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetClient", "model/GetExtendedClientAddress"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetClient(), require_GetExtendedClientAddress());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetExtendedClient = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetClient, root.SibApiV3Sdk.GetExtendedClientAddress);
      }
    })(exports, function(ApiClient, GetClient, GetExtendedClientAddress) {
      "use strict";
      var exports2 = function(email, firstName, lastName, companyName, address) {
        GetClient.call(this, email, firstName, lastName, companyName);
        this.address = address;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          GetClient.constructFromObject(data, obj);
          if (data.hasOwnProperty("address"))
            obj.address = GetExtendedClientAddress.constructFromObject(data["address"]);
        }
        return obj;
      };
      exports2.prototype = Object.create(GetClient.prototype);
      exports2.prototype.constructor = exports2;
      exports2.prototype.address = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetAccount.js
var require_GetAccount = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetAccount.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetAccountMarketingAutomation", "model/GetAccountPlan", "model/GetAccountRelay", "model/GetExtendedClient", "model/GetExtendedClientAddress"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetAccountMarketingAutomation(), require_GetAccountPlan(), require_GetAccountRelay(), require_GetExtendedClient(), require_GetExtendedClientAddress());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetAccount = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetAccountMarketingAutomation, root.SibApiV3Sdk.GetAccountPlan, root.SibApiV3Sdk.GetAccountRelay, root.SibApiV3Sdk.GetExtendedClient, root.SibApiV3Sdk.GetExtendedClientAddress);
      }
    })(exports, function(ApiClient, GetAccountMarketingAutomation, GetAccountPlan, GetAccountRelay, GetExtendedClient, GetExtendedClientAddress) {
      "use strict";
      var exports2 = function(email, firstName, lastName, companyName, address, plan, relay) {
        GetExtendedClient.call(this, email, firstName, lastName, companyName, address);
        this.plan = plan;
        this.relay = relay;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          GetExtendedClient.constructFromObject(data, obj);
          if (data.hasOwnProperty("plan"))
            obj.plan = ApiClient.convertToType(data["plan"], [GetAccountPlan]);
          if (data.hasOwnProperty("relay"))
            obj.relay = GetAccountRelay.constructFromObject(data["relay"]);
          if (data.hasOwnProperty("marketingAutomation"))
            obj.marketingAutomation = GetAccountMarketingAutomation.constructFromObject(data["marketingAutomation"]);
        }
        return obj;
      };
      exports2.prototype = Object.create(GetExtendedClient.prototype);
      exports2.prototype.constructor = exports2;
      exports2.prototype.plan = void 0;
      exports2.prototype.relay = void 0;
      exports2.prototype.marketingAutomation = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetAggregatedReport.js
var require_GetAggregatedReport = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetAggregatedReport.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetAggregatedReport = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("range"))
            obj.range = ApiClient.convertToType(data["range"], "String");
          if (data.hasOwnProperty("requests"))
            obj.requests = ApiClient.convertToType(data["requests"], "Number");
          if (data.hasOwnProperty("delivered"))
            obj.delivered = ApiClient.convertToType(data["delivered"], "Number");
          if (data.hasOwnProperty("hardBounces"))
            obj.hardBounces = ApiClient.convertToType(data["hardBounces"], "Number");
          if (data.hasOwnProperty("softBounces"))
            obj.softBounces = ApiClient.convertToType(data["softBounces"], "Number");
          if (data.hasOwnProperty("clicks"))
            obj.clicks = ApiClient.convertToType(data["clicks"], "Number");
          if (data.hasOwnProperty("uniqueClicks"))
            obj.uniqueClicks = ApiClient.convertToType(data["uniqueClicks"], "Number");
          if (data.hasOwnProperty("opens"))
            obj.opens = ApiClient.convertToType(data["opens"], "Number");
          if (data.hasOwnProperty("uniqueOpens"))
            obj.uniqueOpens = ApiClient.convertToType(data["uniqueOpens"], "Number");
          if (data.hasOwnProperty("spamReports"))
            obj.spamReports = ApiClient.convertToType(data["spamReports"], "Number");
          if (data.hasOwnProperty("blocked"))
            obj.blocked = ApiClient.convertToType(data["blocked"], "Number");
          if (data.hasOwnProperty("invalid"))
            obj.invalid = ApiClient.convertToType(data["invalid"], "Number");
          if (data.hasOwnProperty("unsubscribed"))
            obj.unsubscribed = ApiClient.convertToType(data["unsubscribed"], "Number");
        }
        return obj;
      };
      exports2.prototype.range = void 0;
      exports2.prototype.requests = void 0;
      exports2.prototype.delivered = void 0;
      exports2.prototype.hardBounces = void 0;
      exports2.prototype.softBounces = void 0;
      exports2.prototype.clicks = void 0;
      exports2.prototype.uniqueClicks = void 0;
      exports2.prototype.opens = void 0;
      exports2.prototype.uniqueOpens = void 0;
      exports2.prototype.spamReports = void 0;
      exports2.prototype.blocked = void 0;
      exports2.prototype.invalid = void 0;
      exports2.prototype.unsubscribed = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetAttributesEnumeration.js
var require_GetAttributesEnumeration = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetAttributesEnumeration.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetAttributesEnumeration = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(value, label) {
        this.value = value;
        this.label = label;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("value"))
            obj.value = ApiClient.convertToType(data["value"], "Number");
          if (data.hasOwnProperty("label"))
            obj.label = ApiClient.convertToType(data["label"], "String");
        }
        return obj;
      };
      exports2.prototype.value = void 0;
      exports2.prototype.label = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetAttributesAttributes.js
var require_GetAttributesAttributes = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetAttributesAttributes.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetAttributesEnumeration"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetAttributesEnumeration());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetAttributesAttributes = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetAttributesEnumeration);
      }
    })(exports, function(ApiClient, GetAttributesEnumeration) {
      "use strict";
      var exports2 = function(name, category) {
        this.name = name;
        this.category = category;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
          if (data.hasOwnProperty("category"))
            obj.category = ApiClient.convertToType(data["category"], "String");
          if (data.hasOwnProperty("type"))
            obj.type = ApiClient.convertToType(data["type"], "String");
          if (data.hasOwnProperty("enumeration"))
            obj.enumeration = ApiClient.convertToType(data["enumeration"], [GetAttributesEnumeration]);
          if (data.hasOwnProperty("calculatedValue"))
            obj.calculatedValue = ApiClient.convertToType(data["calculatedValue"], "String");
        }
        return obj;
      };
      exports2.prototype.name = void 0;
      exports2.prototype.category = void 0;
      exports2.prototype.type = void 0;
      exports2.prototype.enumeration = void 0;
      exports2.prototype.calculatedValue = void 0;
      exports2.CategoryEnum = {
        normal: "normal",
        transactional: "transactional",
        category: "category",
        calculated: "calculated",
        global: "global"
      };
      exports2.TypeEnum = {
        text: "text",
        _date: "date",
        _float: "float",
        id: "id",
        _boolean: "boolean"
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetAttributes.js
var require_GetAttributes = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetAttributes.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetAttributesAttributes"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetAttributesAttributes());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetAttributes = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetAttributesAttributes);
      }
    })(exports, function(ApiClient, GetAttributesAttributes) {
      "use strict";
      var exports2 = function(attributes) {
        this.attributes = attributes;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("attributes"))
            obj.attributes = ApiClient.convertToType(data["attributes"], [GetAttributesAttributes]);
        }
        return obj;
      };
      exports2.prototype.attributes = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetBlockedDomains.js
var require_GetBlockedDomains = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetBlockedDomains.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetBlockedDomains = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(domains) {
        this.domains = domains;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("domains"))
            obj.domains = ApiClient.convertToType(data["domains"], ["String"]);
        }
        return obj;
      };
      exports2.prototype.domains = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetCampaignOverview.js
var require_GetCampaignOverview = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetCampaignOverview.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetCampaignOverview = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(id, name, type, status) {
        this.id = id;
        this.name = name;
        this.type = type;
        this.status = status;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("id"))
            obj.id = ApiClient.convertToType(data["id"], "Number");
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
          if (data.hasOwnProperty("subject"))
            obj.subject = ApiClient.convertToType(data["subject"], "String");
          if (data.hasOwnProperty("type"))
            obj.type = ApiClient.convertToType(data["type"], "String");
          if (data.hasOwnProperty("status"))
            obj.status = ApiClient.convertToType(data["status"], "String");
          if (data.hasOwnProperty("scheduledAt"))
            obj.scheduledAt = ApiClient.convertToType(data["scheduledAt"], "String");
          if (data.hasOwnProperty("abTesting"))
            obj.abTesting = ApiClient.convertToType(data["abTesting"], "Boolean");
          if (data.hasOwnProperty("subjectA"))
            obj.subjectA = ApiClient.convertToType(data["subjectA"], "String");
          if (data.hasOwnProperty("subjectB"))
            obj.subjectB = ApiClient.convertToType(data["subjectB"], "String");
          if (data.hasOwnProperty("splitRule"))
            obj.splitRule = ApiClient.convertToType(data["splitRule"], "Number");
          if (data.hasOwnProperty("winnerCriteria"))
            obj.winnerCriteria = ApiClient.convertToType(data["winnerCriteria"], "String");
          if (data.hasOwnProperty("winnerDelay"))
            obj.winnerDelay = ApiClient.convertToType(data["winnerDelay"], "Number");
          if (data.hasOwnProperty("sendAtBestTime"))
            obj.sendAtBestTime = ApiClient.convertToType(data["sendAtBestTime"], "Boolean");
        }
        return obj;
      };
      exports2.prototype.id = void 0;
      exports2.prototype.name = void 0;
      exports2.prototype.subject = void 0;
      exports2.prototype.type = void 0;
      exports2.prototype.status = void 0;
      exports2.prototype.scheduledAt = void 0;
      exports2.prototype.abTesting = void 0;
      exports2.prototype.subjectA = void 0;
      exports2.prototype.subjectB = void 0;
      exports2.prototype.splitRule = void 0;
      exports2.prototype.winnerCriteria = void 0;
      exports2.prototype.winnerDelay = void 0;
      exports2.prototype.sendAtBestTime = void 0;
      exports2.TypeEnum = {
        classic: "classic",
        trigger: "trigger"
      };
      exports2.StatusEnum = {
        draft: "draft",
        sent: "sent",
        archive: "archive",
        queued: "queued",
        suspended: "suspended",
        inProcess: "in_process"
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetCampaignRecipients.js
var require_GetCampaignRecipients = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetCampaignRecipients.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetCampaignRecipients = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(lists, exclusionLists) {
        this.lists = lists;
        this.exclusionLists = exclusionLists;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("lists"))
            obj.lists = ApiClient.convertToType(data["lists"], ["Number"]);
          if (data.hasOwnProperty("exclusionLists"))
            obj.exclusionLists = ApiClient.convertToType(data["exclusionLists"], ["Number"]);
        }
        return obj;
      };
      exports2.prototype.lists = void 0;
      exports2.prototype.exclusionLists = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetCampaignStats.js
var require_GetCampaignStats = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetCampaignStats.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetCampaignStats = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(uniqueClicks, clickers, complaints, delivered, sent, softBounces, hardBounces, uniqueViews, trackableViews, unsubscriptions, viewed) {
        this.uniqueClicks = uniqueClicks;
        this.clickers = clickers;
        this.complaints = complaints;
        this.delivered = delivered;
        this.sent = sent;
        this.softBounces = softBounces;
        this.hardBounces = hardBounces;
        this.uniqueViews = uniqueViews;
        this.trackableViews = trackableViews;
        this.unsubscriptions = unsubscriptions;
        this.viewed = viewed;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("listId"))
            obj.listId = ApiClient.convertToType(data["listId"], "Number");
          if (data.hasOwnProperty("uniqueClicks"))
            obj.uniqueClicks = ApiClient.convertToType(data["uniqueClicks"], "Number");
          if (data.hasOwnProperty("clickers"))
            obj.clickers = ApiClient.convertToType(data["clickers"], "Number");
          if (data.hasOwnProperty("complaints"))
            obj.complaints = ApiClient.convertToType(data["complaints"], "Number");
          if (data.hasOwnProperty("delivered"))
            obj.delivered = ApiClient.convertToType(data["delivered"], "Number");
          if (data.hasOwnProperty("sent"))
            obj.sent = ApiClient.convertToType(data["sent"], "Number");
          if (data.hasOwnProperty("softBounces"))
            obj.softBounces = ApiClient.convertToType(data["softBounces"], "Number");
          if (data.hasOwnProperty("hardBounces"))
            obj.hardBounces = ApiClient.convertToType(data["hardBounces"], "Number");
          if (data.hasOwnProperty("uniqueViews"))
            obj.uniqueViews = ApiClient.convertToType(data["uniqueViews"], "Number");
          if (data.hasOwnProperty("trackableViews"))
            obj.trackableViews = ApiClient.convertToType(data["trackableViews"], "Number");
          if (data.hasOwnProperty("trackableViewsRate"))
            obj.trackableViewsRate = ApiClient.convertToType(data["trackableViewsRate"], "Number");
          if (data.hasOwnProperty("estimatedViews"))
            obj.estimatedViews = ApiClient.convertToType(data["estimatedViews"], "Number");
          if (data.hasOwnProperty("unsubscriptions"))
            obj.unsubscriptions = ApiClient.convertToType(data["unsubscriptions"], "Number");
          if (data.hasOwnProperty("viewed"))
            obj.viewed = ApiClient.convertToType(data["viewed"], "Number");
          if (data.hasOwnProperty("deferred"))
            obj.deferred = ApiClient.convertToType(data["deferred"], "Number");
          if (data.hasOwnProperty("returnBounce"))
            obj.returnBounce = ApiClient.convertToType(data["returnBounce"], "Number");
        }
        return obj;
      };
      exports2.prototype.listId = void 0;
      exports2.prototype.uniqueClicks = void 0;
      exports2.prototype.clickers = void 0;
      exports2.prototype.complaints = void 0;
      exports2.prototype.delivered = void 0;
      exports2.prototype.sent = void 0;
      exports2.prototype.softBounces = void 0;
      exports2.prototype.hardBounces = void 0;
      exports2.prototype.uniqueViews = void 0;
      exports2.prototype.trackableViews = void 0;
      exports2.prototype.trackableViewsRate = void 0;
      exports2.prototype.estimatedViews = void 0;
      exports2.prototype.unsubscriptions = void 0;
      exports2.prototype.viewed = void 0;
      exports2.prototype.deferred = void 0;
      exports2.prototype.returnBounce = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetChildAccountCreationStatus.js
var require_GetChildAccountCreationStatus = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetChildAccountCreationStatus.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetChildAccountCreationStatus = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(childAccountCreated) {
        this.childAccountCreated = childAccountCreated;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("childAccountCreated"))
            obj.childAccountCreated = ApiClient.convertToType(data["childAccountCreated"], "Boolean");
        }
        return obj;
      };
      exports2.prototype.childAccountCreated = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetChildDomain.js
var require_GetChildDomain = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetChildDomain.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetChildDomain = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("domain"))
            obj.domain = ApiClient.convertToType(data["domain"], "String");
          if (data.hasOwnProperty("active"))
            obj.active = ApiClient.convertToType(data["active"], "Boolean");
        }
        return obj;
      };
      exports2.prototype.domain = void 0;
      exports2.prototype.active = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetChildDomains.js
var require_GetChildDomains = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetChildDomains.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetChildDomains = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          ApiClient.constructFromObject(data, obj, "Object");
        }
        return obj;
      };
      Object.setPrototypeOf(exports2.prototype, new Array());
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetChildInfoApiKeysV2.js
var require_GetChildInfoApiKeysV2 = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetChildInfoApiKeysV2.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetChildInfoApiKeysV2 = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(name, key) {
        this.name = name;
        this.key = key;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
          if (data.hasOwnProperty("key"))
            obj.key = ApiClient.convertToType(data["key"], "String");
        }
        return obj;
      };
      exports2.prototype.name = void 0;
      exports2.prototype.key = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetChildInfoApiKeysV3.js
var require_GetChildInfoApiKeysV3 = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetChildInfoApiKeysV3.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetChildInfoApiKeysV3 = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(name, key) {
        this.name = name;
        this.key = key;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
          if (data.hasOwnProperty("key"))
            obj.key = ApiClient.convertToType(data["key"], "String");
        }
        return obj;
      };
      exports2.prototype.name = void 0;
      exports2.prototype.key = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetChildInfoApiKeys.js
var require_GetChildInfoApiKeys = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetChildInfoApiKeys.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetChildInfoApiKeysV2", "model/GetChildInfoApiKeysV3"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetChildInfoApiKeysV2(), require_GetChildInfoApiKeysV3());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetChildInfoApiKeys = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetChildInfoApiKeysV2, root.SibApiV3Sdk.GetChildInfoApiKeysV3);
      }
    })(exports, function(ApiClient, GetChildInfoApiKeysV2, GetChildInfoApiKeysV3) {
      "use strict";
      var exports2 = function(v2) {
        this.v2 = v2;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("v2"))
            obj.v2 = ApiClient.convertToType(data["v2"], [GetChildInfoApiKeysV2]);
          if (data.hasOwnProperty("v3"))
            obj.v3 = ApiClient.convertToType(data["v3"], [GetChildInfoApiKeysV3]);
        }
        return obj;
      };
      exports2.prototype.v2 = void 0;
      exports2.prototype.v3 = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetChildInfoCredits.js
var require_GetChildInfoCredits = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetChildInfoCredits.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetChildInfoCredits = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("emailCredits"))
            obj.emailCredits = ApiClient.convertToType(data["emailCredits"], "Number");
          if (data.hasOwnProperty("smsCredits"))
            obj.smsCredits = ApiClient.convertToType(data["smsCredits"], "Number");
        }
        return obj;
      };
      exports2.prototype.emailCredits = void 0;
      exports2.prototype.smsCredits = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetChildInfoStatistics.js
var require_GetChildInfoStatistics = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetChildInfoStatistics.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetChildInfoStatistics = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("previousMonthTotalSent"))
            obj.previousMonthTotalSent = ApiClient.convertToType(data["previousMonthTotalSent"], "Number");
          if (data.hasOwnProperty("currentMonthTotalSent"))
            obj.currentMonthTotalSent = ApiClient.convertToType(data["currentMonthTotalSent"], "Number");
          if (data.hasOwnProperty("totalSent"))
            obj.totalSent = ApiClient.convertToType(data["totalSent"], "Number");
        }
        return obj;
      };
      exports2.prototype.previousMonthTotalSent = void 0;
      exports2.prototype.currentMonthTotalSent = void 0;
      exports2.prototype.totalSent = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetChildInfo.js
var require_GetChildInfo = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetChildInfo.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetChildInfoApiKeys", "model/GetChildInfoCredits", "model/GetChildInfoStatistics", "model/GetClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetChildInfoApiKeys(), require_GetChildInfoCredits(), require_GetChildInfoStatistics(), require_GetClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetChildInfo = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetChildInfoApiKeys, root.SibApiV3Sdk.GetChildInfoCredits, root.SibApiV3Sdk.GetChildInfoStatistics, root.SibApiV3Sdk.GetClient);
      }
    })(exports, function(ApiClient, GetChildInfoApiKeys, GetChildInfoCredits, GetChildInfoStatistics, GetClient) {
      "use strict";
      var exports2 = function(email, firstName, lastName, companyName, password) {
        GetClient.call(this, email, firstName, lastName, companyName);
        this.password = password;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          GetClient.constructFromObject(data, obj);
          if (data.hasOwnProperty("credits"))
            obj.credits = GetChildInfoCredits.constructFromObject(data["credits"]);
          if (data.hasOwnProperty("statistics"))
            obj.statistics = GetChildInfoStatistics.constructFromObject(data["statistics"]);
          if (data.hasOwnProperty("password"))
            obj.password = ApiClient.convertToType(data["password"], "String");
          if (data.hasOwnProperty("ips"))
            obj.ips = ApiClient.convertToType(data["ips"], ["String"]);
          if (data.hasOwnProperty("apiKeys"))
            obj.apiKeys = GetChildInfoApiKeys.constructFromObject(data["apiKeys"]);
        }
        return obj;
      };
      exports2.prototype = Object.create(GetClient.prototype);
      exports2.prototype.constructor = exports2;
      exports2.prototype.credits = void 0;
      exports2.prototype.statistics = void 0;
      exports2.prototype.password = void 0;
      exports2.prototype.ips = void 0;
      exports2.prototype.apiKeys = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetChildrenList.js
var require_GetChildrenList = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetChildrenList.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetChildrenList = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("children"))
            obj.children = ApiClient.convertToType(data["children"], [Object]);
          if (data.hasOwnProperty("count"))
            obj.count = ApiClient.convertToType(data["count"], "Number");
        }
        return obj;
      };
      exports2.prototype.children = void 0;
      exports2.prototype.count = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetExtendedContactDetailsStatisticsLinks.js
var require_GetExtendedContactDetailsStatisticsLinks = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetExtendedContactDetailsStatisticsLinks.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetExtendedContactDetailsStatisticsLinks = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(count, eventTime, ip, url) {
        this.count = count;
        this.eventTime = eventTime;
        this.ip = ip;
        this.url = url;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("count"))
            obj.count = ApiClient.convertToType(data["count"], "Number");
          if (data.hasOwnProperty("eventTime"))
            obj.eventTime = ApiClient.convertToType(data["eventTime"], "String");
          if (data.hasOwnProperty("ip"))
            obj.ip = ApiClient.convertToType(data["ip"], "String");
          if (data.hasOwnProperty("url"))
            obj.url = ApiClient.convertToType(data["url"], "String");
        }
        return obj;
      };
      exports2.prototype.count = void 0;
      exports2.prototype.eventTime = void 0;
      exports2.prototype.ip = void 0;
      exports2.prototype.url = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetContactCampaignStatsClicked.js
var require_GetContactCampaignStatsClicked = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetContactCampaignStatsClicked.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetExtendedContactDetailsStatisticsLinks"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetExtendedContactDetailsStatisticsLinks());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetContactCampaignStatsClicked = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetExtendedContactDetailsStatisticsLinks);
      }
    })(exports, function(ApiClient, GetExtendedContactDetailsStatisticsLinks) {
      "use strict";
      var exports2 = function(campaignId, links) {
        this.campaignId = campaignId;
        this.links = links;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("campaignId"))
            obj.campaignId = ApiClient.convertToType(data["campaignId"], "Number");
          if (data.hasOwnProperty("links"))
            obj.links = ApiClient.convertToType(data["links"], [GetExtendedContactDetailsStatisticsLinks]);
        }
        return obj;
      };
      exports2.prototype.campaignId = void 0;
      exports2.prototype.links = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetContactCampaignStatsOpened.js
var require_GetContactCampaignStatsOpened = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetContactCampaignStatsOpened.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetContactCampaignStatsOpened = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(campaignId, count, eventTime, ip) {
        this.campaignId = campaignId;
        this.count = count;
        this.eventTime = eventTime;
        this.ip = ip;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("campaignId"))
            obj.campaignId = ApiClient.convertToType(data["campaignId"], "Number");
          if (data.hasOwnProperty("count"))
            obj.count = ApiClient.convertToType(data["count"], "Number");
          if (data.hasOwnProperty("eventTime"))
            obj.eventTime = ApiClient.convertToType(data["eventTime"], "String");
          if (data.hasOwnProperty("ip"))
            obj.ip = ApiClient.convertToType(data["ip"], "String");
        }
        return obj;
      };
      exports2.prototype.campaignId = void 0;
      exports2.prototype.count = void 0;
      exports2.prototype.eventTime = void 0;
      exports2.prototype.ip = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetContactCampaignStatsTransacAttributes.js
var require_GetContactCampaignStatsTransacAttributes = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetContactCampaignStatsTransacAttributes.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetContactCampaignStatsTransacAttributes = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(orderDate, orderPrice, orderId) {
        this.orderDate = orderDate;
        this.orderPrice = orderPrice;
        this.orderId = orderId;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("orderDate"))
            obj.orderDate = ApiClient.convertToType(data["orderDate"], "Date");
          if (data.hasOwnProperty("orderPrice"))
            obj.orderPrice = ApiClient.convertToType(data["orderPrice"], "Number");
          if (data.hasOwnProperty("orderId"))
            obj.orderId = ApiClient.convertToType(data["orderId"], "Number");
        }
        return obj;
      };
      exports2.prototype.orderDate = void 0;
      exports2.prototype.orderPrice = void 0;
      exports2.prototype.orderId = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription.js
var require_GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(eventTime) {
        this.eventTime = eventTime;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("eventTime"))
            obj.eventTime = ApiClient.convertToType(data["eventTime"], "String");
          if (data.hasOwnProperty("ip"))
            obj.ip = ApiClient.convertToType(data["ip"], "String");
        }
        return obj;
      };
      exports2.prototype.eventTime = void 0;
      exports2.prototype.ip = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription.js
var require_GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(campaignId, eventTime) {
        this.campaignId = campaignId;
        this.eventTime = eventTime;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("campaignId"))
            obj.campaignId = ApiClient.convertToType(data["campaignId"], "Number");
          if (data.hasOwnProperty("eventTime"))
            obj.eventTime = ApiClient.convertToType(data["eventTime"], "String");
          if (data.hasOwnProperty("ip"))
            obj.ip = ApiClient.convertToType(data["ip"], "String");
        }
        return obj;
      };
      exports2.prototype.campaignId = void 0;
      exports2.prototype.eventTime = void 0;
      exports2.prototype.ip = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetContactCampaignStatsUnsubscriptions.js
var require_GetContactCampaignStatsUnsubscriptions = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetContactCampaignStatsUnsubscriptions.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription", "model/GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription(), require_GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetContactCampaignStatsUnsubscriptions = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription, root.SibApiV3Sdk.GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription);
      }
    })(exports, function(ApiClient, GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription, GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription) {
      "use strict";
      var exports2 = function(userUnsubscription, adminUnsubscription) {
        this.userUnsubscription = userUnsubscription;
        this.adminUnsubscription = adminUnsubscription;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("userUnsubscription"))
            obj.userUnsubscription = ApiClient.convertToType(data["userUnsubscription"], [GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription]);
          if (data.hasOwnProperty("adminUnsubscription"))
            obj.adminUnsubscription = ApiClient.convertToType(data["adminUnsubscription"], [GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription]);
        }
        return obj;
      };
      exports2.prototype.userUnsubscription = void 0;
      exports2.prototype.adminUnsubscription = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetExtendedContactDetailsStatisticsMessagesSent.js
var require_GetExtendedContactDetailsStatisticsMessagesSent = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetExtendedContactDetailsStatisticsMessagesSent.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetExtendedContactDetailsStatisticsMessagesSent = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(campaignId, eventTime) {
        this.campaignId = campaignId;
        this.eventTime = eventTime;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("campaignId"))
            obj.campaignId = ApiClient.convertToType(data["campaignId"], "Number");
          if (data.hasOwnProperty("eventTime"))
            obj.eventTime = ApiClient.convertToType(data["eventTime"], "String");
        }
        return obj;
      };
      exports2.prototype.campaignId = void 0;
      exports2.prototype.eventTime = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetContactCampaignStats.js
var require_GetContactCampaignStats = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetContactCampaignStats.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetContactCampaignStatsClicked", "model/GetContactCampaignStatsOpened", "model/GetContactCampaignStatsTransacAttributes", "model/GetContactCampaignStatsUnsubscriptions", "model/GetExtendedContactDetailsStatisticsMessagesSent"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetContactCampaignStatsClicked(), require_GetContactCampaignStatsOpened(), require_GetContactCampaignStatsTransacAttributes(), require_GetContactCampaignStatsUnsubscriptions(), require_GetExtendedContactDetailsStatisticsMessagesSent());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetContactCampaignStats = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetContactCampaignStatsClicked, root.SibApiV3Sdk.GetContactCampaignStatsOpened, root.SibApiV3Sdk.GetContactCampaignStatsTransacAttributes, root.SibApiV3Sdk.GetContactCampaignStatsUnsubscriptions, root.SibApiV3Sdk.GetExtendedContactDetailsStatisticsMessagesSent);
      }
    })(exports, function(ApiClient, GetContactCampaignStatsClicked, GetContactCampaignStatsOpened, GetContactCampaignStatsTransacAttributes, GetContactCampaignStatsUnsubscriptions, GetExtendedContactDetailsStatisticsMessagesSent) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("messagesSent"))
            obj.messagesSent = ApiClient.convertToType(data["messagesSent"], [GetExtendedContactDetailsStatisticsMessagesSent]);
          if (data.hasOwnProperty("hardBounces"))
            obj.hardBounces = ApiClient.convertToType(data["hardBounces"], [GetExtendedContactDetailsStatisticsMessagesSent]);
          if (data.hasOwnProperty("softBounces"))
            obj.softBounces = ApiClient.convertToType(data["softBounces"], [GetExtendedContactDetailsStatisticsMessagesSent]);
          if (data.hasOwnProperty("complaints"))
            obj.complaints = ApiClient.convertToType(data["complaints"], [GetExtendedContactDetailsStatisticsMessagesSent]);
          if (data.hasOwnProperty("unsubscriptions"))
            obj.unsubscriptions = GetContactCampaignStatsUnsubscriptions.constructFromObject(data["unsubscriptions"]);
          if (data.hasOwnProperty("opened"))
            obj.opened = ApiClient.convertToType(data["opened"], [GetContactCampaignStatsOpened]);
          if (data.hasOwnProperty("clicked"))
            obj.clicked = ApiClient.convertToType(data["clicked"], [GetContactCampaignStatsClicked]);
          if (data.hasOwnProperty("transacAttributes"))
            obj.transacAttributes = ApiClient.convertToType(data["transacAttributes"], [GetContactCampaignStatsTransacAttributes]);
          if (data.hasOwnProperty("delivered"))
            obj.delivered = ApiClient.convertToType(data["delivered"], [GetExtendedContactDetailsStatisticsMessagesSent]);
        }
        return obj;
      };
      exports2.prototype.messagesSent = void 0;
      exports2.prototype.hardBounces = void 0;
      exports2.prototype.softBounces = void 0;
      exports2.prototype.complaints = void 0;
      exports2.prototype.unsubscriptions = void 0;
      exports2.prototype.opened = void 0;
      exports2.prototype.clicked = void 0;
      exports2.prototype.transacAttributes = void 0;
      exports2.prototype.delivered = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetContactDetails.js
var require_GetContactDetails = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetContactDetails.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetContactDetails = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(email, id, emailBlacklisted, smsBlacklisted, createdAt, modifiedAt, listIds, attributes) {
        this.email = email;
        this.id = id;
        this.emailBlacklisted = emailBlacklisted;
        this.smsBlacklisted = smsBlacklisted;
        this.createdAt = createdAt;
        this.modifiedAt = modifiedAt;
        this.listIds = listIds;
        this.attributes = attributes;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("email"))
            obj.email = ApiClient.convertToType(data["email"], "String");
          if (data.hasOwnProperty("id"))
            obj.id = ApiClient.convertToType(data["id"], "Number");
          if (data.hasOwnProperty("emailBlacklisted"))
            obj.emailBlacklisted = ApiClient.convertToType(data["emailBlacklisted"], "Boolean");
          if (data.hasOwnProperty("smsBlacklisted"))
            obj.smsBlacklisted = ApiClient.convertToType(data["smsBlacklisted"], "Boolean");
          if (data.hasOwnProperty("createdAt"))
            obj.createdAt = ApiClient.convertToType(data["createdAt"], "String");
          if (data.hasOwnProperty("modifiedAt"))
            obj.modifiedAt = ApiClient.convertToType(data["modifiedAt"], "String");
          if (data.hasOwnProperty("listIds"))
            obj.listIds = ApiClient.convertToType(data["listIds"], ["Number"]);
          if (data.hasOwnProperty("listUnsubscribed"))
            obj.listUnsubscribed = ApiClient.convertToType(data["listUnsubscribed"], ["Number"]);
          if (data.hasOwnProperty("attributes"))
            obj.attributes = ApiClient.convertToType(data["attributes"], Object);
        }
        return obj;
      };
      exports2.prototype.email = void 0;
      exports2.prototype.id = void 0;
      exports2.prototype.emailBlacklisted = void 0;
      exports2.prototype.smsBlacklisted = void 0;
      exports2.prototype.createdAt = void 0;
      exports2.prototype.modifiedAt = void 0;
      exports2.prototype.listIds = void 0;
      exports2.prototype.listUnsubscribed = void 0;
      exports2.prototype.attributes = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetContacts.js
var require_GetContacts = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetContacts.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetContacts = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(contacts, count) {
        this.contacts = contacts;
        this.count = count;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("contacts"))
            obj.contacts = ApiClient.convertToType(data["contacts"], [Object]);
          if (data.hasOwnProperty("count"))
            obj.count = ApiClient.convertToType(data["count"], "Number");
        }
        return obj;
      };
      exports2.prototype.contacts = void 0;
      exports2.prototype.count = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetDeviceBrowserStats.js
var require_GetDeviceBrowserStats = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetDeviceBrowserStats.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetDeviceBrowserStats = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(clickers, uniqueClicks, viewed, uniqueViews) {
        this.clickers = clickers;
        this.uniqueClicks = uniqueClicks;
        this.viewed = viewed;
        this.uniqueViews = uniqueViews;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("clickers"))
            obj.clickers = ApiClient.convertToType(data["clickers"], "Number");
          if (data.hasOwnProperty("uniqueClicks"))
            obj.uniqueClicks = ApiClient.convertToType(data["uniqueClicks"], "Number");
          if (data.hasOwnProperty("viewed"))
            obj.viewed = ApiClient.convertToType(data["viewed"], "Number");
          if (data.hasOwnProperty("uniqueViews"))
            obj.uniqueViews = ApiClient.convertToType(data["uniqueViews"], "Number");
        }
        return obj;
      };
      exports2.prototype.clickers = void 0;
      exports2.prototype.uniqueClicks = void 0;
      exports2.prototype.viewed = void 0;
      exports2.prototype.uniqueViews = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetExtendedCampaignOverviewSender.js
var require_GetExtendedCampaignOverviewSender = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetExtendedCampaignOverviewSender.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetExtendedCampaignOverviewSender = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
          if (data.hasOwnProperty("email"))
            obj.email = ApiClient.convertToType(data["email"], "String");
          if (data.hasOwnProperty("id"))
            obj.id = ApiClient.convertToType(data["id"], "String");
        }
        return obj;
      };
      exports2.prototype.name = void 0;
      exports2.prototype.email = void 0;
      exports2.prototype.id = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetExtendedCampaignOverview.js
var require_GetExtendedCampaignOverview = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetExtendedCampaignOverview.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetCampaignOverview", "model/GetExtendedCampaignOverviewSender"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetCampaignOverview(), require_GetExtendedCampaignOverviewSender());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetExtendedCampaignOverview = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetCampaignOverview, root.SibApiV3Sdk.GetExtendedCampaignOverviewSender);
      }
    })(exports, function(ApiClient, GetCampaignOverview, GetExtendedCampaignOverviewSender) {
      "use strict";
      var exports2 = function(id, name, type, status, testSent, header, footer, sender, replyTo, htmlContent, createdAt, modifiedAt) {
        GetCampaignOverview.call(this, id, name, type, status);
        this.testSent = testSent;
        this.header = header;
        this.footer = footer;
        this.sender = sender;
        this.replyTo = replyTo;
        this.htmlContent = htmlContent;
        this.createdAt = createdAt;
        this.modifiedAt = modifiedAt;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          GetCampaignOverview.constructFromObject(data, obj);
          if (data.hasOwnProperty("testSent"))
            obj.testSent = ApiClient.convertToType(data["testSent"], "Boolean");
          if (data.hasOwnProperty("header"))
            obj.header = ApiClient.convertToType(data["header"], "String");
          if (data.hasOwnProperty("footer"))
            obj.footer = ApiClient.convertToType(data["footer"], "String");
          if (data.hasOwnProperty("sender"))
            obj.sender = GetExtendedCampaignOverviewSender.constructFromObject(data["sender"]);
          if (data.hasOwnProperty("replyTo"))
            obj.replyTo = ApiClient.convertToType(data["replyTo"], "String");
          if (data.hasOwnProperty("toField"))
            obj.toField = ApiClient.convertToType(data["toField"], "String");
          if (data.hasOwnProperty("htmlContent"))
            obj.htmlContent = ApiClient.convertToType(data["htmlContent"], "String");
          if (data.hasOwnProperty("shareLink"))
            obj.shareLink = ApiClient.convertToType(data["shareLink"], "String");
          if (data.hasOwnProperty("tag"))
            obj.tag = ApiClient.convertToType(data["tag"], "String");
          if (data.hasOwnProperty("createdAt"))
            obj.createdAt = ApiClient.convertToType(data["createdAt"], "String");
          if (data.hasOwnProperty("modifiedAt"))
            obj.modifiedAt = ApiClient.convertToType(data["modifiedAt"], "String");
          if (data.hasOwnProperty("inlineImageActivation"))
            obj.inlineImageActivation = ApiClient.convertToType(data["inlineImageActivation"], "Boolean");
          if (data.hasOwnProperty("mirrorActive"))
            obj.mirrorActive = ApiClient.convertToType(data["mirrorActive"], "Boolean");
          if (data.hasOwnProperty("recurring"))
            obj.recurring = ApiClient.convertToType(data["recurring"], "Boolean");
          if (data.hasOwnProperty("sentDate"))
            obj.sentDate = ApiClient.convertToType(data["sentDate"], "String");
          if (data.hasOwnProperty("returnBounce"))
            obj.returnBounce = ApiClient.convertToType(data["returnBounce"], "Number");
        }
        return obj;
      };
      exports2.prototype = Object.create(GetCampaignOverview.prototype);
      exports2.prototype.constructor = exports2;
      exports2.prototype.testSent = void 0;
      exports2.prototype.header = void 0;
      exports2.prototype.footer = void 0;
      exports2.prototype.sender = void 0;
      exports2.prototype.replyTo = void 0;
      exports2.prototype.toField = void 0;
      exports2.prototype.htmlContent = void 0;
      exports2.prototype.shareLink = void 0;
      exports2.prototype.tag = void 0;
      exports2.prototype.createdAt = void 0;
      exports2.prototype.modifiedAt = void 0;
      exports2.prototype.inlineImageActivation = void 0;
      exports2.prototype.mirrorActive = void 0;
      exports2.prototype.recurring = void 0;
      exports2.prototype.sentDate = void 0;
      exports2.prototype.returnBounce = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetSmsCampaignRecipients.js
var require_GetSmsCampaignRecipients = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetSmsCampaignRecipients.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetSmsCampaignRecipients = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
        }
        return obj;
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetEmailCampaign.js
var require_GetEmailCampaign = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetEmailCampaign.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetExtendedCampaignOverview", "model/GetExtendedCampaignOverviewSender", "model/GetSmsCampaignRecipients"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetExtendedCampaignOverview(), require_GetExtendedCampaignOverviewSender(), require_GetSmsCampaignRecipients());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetEmailCampaign = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetExtendedCampaignOverview, root.SibApiV3Sdk.GetExtendedCampaignOverviewSender, root.SibApiV3Sdk.GetSmsCampaignRecipients);
      }
    })(exports, function(ApiClient, GetExtendedCampaignOverview, GetExtendedCampaignOverviewSender, GetSmsCampaignRecipients) {
      "use strict";
      var exports2 = function(id, name, type, status, testSent, header, footer, sender, replyTo, htmlContent, createdAt, modifiedAt, recipients, statistics) {
        GetExtendedCampaignOverview.call(this, id, name, type, status, testSent, header, footer, sender, replyTo, htmlContent, createdAt, modifiedAt);
        this.recipients = recipients;
        this.statistics = statistics;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          GetExtendedCampaignOverview.constructFromObject(data, obj);
          if (data.hasOwnProperty("recipients"))
            obj.recipients = GetSmsCampaignRecipients.constructFromObject(data["recipients"]);
          if (data.hasOwnProperty("statistics"))
            obj.statistics = GetSmsCampaignRecipients.constructFromObject(data["statistics"]);
        }
        return obj;
      };
      exports2.prototype = Object.create(GetExtendedCampaignOverview.prototype);
      exports2.prototype.constructor = exports2;
      exports2.prototype.recipients = void 0;
      exports2.prototype.statistics = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetEmailCampaigns.js
var require_GetEmailCampaigns = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetEmailCampaigns.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetEmailCampaigns = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("campaigns"))
            obj.campaigns = ApiClient.convertToType(data["campaigns"], [Object]);
          if (data.hasOwnProperty("count"))
            obj.count = ApiClient.convertToType(data["count"], "Number");
        }
        return obj;
      };
      exports2.prototype.campaigns = void 0;
      exports2.prototype.count = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetEmailEventReportEvents.js
var require_GetEmailEventReportEvents = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetEmailEventReportEvents.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetEmailEventReportEvents = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(email, _date, messageId, event) {
        this.email = email;
        this._date = _date;
        this.messageId = messageId;
        this.event = event;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("email"))
            obj.email = ApiClient.convertToType(data["email"], "String");
          if (data.hasOwnProperty("date"))
            obj._date = ApiClient.convertToType(data["date"], "String");
          if (data.hasOwnProperty("subject"))
            obj.subject = ApiClient.convertToType(data["subject"], "String");
          if (data.hasOwnProperty("messageId"))
            obj.messageId = ApiClient.convertToType(data["messageId"], "String");
          if (data.hasOwnProperty("event"))
            obj.event = ApiClient.convertToType(data["event"], "String");
          if (data.hasOwnProperty("reason"))
            obj.reason = ApiClient.convertToType(data["reason"], "String");
          if (data.hasOwnProperty("tag"))
            obj.tag = ApiClient.convertToType(data["tag"], "String");
          if (data.hasOwnProperty("ip"))
            obj.ip = ApiClient.convertToType(data["ip"], "String");
          if (data.hasOwnProperty("link"))
            obj.link = ApiClient.convertToType(data["link"], "String");
          if (data.hasOwnProperty("from"))
            obj.from = ApiClient.convertToType(data["from"], "String");
          if (data.hasOwnProperty("templateId"))
            obj.templateId = ApiClient.convertToType(data["templateId"], "Number");
        }
        return obj;
      };
      exports2.prototype.email = void 0;
      exports2.prototype._date = void 0;
      exports2.prototype.subject = void 0;
      exports2.prototype.messageId = void 0;
      exports2.prototype.event = void 0;
      exports2.prototype.reason = void 0;
      exports2.prototype.tag = void 0;
      exports2.prototype.ip = void 0;
      exports2.prototype.link = void 0;
      exports2.prototype.from = void 0;
      exports2.prototype.templateId = void 0;
      exports2.EventEnum = {
        bounces: "bounces",
        hardBounces: "hardBounces",
        softBounces: "softBounces",
        delivered: "delivered",
        spam: "spam",
        requests: "requests",
        opened: "opened",
        clicks: "clicks",
        invalid: "invalid",
        deferred: "deferred",
        blocked: "blocked",
        unsubscribed: "unsubscribed",
        error: "error",
        loadedByProxy: "loadedByProxy"
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetEmailEventReport.js
var require_GetEmailEventReport = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetEmailEventReport.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetEmailEventReportEvents"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetEmailEventReportEvents());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetEmailEventReport = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetEmailEventReportEvents);
      }
    })(exports, function(ApiClient, GetEmailEventReportEvents) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("events"))
            obj.events = ApiClient.convertToType(data["events"], [GetEmailEventReportEvents]);
        }
        return obj;
      };
      exports2.prototype.events = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetExtendedCampaignStatsGlobalStats.js
var require_GetExtendedCampaignStatsGlobalStats = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetExtendedCampaignStatsGlobalStats.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetExtendedCampaignStatsGlobalStats = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
        }
        return obj;
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetStatsByBrowser.js
var require_GetStatsByBrowser = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetStatsByBrowser.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetDeviceBrowserStats"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetDeviceBrowserStats());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetStatsByBrowser = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetDeviceBrowserStats);
      }
    })(exports, function(ApiClient, GetDeviceBrowserStats) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          ApiClient.constructFromObject(data, obj, "GetDeviceBrowserStats");
        }
        return obj;
      };
      exports2.prototype.additionalProperties = /* @__PURE__ */ new Map();
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetStatsByDevice.js
var require_GetStatsByDevice = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetStatsByDevice.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetDeviceBrowserStats"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetDeviceBrowserStats());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetStatsByDevice = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetDeviceBrowserStats);
      }
    })(exports, function(ApiClient, GetDeviceBrowserStats) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("desktop"))
            obj.desktop = ApiClient.convertToType(data["desktop"], { "String": GetDeviceBrowserStats });
          if (data.hasOwnProperty("mobile"))
            obj.mobile = ApiClient.convertToType(data["mobile"], { "String": GetDeviceBrowserStats });
          if (data.hasOwnProperty("tablet"))
            obj.tablet = ApiClient.convertToType(data["tablet"], { "String": GetDeviceBrowserStats });
          if (data.hasOwnProperty("unknown"))
            obj.unknown = ApiClient.convertToType(data["unknown"], { "String": GetDeviceBrowserStats });
        }
        return obj;
      };
      exports2.prototype.desktop = void 0;
      exports2.prototype.mobile = void 0;
      exports2.prototype.tablet = void 0;
      exports2.prototype.unknown = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetStatsByDomain.js
var require_GetStatsByDomain = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetStatsByDomain.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetCampaignStats"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetCampaignStats());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetStatsByDomain = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetCampaignStats);
      }
    })(exports, function(ApiClient, GetCampaignStats) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          ApiClient.constructFromObject(data, obj, "GetCampaignStats");
        }
        return obj;
      };
      exports2.prototype.additionalProperties = /* @__PURE__ */ new Map();
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetExtendedCampaignStats.js
var require_GetExtendedCampaignStats = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetExtendedCampaignStats.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetExtendedCampaignStatsGlobalStats", "model/GetStatsByBrowser", "model/GetStatsByDevice", "model/GetStatsByDomain"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetExtendedCampaignStatsGlobalStats(), require_GetStatsByBrowser(), require_GetStatsByDevice(), require_GetStatsByDomain());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetExtendedCampaignStats = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetExtendedCampaignStatsGlobalStats, root.SibApiV3Sdk.GetStatsByBrowser, root.SibApiV3Sdk.GetStatsByDevice, root.SibApiV3Sdk.GetStatsByDomain);
      }
    })(exports, function(ApiClient, GetExtendedCampaignStatsGlobalStats, GetStatsByBrowser, GetStatsByDevice, GetStatsByDomain) {
      "use strict";
      var exports2 = function(globalStats, campaignStats, mirrorClick, remaining, linksStats, statsByDomain, statsByDevice, statsByBrowser) {
        this.globalStats = globalStats;
        this.campaignStats = campaignStats;
        this.mirrorClick = mirrorClick;
        this.remaining = remaining;
        this.linksStats = linksStats;
        this.statsByDomain = statsByDomain;
        this.statsByDevice = statsByDevice;
        this.statsByBrowser = statsByBrowser;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("globalStats"))
            obj.globalStats = GetExtendedCampaignStatsGlobalStats.constructFromObject(data["globalStats"]);
          if (data.hasOwnProperty("campaignStats"))
            obj.campaignStats = ApiClient.convertToType(data["campaignStats"], [Object]);
          if (data.hasOwnProperty("mirrorClick"))
            obj.mirrorClick = ApiClient.convertToType(data["mirrorClick"], "Number");
          if (data.hasOwnProperty("remaining"))
            obj.remaining = ApiClient.convertToType(data["remaining"], "Number");
          if (data.hasOwnProperty("linksStats"))
            obj.linksStats = ApiClient.convertToType(data["linksStats"], Object);
          if (data.hasOwnProperty("statsByDomain"))
            obj.statsByDomain = GetStatsByDomain.constructFromObject(data["statsByDomain"]);
          if (data.hasOwnProperty("statsByDevice"))
            obj.statsByDevice = GetStatsByDevice.constructFromObject(data["statsByDevice"]);
          if (data.hasOwnProperty("statsByBrowser"))
            obj.statsByBrowser = GetStatsByBrowser.constructFromObject(data["statsByBrowser"]);
        }
        return obj;
      };
      exports2.prototype.globalStats = void 0;
      exports2.prototype.campaignStats = void 0;
      exports2.prototype.mirrorClick = void 0;
      exports2.prototype.remaining = void 0;
      exports2.prototype.linksStats = void 0;
      exports2.prototype.statsByDomain = void 0;
      exports2.prototype.statsByDevice = void 0;
      exports2.prototype.statsByBrowser = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetExtendedContactDetailsStatisticsClicked.js
var require_GetExtendedContactDetailsStatisticsClicked = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetExtendedContactDetailsStatisticsClicked.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetExtendedContactDetailsStatisticsLinks"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetExtendedContactDetailsStatisticsLinks());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetExtendedContactDetailsStatisticsClicked = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetExtendedContactDetailsStatisticsLinks);
      }
    })(exports, function(ApiClient, GetExtendedContactDetailsStatisticsLinks) {
      "use strict";
      var exports2 = function(campaignId, links) {
        this.campaignId = campaignId;
        this.links = links;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("campaignId"))
            obj.campaignId = ApiClient.convertToType(data["campaignId"], "Number");
          if (data.hasOwnProperty("links"))
            obj.links = ApiClient.convertToType(data["links"], [GetExtendedContactDetailsStatisticsLinks]);
        }
        return obj;
      };
      exports2.prototype.campaignId = void 0;
      exports2.prototype.links = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetExtendedContactDetailsStatisticsDelivered.js
var require_GetExtendedContactDetailsStatisticsDelivered = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetExtendedContactDetailsStatisticsDelivered.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetExtendedContactDetailsStatisticsDelivered = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(campaignId, eventTime) {
        this.campaignId = campaignId;
        this.eventTime = eventTime;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("campaignId"))
            obj.campaignId = ApiClient.convertToType(data["campaignId"], "Number");
          if (data.hasOwnProperty("eventTime"))
            obj.eventTime = ApiClient.convertToType(data["eventTime"], "String");
        }
        return obj;
      };
      exports2.prototype.campaignId = void 0;
      exports2.prototype.eventTime = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetExtendedContactDetailsStatisticsOpened.js
var require_GetExtendedContactDetailsStatisticsOpened = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetExtendedContactDetailsStatisticsOpened.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetExtendedContactDetailsStatisticsOpened = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(campaignId, count, eventTime, ip) {
        this.campaignId = campaignId;
        this.count = count;
        this.eventTime = eventTime;
        this.ip = ip;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("campaignId"))
            obj.campaignId = ApiClient.convertToType(data["campaignId"], "Number");
          if (data.hasOwnProperty("count"))
            obj.count = ApiClient.convertToType(data["count"], "Number");
          if (data.hasOwnProperty("eventTime"))
            obj.eventTime = ApiClient.convertToType(data["eventTime"], "String");
          if (data.hasOwnProperty("ip"))
            obj.ip = ApiClient.convertToType(data["ip"], "String");
        }
        return obj;
      };
      exports2.prototype.campaignId = void 0;
      exports2.prototype.count = void 0;
      exports2.prototype.eventTime = void 0;
      exports2.prototype.ip = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetExtendedContactDetailsStatisticsUnsubscriptions.js
var require_GetExtendedContactDetailsStatisticsUnsubscriptions = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetExtendedContactDetailsStatisticsUnsubscriptions.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription", "model/GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription(), require_GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetExtendedContactDetailsStatisticsUnsubscriptions = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription, root.SibApiV3Sdk.GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription);
      }
    })(exports, function(ApiClient, GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription, GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription) {
      "use strict";
      var exports2 = function(userUnsubscription, adminUnsubscription) {
        this.userUnsubscription = userUnsubscription;
        this.adminUnsubscription = adminUnsubscription;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("userUnsubscription"))
            obj.userUnsubscription = ApiClient.convertToType(data["userUnsubscription"], [GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription]);
          if (data.hasOwnProperty("adminUnsubscription"))
            obj.adminUnsubscription = ApiClient.convertToType(data["adminUnsubscription"], [GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription]);
        }
        return obj;
      };
      exports2.prototype.userUnsubscription = void 0;
      exports2.prototype.adminUnsubscription = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetExtendedContactDetailsStatistics.js
var require_GetExtendedContactDetailsStatistics = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetExtendedContactDetailsStatistics.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetExtendedContactDetailsStatisticsClicked", "model/GetExtendedContactDetailsStatisticsDelivered", "model/GetExtendedContactDetailsStatisticsMessagesSent", "model/GetExtendedContactDetailsStatisticsOpened", "model/GetExtendedContactDetailsStatisticsUnsubscriptions"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetExtendedContactDetailsStatisticsClicked(), require_GetExtendedContactDetailsStatisticsDelivered(), require_GetExtendedContactDetailsStatisticsMessagesSent(), require_GetExtendedContactDetailsStatisticsOpened(), require_GetExtendedContactDetailsStatisticsUnsubscriptions());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetExtendedContactDetailsStatistics = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetExtendedContactDetailsStatisticsClicked, root.SibApiV3Sdk.GetExtendedContactDetailsStatisticsDelivered, root.SibApiV3Sdk.GetExtendedContactDetailsStatisticsMessagesSent, root.SibApiV3Sdk.GetExtendedContactDetailsStatisticsOpened, root.SibApiV3Sdk.GetExtendedContactDetailsStatisticsUnsubscriptions);
      }
    })(exports, function(ApiClient, GetExtendedContactDetailsStatisticsClicked, GetExtendedContactDetailsStatisticsDelivered, GetExtendedContactDetailsStatisticsMessagesSent, GetExtendedContactDetailsStatisticsOpened, GetExtendedContactDetailsStatisticsUnsubscriptions) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("messagesSent"))
            obj.messagesSent = ApiClient.convertToType(data["messagesSent"], [GetExtendedContactDetailsStatisticsMessagesSent]);
          if (data.hasOwnProperty("hardBounces"))
            obj.hardBounces = ApiClient.convertToType(data["hardBounces"], [GetExtendedContactDetailsStatisticsMessagesSent]);
          if (data.hasOwnProperty("softBounces"))
            obj.softBounces = ApiClient.convertToType(data["softBounces"], [GetExtendedContactDetailsStatisticsMessagesSent]);
          if (data.hasOwnProperty("complaints"))
            obj.complaints = ApiClient.convertToType(data["complaints"], [GetExtendedContactDetailsStatisticsMessagesSent]);
          if (data.hasOwnProperty("unsubscriptions"))
            obj.unsubscriptions = GetExtendedContactDetailsStatisticsUnsubscriptions.constructFromObject(data["unsubscriptions"]);
          if (data.hasOwnProperty("opened"))
            obj.opened = ApiClient.convertToType(data["opened"], [GetExtendedContactDetailsStatisticsOpened]);
          if (data.hasOwnProperty("clicked"))
            obj.clicked = ApiClient.convertToType(data["clicked"], [GetExtendedContactDetailsStatisticsClicked]);
          if (data.hasOwnProperty("transacAttributes"))
            obj.transacAttributes = ApiClient.convertToType(data["transacAttributes"], [Object]);
          if (data.hasOwnProperty("delivered"))
            obj.delivered = ApiClient.convertToType(data["delivered"], [GetExtendedContactDetailsStatisticsDelivered]);
        }
        return obj;
      };
      exports2.prototype.messagesSent = void 0;
      exports2.prototype.hardBounces = void 0;
      exports2.prototype.softBounces = void 0;
      exports2.prototype.complaints = void 0;
      exports2.prototype.unsubscriptions = void 0;
      exports2.prototype.opened = void 0;
      exports2.prototype.clicked = void 0;
      exports2.prototype.transacAttributes = void 0;
      exports2.prototype.delivered = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetExtendedContactDetails.js
var require_GetExtendedContactDetails = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetExtendedContactDetails.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetContactDetails", "model/GetExtendedContactDetailsStatistics"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetContactDetails(), require_GetExtendedContactDetailsStatistics());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetExtendedContactDetails = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetContactDetails, root.SibApiV3Sdk.GetExtendedContactDetailsStatistics);
      }
    })(exports, function(ApiClient, GetContactDetails, GetExtendedContactDetailsStatistics) {
      "use strict";
      var exports2 = function(email, id, emailBlacklisted, smsBlacklisted, createdAt, modifiedAt, listIds, attributes, statistics) {
        GetContactDetails.call(this, email, id, emailBlacklisted, smsBlacklisted, createdAt, modifiedAt, listIds, attributes);
        this.statistics = statistics;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          GetContactDetails.constructFromObject(data, obj);
          if (data.hasOwnProperty("statistics"))
            obj.statistics = GetExtendedContactDetailsStatistics.constructFromObject(data["statistics"]);
        }
        return obj;
      };
      exports2.prototype = Object.create(GetContactDetails.prototype);
      exports2.prototype.constructor = exports2;
      exports2.prototype.statistics = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetExtendedListCampaignStats.js
var require_GetExtendedListCampaignStats = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetExtendedListCampaignStats.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetCampaignStats"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetCampaignStats());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetExtendedListCampaignStats = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetCampaignStats);
      }
    })(exports, function(ApiClient, GetCampaignStats) {
      "use strict";
      var exports2 = function(campaignId, stats) {
        this.campaignId = campaignId;
        this.stats = stats;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("campaignId"))
            obj.campaignId = ApiClient.convertToType(data["campaignId"], "Number");
          if (data.hasOwnProperty("stats"))
            obj.stats = GetCampaignStats.constructFromObject(data["stats"]);
        }
        return obj;
      };
      exports2.prototype.campaignId = void 0;
      exports2.prototype.stats = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetList.js
var require_GetList = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetList.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetList = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(id, name, totalBlacklisted, totalSubscribers, uniqueSubscribers) {
        this.id = id;
        this.name = name;
        this.totalBlacklisted = totalBlacklisted;
        this.totalSubscribers = totalSubscribers;
        this.uniqueSubscribers = uniqueSubscribers;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("id"))
            obj.id = ApiClient.convertToType(data["id"], "Number");
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
          if (data.hasOwnProperty("totalBlacklisted"))
            obj.totalBlacklisted = ApiClient.convertToType(data["totalBlacklisted"], "Number");
          if (data.hasOwnProperty("totalSubscribers"))
            obj.totalSubscribers = ApiClient.convertToType(data["totalSubscribers"], "Number");
          if (data.hasOwnProperty("uniqueSubscribers"))
            obj.uniqueSubscribers = ApiClient.convertToType(data["uniqueSubscribers"], "Number");
        }
        return obj;
      };
      exports2.prototype.id = void 0;
      exports2.prototype.name = void 0;
      exports2.prototype.totalBlacklisted = void 0;
      exports2.prototype.totalSubscribers = void 0;
      exports2.prototype.uniqueSubscribers = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetExtendedList.js
var require_GetExtendedList = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetExtendedList.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetExtendedListCampaignStats", "model/GetList"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetExtendedListCampaignStats(), require_GetList());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetExtendedList = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetExtendedListCampaignStats, root.SibApiV3Sdk.GetList);
      }
    })(exports, function(ApiClient, GetExtendedListCampaignStats, GetList) {
      "use strict";
      var exports2 = function(id, name, totalBlacklisted, totalSubscribers, uniqueSubscribers, folderId, createdAt) {
        GetList.call(this, id, name, totalBlacklisted, totalSubscribers, uniqueSubscribers);
        this.folderId = folderId;
        this.createdAt = createdAt;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          GetList.constructFromObject(data, obj);
          if (data.hasOwnProperty("folderId"))
            obj.folderId = ApiClient.convertToType(data["folderId"], "Number");
          if (data.hasOwnProperty("createdAt"))
            obj.createdAt = ApiClient.convertToType(data["createdAt"], "String");
          if (data.hasOwnProperty("campaignStats"))
            obj.campaignStats = ApiClient.convertToType(data["campaignStats"], [GetExtendedListCampaignStats]);
          if (data.hasOwnProperty("dynamicList"))
            obj.dynamicList = ApiClient.convertToType(data["dynamicList"], "Boolean");
        }
        return obj;
      };
      exports2.prototype = Object.create(GetList.prototype);
      exports2.prototype.constructor = exports2;
      exports2.prototype.folderId = void 0;
      exports2.prototype.createdAt = void 0;
      exports2.prototype.campaignStats = void 0;
      exports2.prototype.dynamicList = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetFolder.js
var require_GetFolder = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetFolder.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetFolder = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(id, name, totalBlacklisted, totalSubscribers, uniqueSubscribers) {
        this.id = id;
        this.name = name;
        this.totalBlacklisted = totalBlacklisted;
        this.totalSubscribers = totalSubscribers;
        this.uniqueSubscribers = uniqueSubscribers;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("id"))
            obj.id = ApiClient.convertToType(data["id"], "Number");
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
          if (data.hasOwnProperty("totalBlacklisted"))
            obj.totalBlacklisted = ApiClient.convertToType(data["totalBlacklisted"], "Number");
          if (data.hasOwnProperty("totalSubscribers"))
            obj.totalSubscribers = ApiClient.convertToType(data["totalSubscribers"], "Number");
          if (data.hasOwnProperty("uniqueSubscribers"))
            obj.uniqueSubscribers = ApiClient.convertToType(data["uniqueSubscribers"], "Number");
        }
        return obj;
      };
      exports2.prototype.id = void 0;
      exports2.prototype.name = void 0;
      exports2.prototype.totalBlacklisted = void 0;
      exports2.prototype.totalSubscribers = void 0;
      exports2.prototype.uniqueSubscribers = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetFolderLists.js
var require_GetFolderLists = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetFolderLists.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetFolderLists = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("lists"))
            obj.lists = ApiClient.convertToType(data["lists"], [Object]);
          if (data.hasOwnProperty("count"))
            obj.count = ApiClient.convertToType(data["count"], "Number");
        }
        return obj;
      };
      exports2.prototype.lists = void 0;
      exports2.prototype.count = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetFolders.js
var require_GetFolders = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetFolders.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetFolders = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("folders"))
            obj.folders = ApiClient.convertToType(data["folders"], [Object]);
          if (data.hasOwnProperty("count"))
            obj.count = ApiClient.convertToType(data["count"], "Number");
        }
        return obj;
      };
      exports2.prototype.folders = void 0;
      exports2.prototype.count = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetInboundEmailEventsEvents.js
var require_GetInboundEmailEventsEvents = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetInboundEmailEventsEvents.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetInboundEmailEventsEvents = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(uuid, _date, sender, recipient) {
        this.uuid = uuid;
        this._date = _date;
        this.sender = sender;
        this.recipient = recipient;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("uuid"))
            obj.uuid = ApiClient.convertToType(data["uuid"], "String");
          if (data.hasOwnProperty("date"))
            obj._date = ApiClient.convertToType(data["date"], "Date");
          if (data.hasOwnProperty("sender"))
            obj.sender = ApiClient.convertToType(data["sender"], "String");
          if (data.hasOwnProperty("recipient"))
            obj.recipient = ApiClient.convertToType(data["recipient"], "String");
        }
        return obj;
      };
      exports2.prototype.uuid = void 0;
      exports2.prototype._date = void 0;
      exports2.prototype.sender = void 0;
      exports2.prototype.recipient = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetInboundEmailEvents.js
var require_GetInboundEmailEvents = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetInboundEmailEvents.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetInboundEmailEventsEvents"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetInboundEmailEventsEvents());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetInboundEmailEvents = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetInboundEmailEventsEvents);
      }
    })(exports, function(ApiClient, GetInboundEmailEventsEvents) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("events"))
            obj.events = ApiClient.convertToType(data["events"], [GetInboundEmailEventsEvents]);
        }
        return obj;
      };
      exports2.prototype.events = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetInboundEmailEventsByUuidAttachments.js
var require_GetInboundEmailEventsByUuidAttachments = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetInboundEmailEventsByUuidAttachments.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetInboundEmailEventsByUuidAttachments = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
          if (data.hasOwnProperty("contentType"))
            obj.contentType = ApiClient.convertToType(data["contentType"], "String");
          if (data.hasOwnProperty("contentId"))
            obj.contentId = ApiClient.convertToType(data["contentId"], "String");
          if (data.hasOwnProperty("contentLength"))
            obj.contentLength = ApiClient.convertToType(data["contentLength"], "Number");
        }
        return obj;
      };
      exports2.prototype.name = void 0;
      exports2.prototype.contentType = void 0;
      exports2.prototype.contentId = void 0;
      exports2.prototype.contentLength = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetInboundEmailEventsByUuidLogs.js
var require_GetInboundEmailEventsByUuidLogs = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetInboundEmailEventsByUuidLogs.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetInboundEmailEventsByUuidLogs = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("date"))
            obj._date = ApiClient.convertToType(data["date"], "Date");
          if (data.hasOwnProperty("type"))
            obj.type = ApiClient.convertToType(data["type"], "String");
        }
        return obj;
      };
      exports2.prototype._date = void 0;
      exports2.prototype.type = void 0;
      exports2.TypeEnum = {
        received: "received",
        processed: "processed",
        webhookFailed: "webhookFailed",
        webhookDelivered: "webhookDelivered"
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetInboundEmailEventsByUuid.js
var require_GetInboundEmailEventsByUuid = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetInboundEmailEventsByUuid.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetInboundEmailEventsByUuidAttachments", "model/GetInboundEmailEventsByUuidLogs"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetInboundEmailEventsByUuidAttachments(), require_GetInboundEmailEventsByUuidLogs());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetInboundEmailEventsByUuid = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetInboundEmailEventsByUuidAttachments, root.SibApiV3Sdk.GetInboundEmailEventsByUuidLogs);
      }
    })(exports, function(ApiClient, GetInboundEmailEventsByUuidAttachments, GetInboundEmailEventsByUuidLogs) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("receivedAt"))
            obj.receivedAt = ApiClient.convertToType(data["receivedAt"], "Date");
          if (data.hasOwnProperty("deliveredAt"))
            obj.deliveredAt = ApiClient.convertToType(data["deliveredAt"], "Date");
          if (data.hasOwnProperty("recipient"))
            obj.recipient = ApiClient.convertToType(data["recipient"], "String");
          if (data.hasOwnProperty("sender"))
            obj.sender = ApiClient.convertToType(data["sender"], "String");
          if (data.hasOwnProperty("messageId"))
            obj.messageId = ApiClient.convertToType(data["messageId"], "String");
          if (data.hasOwnProperty("subject"))
            obj.subject = ApiClient.convertToType(data["subject"], "String");
          if (data.hasOwnProperty("attachments"))
            obj.attachments = ApiClient.convertToType(data["attachments"], [GetInboundEmailEventsByUuidAttachments]);
          if (data.hasOwnProperty("logs"))
            obj.logs = ApiClient.convertToType(data["logs"], [GetInboundEmailEventsByUuidLogs]);
        }
        return obj;
      };
      exports2.prototype.receivedAt = void 0;
      exports2.prototype.deliveredAt = void 0;
      exports2.prototype.recipient = void 0;
      exports2.prototype.sender = void 0;
      exports2.prototype.messageId = void 0;
      exports2.prototype.subject = void 0;
      exports2.prototype.attachments = void 0;
      exports2.prototype.logs = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetIp.js
var require_GetIp = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetIp.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetIp = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(id, ip, active, domain) {
        this.id = id;
        this.ip = ip;
        this.active = active;
        this.domain = domain;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("id"))
            obj.id = ApiClient.convertToType(data["id"], "Number");
          if (data.hasOwnProperty("ip"))
            obj.ip = ApiClient.convertToType(data["ip"], "String");
          if (data.hasOwnProperty("active"))
            obj.active = ApiClient.convertToType(data["active"], "Boolean");
          if (data.hasOwnProperty("domain"))
            obj.domain = ApiClient.convertToType(data["domain"], "String");
        }
        return obj;
      };
      exports2.prototype.id = void 0;
      exports2.prototype.ip = void 0;
      exports2.prototype.active = void 0;
      exports2.prototype.domain = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetIpFromSender.js
var require_GetIpFromSender = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetIpFromSender.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetIpFromSender = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(id, ip, domain, weight) {
        this.id = id;
        this.ip = ip;
        this.domain = domain;
        this.weight = weight;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("id"))
            obj.id = ApiClient.convertToType(data["id"], "Number");
          if (data.hasOwnProperty("ip"))
            obj.ip = ApiClient.convertToType(data["ip"], "String");
          if (data.hasOwnProperty("domain"))
            obj.domain = ApiClient.convertToType(data["domain"], "String");
          if (data.hasOwnProperty("weight"))
            obj.weight = ApiClient.convertToType(data["weight"], "Number");
        }
        return obj;
      };
      exports2.prototype.id = void 0;
      exports2.prototype.ip = void 0;
      exports2.prototype.domain = void 0;
      exports2.prototype.weight = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetIps.js
var require_GetIps = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetIps.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetIp"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetIp());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetIps = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetIp);
      }
    })(exports, function(ApiClient, GetIp) {
      "use strict";
      var exports2 = function(ips) {
        this.ips = ips;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("ips"))
            obj.ips = ApiClient.convertToType(data["ips"], [GetIp]);
        }
        return obj;
      };
      exports2.prototype.ips = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetIpsFromSender.js
var require_GetIpsFromSender = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetIpsFromSender.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetIpFromSender"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetIpFromSender());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetIpsFromSender = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetIpFromSender);
      }
    })(exports, function(ApiClient, GetIpFromSender) {
      "use strict";
      var exports2 = function(ips) {
        this.ips = ips;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("ips"))
            obj.ips = ApiClient.convertToType(data["ips"], [GetIpFromSender]);
        }
        return obj;
      };
      exports2.prototype.ips = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetLists.js
var require_GetLists = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetLists.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetLists = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("lists"))
            obj.lists = ApiClient.convertToType(data["lists"], [Object]);
          if (data.hasOwnProperty("count"))
            obj.count = ApiClient.convertToType(data["count"], "Number");
        }
        return obj;
      };
      exports2.prototype.lists = void 0;
      exports2.prototype.count = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetProcess.js
var require_GetProcess = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetProcess.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetProcess = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(id, status, name) {
        this.id = id;
        this.status = status;
        this.name = name;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("id"))
            obj.id = ApiClient.convertToType(data["id"], "Number");
          if (data.hasOwnProperty("status"))
            obj.status = ApiClient.convertToType(data["status"], "String");
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
          if (data.hasOwnProperty("export_url"))
            obj.exportUrl = ApiClient.convertToType(data["export_url"], "String");
        }
        return obj;
      };
      exports2.prototype.id = void 0;
      exports2.prototype.status = void 0;
      exports2.prototype.name = void 0;
      exports2.prototype.exportUrl = void 0;
      exports2.StatusEnum = {
        queued: "queued",
        inProcess: "in_process",
        completed: "completed"
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetProcesses.js
var require_GetProcesses = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetProcesses.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetProcess"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetProcess());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetProcesses = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetProcess);
      }
    })(exports, function(ApiClient, GetProcess) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("processes"))
            obj.processes = ApiClient.convertToType(data["processes"], [GetProcess]);
          if (data.hasOwnProperty("count"))
            obj.count = ApiClient.convertToType(data["count"], "Number");
        }
        return obj;
      };
      exports2.prototype.processes = void 0;
      exports2.prototype.count = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetReportsReports.js
var require_GetReportsReports = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetReportsReports.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetReportsReports = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(_date, requests, delivered, hardBounces, softBounces, clicks, uniqueClicks, opens, uniqueOpens, spamReports, blocked, invalid, unsubscribed) {
        this._date = _date;
        this.requests = requests;
        this.delivered = delivered;
        this.hardBounces = hardBounces;
        this.softBounces = softBounces;
        this.clicks = clicks;
        this.uniqueClicks = uniqueClicks;
        this.opens = opens;
        this.uniqueOpens = uniqueOpens;
        this.spamReports = spamReports;
        this.blocked = blocked;
        this.invalid = invalid;
        this.unsubscribed = unsubscribed;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("date"))
            obj._date = ApiClient.convertToType(data["date"], "Date");
          if (data.hasOwnProperty("requests"))
            obj.requests = ApiClient.convertToType(data["requests"], "Number");
          if (data.hasOwnProperty("delivered"))
            obj.delivered = ApiClient.convertToType(data["delivered"], "Number");
          if (data.hasOwnProperty("hardBounces"))
            obj.hardBounces = ApiClient.convertToType(data["hardBounces"], "Number");
          if (data.hasOwnProperty("softBounces"))
            obj.softBounces = ApiClient.convertToType(data["softBounces"], "Number");
          if (data.hasOwnProperty("clicks"))
            obj.clicks = ApiClient.convertToType(data["clicks"], "Number");
          if (data.hasOwnProperty("uniqueClicks"))
            obj.uniqueClicks = ApiClient.convertToType(data["uniqueClicks"], "Number");
          if (data.hasOwnProperty("opens"))
            obj.opens = ApiClient.convertToType(data["opens"], "Number");
          if (data.hasOwnProperty("uniqueOpens"))
            obj.uniqueOpens = ApiClient.convertToType(data["uniqueOpens"], "Number");
          if (data.hasOwnProperty("spamReports"))
            obj.spamReports = ApiClient.convertToType(data["spamReports"], "Number");
          if (data.hasOwnProperty("blocked"))
            obj.blocked = ApiClient.convertToType(data["blocked"], "Number");
          if (data.hasOwnProperty("invalid"))
            obj.invalid = ApiClient.convertToType(data["invalid"], "Number");
          if (data.hasOwnProperty("unsubscribed"))
            obj.unsubscribed = ApiClient.convertToType(data["unsubscribed"], "Number");
        }
        return obj;
      };
      exports2.prototype._date = void 0;
      exports2.prototype.requests = void 0;
      exports2.prototype.delivered = void 0;
      exports2.prototype.hardBounces = void 0;
      exports2.prototype.softBounces = void 0;
      exports2.prototype.clicks = void 0;
      exports2.prototype.uniqueClicks = void 0;
      exports2.prototype.opens = void 0;
      exports2.prototype.uniqueOpens = void 0;
      exports2.prototype.spamReports = void 0;
      exports2.prototype.blocked = void 0;
      exports2.prototype.invalid = void 0;
      exports2.prototype.unsubscribed = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetReports.js
var require_GetReports = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetReports.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetReportsReports"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetReportsReports());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetReports = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetReportsReports);
      }
    })(exports, function(ApiClient, GetReportsReports) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("reports"))
            obj.reports = ApiClient.convertToType(data["reports"], [GetReportsReports]);
        }
        return obj;
      };
      exports2.prototype.reports = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetScheduledEmailByBatchIdBatches.js
var require_GetScheduledEmailByBatchIdBatches = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetScheduledEmailByBatchIdBatches.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetScheduledEmailByBatchIdBatches = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(scheduledAt, createdAt, status) {
        this.scheduledAt = scheduledAt;
        this.createdAt = createdAt;
        this.status = status;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("scheduledAt"))
            obj.scheduledAt = ApiClient.convertToType(data["scheduledAt"], "Date");
          if (data.hasOwnProperty("createdAt"))
            obj.createdAt = ApiClient.convertToType(data["createdAt"], "Date");
          if (data.hasOwnProperty("status"))
            obj.status = ApiClient.convertToType(data["status"], "String");
        }
        return obj;
      };
      exports2.prototype.scheduledAt = void 0;
      exports2.prototype.createdAt = void 0;
      exports2.prototype.status = void 0;
      exports2.StatusEnum = {
        inProgress: "inProgress",
        queued: "queued",
        processed: "processed",
        error: "error"
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetScheduledEmailByBatchId.js
var require_GetScheduledEmailByBatchId = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetScheduledEmailByBatchId.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetScheduledEmailByBatchIdBatches"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetScheduledEmailByBatchIdBatches());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetScheduledEmailByBatchId = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetScheduledEmailByBatchIdBatches);
      }
    })(exports, function(ApiClient, GetScheduledEmailByBatchIdBatches) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("count"))
            obj.count = ApiClient.convertToType(data["count"], "Number");
          if (data.hasOwnProperty("batches"))
            obj.batches = ApiClient.convertToType(data["batches"], [GetScheduledEmailByBatchIdBatches]);
        }
        return obj;
      };
      exports2.prototype.count = void 0;
      exports2.prototype.batches = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetScheduledEmailByMessageId.js
var require_GetScheduledEmailByMessageId = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetScheduledEmailByMessageId.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetScheduledEmailByMessageId = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(scheduledAt, createdAt, status) {
        this.scheduledAt = scheduledAt;
        this.createdAt = createdAt;
        this.status = status;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("scheduledAt"))
            obj.scheduledAt = ApiClient.convertToType(data["scheduledAt"], "Date");
          if (data.hasOwnProperty("createdAt"))
            obj.createdAt = ApiClient.convertToType(data["createdAt"], "Date");
          if (data.hasOwnProperty("status"))
            obj.status = ApiClient.convertToType(data["status"], "String");
        }
        return obj;
      };
      exports2.prototype.scheduledAt = void 0;
      exports2.prototype.createdAt = void 0;
      exports2.prototype.status = void 0;
      exports2.StatusEnum = {
        inProgress: "inProgress",
        queued: "queued",
        processed: "processed",
        error: "error"
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetSendersListIps.js
var require_GetSendersListIps = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetSendersListIps.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetSendersListIps = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(ip, domain, weight) {
        this.ip = ip;
        this.domain = domain;
        this.weight = weight;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("ip"))
            obj.ip = ApiClient.convertToType(data["ip"], "String");
          if (data.hasOwnProperty("domain"))
            obj.domain = ApiClient.convertToType(data["domain"], "String");
          if (data.hasOwnProperty("weight"))
            obj.weight = ApiClient.convertToType(data["weight"], "Number");
        }
        return obj;
      };
      exports2.prototype.ip = void 0;
      exports2.prototype.domain = void 0;
      exports2.prototype.weight = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetSendersListSenders.js
var require_GetSendersListSenders = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetSendersListSenders.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetSendersListIps"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetSendersListIps());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetSendersListSenders = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetSendersListIps);
      }
    })(exports, function(ApiClient, GetSendersListIps) {
      "use strict";
      var exports2 = function(id, name, email, active) {
        this.id = id;
        this.name = name;
        this.email = email;
        this.active = active;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("id"))
            obj.id = ApiClient.convertToType(data["id"], "Number");
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
          if (data.hasOwnProperty("email"))
            obj.email = ApiClient.convertToType(data["email"], "String");
          if (data.hasOwnProperty("active"))
            obj.active = ApiClient.convertToType(data["active"], "Boolean");
          if (data.hasOwnProperty("ips"))
            obj.ips = ApiClient.convertToType(data["ips"], [GetSendersListIps]);
        }
        return obj;
      };
      exports2.prototype.id = void 0;
      exports2.prototype.name = void 0;
      exports2.prototype.email = void 0;
      exports2.prototype.active = void 0;
      exports2.prototype.ips = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetSendersList.js
var require_GetSendersList = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetSendersList.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetSendersListSenders"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetSendersListSenders());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetSendersList = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetSendersListSenders);
      }
    })(exports, function(ApiClient, GetSendersListSenders) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("senders"))
            obj.senders = ApiClient.convertToType(data["senders"], [GetSendersListSenders]);
        }
        return obj;
      };
      exports2.prototype.senders = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetSharedTemplateUrl.js
var require_GetSharedTemplateUrl = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetSharedTemplateUrl.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetSharedTemplateUrl = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(sharedUrl) {
        this.sharedUrl = sharedUrl;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("sharedUrl"))
            obj.sharedUrl = ApiClient.convertToType(data["sharedUrl"], "String");
        }
        return obj;
      };
      exports2.prototype.sharedUrl = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetSmsCampaignOverview.js
var require_GetSmsCampaignOverview = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetSmsCampaignOverview.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetSmsCampaignOverview = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(id, name, status, content, sender, createdAt, modifiedAt) {
        this.id = id;
        this.name = name;
        this.status = status;
        this.content = content;
        this.sender = sender;
        this.createdAt = createdAt;
        this.modifiedAt = modifiedAt;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("id"))
            obj.id = ApiClient.convertToType(data["id"], "Number");
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
          if (data.hasOwnProperty("status"))
            obj.status = ApiClient.convertToType(data["status"], "String");
          if (data.hasOwnProperty("content"))
            obj.content = ApiClient.convertToType(data["content"], "String");
          if (data.hasOwnProperty("scheduledAt"))
            obj.scheduledAt = ApiClient.convertToType(data["scheduledAt"], "String");
          if (data.hasOwnProperty("sender"))
            obj.sender = ApiClient.convertToType(data["sender"], "String");
          if (data.hasOwnProperty("createdAt"))
            obj.createdAt = ApiClient.convertToType(data["createdAt"], "String");
          if (data.hasOwnProperty("modifiedAt"))
            obj.modifiedAt = ApiClient.convertToType(data["modifiedAt"], "String");
        }
        return obj;
      };
      exports2.prototype.id = void 0;
      exports2.prototype.name = void 0;
      exports2.prototype.status = void 0;
      exports2.prototype.content = void 0;
      exports2.prototype.scheduledAt = void 0;
      exports2.prototype.sender = void 0;
      exports2.prototype.createdAt = void 0;
      exports2.prototype.modifiedAt = void 0;
      exports2.StatusEnum = {
        draft: "draft",
        sent: "sent",
        archive: "archive",
        queued: "queued",
        suspended: "suspended",
        inProcess: "inProcess"
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetSmsCampaign.js
var require_GetSmsCampaign = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetSmsCampaign.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetSmsCampaignOverview", "model/GetSmsCampaignRecipients"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetSmsCampaignOverview(), require_GetSmsCampaignRecipients());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetSmsCampaign = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetSmsCampaignOverview, root.SibApiV3Sdk.GetSmsCampaignRecipients);
      }
    })(exports, function(ApiClient, GetSmsCampaignOverview, GetSmsCampaignRecipients) {
      "use strict";
      var exports2 = function(id, name, status, content, sender, createdAt, modifiedAt, recipients, statistics) {
        GetSmsCampaignOverview.call(this, id, name, status, content, sender, createdAt, modifiedAt);
        this.recipients = recipients;
        this.statistics = statistics;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          GetSmsCampaignOverview.constructFromObject(data, obj);
          if (data.hasOwnProperty("recipients"))
            obj.recipients = GetSmsCampaignRecipients.constructFromObject(data["recipients"]);
          if (data.hasOwnProperty("statistics"))
            obj.statistics = GetSmsCampaignRecipients.constructFromObject(data["statistics"]);
        }
        return obj;
      };
      exports2.prototype = Object.create(GetSmsCampaignOverview.prototype);
      exports2.prototype.constructor = exports2;
      exports2.prototype.recipients = void 0;
      exports2.prototype.statistics = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetSmsCampaignStats.js
var require_GetSmsCampaignStats = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetSmsCampaignStats.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetSmsCampaignStats = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(delivered, sent, processing, softBounces, hardBounces, unsubscriptions, answered) {
        this.delivered = delivered;
        this.sent = sent;
        this.processing = processing;
        this.softBounces = softBounces;
        this.hardBounces = hardBounces;
        this.unsubscriptions = unsubscriptions;
        this.answered = answered;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("delivered"))
            obj.delivered = ApiClient.convertToType(data["delivered"], "Number");
          if (data.hasOwnProperty("sent"))
            obj.sent = ApiClient.convertToType(data["sent"], "Number");
          if (data.hasOwnProperty("processing"))
            obj.processing = ApiClient.convertToType(data["processing"], "Number");
          if (data.hasOwnProperty("softBounces"))
            obj.softBounces = ApiClient.convertToType(data["softBounces"], "Number");
          if (data.hasOwnProperty("hardBounces"))
            obj.hardBounces = ApiClient.convertToType(data["hardBounces"], "Number");
          if (data.hasOwnProperty("unsubscriptions"))
            obj.unsubscriptions = ApiClient.convertToType(data["unsubscriptions"], "Number");
          if (data.hasOwnProperty("answered"))
            obj.answered = ApiClient.convertToType(data["answered"], "Number");
        }
        return obj;
      };
      exports2.prototype.delivered = void 0;
      exports2.prototype.sent = void 0;
      exports2.prototype.processing = void 0;
      exports2.prototype.softBounces = void 0;
      exports2.prototype.hardBounces = void 0;
      exports2.prototype.unsubscriptions = void 0;
      exports2.prototype.answered = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetSmsCampaigns.js
var require_GetSmsCampaigns = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetSmsCampaigns.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetSmsCampaigns = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("campaigns"))
            obj.campaigns = ApiClient.convertToType(data["campaigns"], [Object]);
          if (data.hasOwnProperty("count"))
            obj.count = ApiClient.convertToType(data["count"], "Number");
        }
        return obj;
      };
      exports2.prototype.campaigns = void 0;
      exports2.prototype.count = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetSmsEventReportEvents.js
var require_GetSmsEventReportEvents = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetSmsEventReportEvents.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetSmsEventReportEvents = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("phoneNumber"))
            obj.phoneNumber = ApiClient.convertToType(data["phoneNumber"], "String");
          if (data.hasOwnProperty("date"))
            obj._date = ApiClient.convertToType(data["date"], "String");
          if (data.hasOwnProperty("messageId"))
            obj.messageId = ApiClient.convertToType(data["messageId"], "String");
          if (data.hasOwnProperty("event"))
            obj.event = ApiClient.convertToType(data["event"], "String");
          if (data.hasOwnProperty("reason"))
            obj.reason = ApiClient.convertToType(data["reason"], "String");
          if (data.hasOwnProperty("reply"))
            obj.reply = ApiClient.convertToType(data["reply"], "String");
          if (data.hasOwnProperty("tag"))
            obj.tag = ApiClient.convertToType(data["tag"], "String");
        }
        return obj;
      };
      exports2.prototype.phoneNumber = void 0;
      exports2.prototype._date = void 0;
      exports2.prototype.messageId = void 0;
      exports2.prototype.event = void 0;
      exports2.prototype.reason = void 0;
      exports2.prototype.reply = void 0;
      exports2.prototype.tag = void 0;
      exports2.EventEnum = {
        bounces: "bounces",
        hardBounces: "hardBounces",
        softBounces: "softBounces",
        delivered: "delivered",
        sent: "sent",
        accepted: "accepted",
        unsubscription: "unsubscription",
        replies: "replies",
        blocked: "blocked"
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetSmsEventReport.js
var require_GetSmsEventReport = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetSmsEventReport.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetSmsEventReportEvents"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetSmsEventReportEvents());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetSmsEventReport = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetSmsEventReportEvents);
      }
    })(exports, function(ApiClient, GetSmsEventReportEvents) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("events"))
            obj.events = ApiClient.convertToType(data["events"], [GetSmsEventReportEvents]);
        }
        return obj;
      };
      exports2.prototype.events = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetSmtpTemplateOverviewSender.js
var require_GetSmtpTemplateOverviewSender = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetSmtpTemplateOverviewSender.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetSmtpTemplateOverviewSender = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
          if (data.hasOwnProperty("email"))
            obj.email = ApiClient.convertToType(data["email"], "String");
          if (data.hasOwnProperty("id"))
            obj.id = ApiClient.convertToType(data["id"], "String");
        }
        return obj;
      };
      exports2.prototype.name = void 0;
      exports2.prototype.email = void 0;
      exports2.prototype.id = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetSmtpTemplateOverview.js
var require_GetSmtpTemplateOverview = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetSmtpTemplateOverview.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetSmtpTemplateOverviewSender"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetSmtpTemplateOverviewSender());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetSmtpTemplateOverview = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetSmtpTemplateOverviewSender);
      }
    })(exports, function(ApiClient, GetSmtpTemplateOverviewSender) {
      "use strict";
      var exports2 = function(id, name, subject, isActive, testSent, sender, replyTo, toField, tag, htmlContent, createdAt, modifiedAt) {
        this.id = id;
        this.name = name;
        this.subject = subject;
        this.isActive = isActive;
        this.testSent = testSent;
        this.sender = sender;
        this.replyTo = replyTo;
        this.toField = toField;
        this.tag = tag;
        this.htmlContent = htmlContent;
        this.createdAt = createdAt;
        this.modifiedAt = modifiedAt;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("id"))
            obj.id = ApiClient.convertToType(data["id"], "Number");
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
          if (data.hasOwnProperty("subject"))
            obj.subject = ApiClient.convertToType(data["subject"], "String");
          if (data.hasOwnProperty("isActive"))
            obj.isActive = ApiClient.convertToType(data["isActive"], "Boolean");
          if (data.hasOwnProperty("testSent"))
            obj.testSent = ApiClient.convertToType(data["testSent"], "Boolean");
          if (data.hasOwnProperty("sender"))
            obj.sender = GetSmtpTemplateOverviewSender.constructFromObject(data["sender"]);
          if (data.hasOwnProperty("replyTo"))
            obj.replyTo = ApiClient.convertToType(data["replyTo"], "String");
          if (data.hasOwnProperty("toField"))
            obj.toField = ApiClient.convertToType(data["toField"], "String");
          if (data.hasOwnProperty("tag"))
            obj.tag = ApiClient.convertToType(data["tag"], "String");
          if (data.hasOwnProperty("htmlContent"))
            obj.htmlContent = ApiClient.convertToType(data["htmlContent"], "String");
          if (data.hasOwnProperty("createdAt"))
            obj.createdAt = ApiClient.convertToType(data["createdAt"], "String");
          if (data.hasOwnProperty("modifiedAt"))
            obj.modifiedAt = ApiClient.convertToType(data["modifiedAt"], "String");
          if (data.hasOwnProperty("doiTemplate"))
            obj.doiTemplate = ApiClient.convertToType(data["doiTemplate"], "Boolean");
        }
        return obj;
      };
      exports2.prototype.id = void 0;
      exports2.prototype.name = void 0;
      exports2.prototype.subject = void 0;
      exports2.prototype.isActive = void 0;
      exports2.prototype.testSent = void 0;
      exports2.prototype.sender = void 0;
      exports2.prototype.replyTo = void 0;
      exports2.prototype.toField = void 0;
      exports2.prototype.tag = void 0;
      exports2.prototype.htmlContent = void 0;
      exports2.prototype.createdAt = void 0;
      exports2.prototype.modifiedAt = void 0;
      exports2.prototype.doiTemplate = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetSmtpTemplates.js
var require_GetSmtpTemplates = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetSmtpTemplates.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetSmtpTemplateOverview"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetSmtpTemplateOverview());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetSmtpTemplates = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetSmtpTemplateOverview);
      }
    })(exports, function(ApiClient, GetSmtpTemplateOverview) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("count"))
            obj.count = ApiClient.convertToType(data["count"], "Number");
          if (data.hasOwnProperty("templates"))
            obj.templates = ApiClient.convertToType(data["templates"], [GetSmtpTemplateOverview]);
        }
        return obj;
      };
      exports2.prototype.count = void 0;
      exports2.prototype.templates = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetSsoToken.js
var require_GetSsoToken = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetSsoToken.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetSsoToken = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(token) {
        this.token = token;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("token"))
            obj.token = ApiClient.convertToType(data["token"], "String");
        }
        return obj;
      };
      exports2.prototype.token = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetTransacAggregatedSmsReport.js
var require_GetTransacAggregatedSmsReport = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetTransacAggregatedSmsReport.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetTransacAggregatedSmsReport = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("range"))
            obj.range = ApiClient.convertToType(data["range"], "String");
          if (data.hasOwnProperty("requests"))
            obj.requests = ApiClient.convertToType(data["requests"], "Number");
          if (data.hasOwnProperty("delivered"))
            obj.delivered = ApiClient.convertToType(data["delivered"], "Number");
          if (data.hasOwnProperty("hardBounces"))
            obj.hardBounces = ApiClient.convertToType(data["hardBounces"], "Number");
          if (data.hasOwnProperty("softBounces"))
            obj.softBounces = ApiClient.convertToType(data["softBounces"], "Number");
          if (data.hasOwnProperty("blocked"))
            obj.blocked = ApiClient.convertToType(data["blocked"], "Number");
          if (data.hasOwnProperty("unsubscribed"))
            obj.unsubscribed = ApiClient.convertToType(data["unsubscribed"], "Number");
          if (data.hasOwnProperty("replied"))
            obj.replied = ApiClient.convertToType(data["replied"], "Number");
          if (data.hasOwnProperty("accepted"))
            obj.accepted = ApiClient.convertToType(data["accepted"], "Number");
          if (data.hasOwnProperty("rejected"))
            obj.rejected = ApiClient.convertToType(data["rejected"], "Number");
        }
        return obj;
      };
      exports2.prototype.range = void 0;
      exports2.prototype.requests = void 0;
      exports2.prototype.delivered = void 0;
      exports2.prototype.hardBounces = void 0;
      exports2.prototype.softBounces = void 0;
      exports2.prototype.blocked = void 0;
      exports2.prototype.unsubscribed = void 0;
      exports2.prototype.replied = void 0;
      exports2.prototype.accepted = void 0;
      exports2.prototype.rejected = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetTransacBlockedContactsReason.js
var require_GetTransacBlockedContactsReason = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetTransacBlockedContactsReason.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetTransacBlockedContactsReason = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("code"))
            obj.code = ApiClient.convertToType(data["code"], "String");
          if (data.hasOwnProperty("message"))
            obj.message = ApiClient.convertToType(data["message"], "String");
        }
        return obj;
      };
      exports2.prototype.code = void 0;
      exports2.prototype.message = void 0;
      exports2.CodeEnum = {
        unsubscribedViaMA: "unsubscribedViaMA",
        unsubscribedViaEmail: "unsubscribedViaEmail",
        adminBlocked: "adminBlocked",
        unsubscribedViaApi: "unsubscribedViaApi",
        hardBounce: "hardBounce",
        contactFlaggedAsSpam: "contactFlaggedAsSpam"
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetTransacBlockedContactsContacts.js
var require_GetTransacBlockedContactsContacts = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetTransacBlockedContactsContacts.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetTransacBlockedContactsReason"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetTransacBlockedContactsReason());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetTransacBlockedContactsContacts = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetTransacBlockedContactsReason);
      }
    })(exports, function(ApiClient, GetTransacBlockedContactsReason) {
      "use strict";
      var exports2 = function(email, senderEmail, reason, blockedAt) {
        this.email = email;
        this.senderEmail = senderEmail;
        this.reason = reason;
        this.blockedAt = blockedAt;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("email"))
            obj.email = ApiClient.convertToType(data["email"], "String");
          if (data.hasOwnProperty("senderEmail"))
            obj.senderEmail = ApiClient.convertToType(data["senderEmail"], "String");
          if (data.hasOwnProperty("reason"))
            obj.reason = GetTransacBlockedContactsReason.constructFromObject(data["reason"]);
          if (data.hasOwnProperty("blockedAt"))
            obj.blockedAt = ApiClient.convertToType(data["blockedAt"], "String");
        }
        return obj;
      };
      exports2.prototype.email = void 0;
      exports2.prototype.senderEmail = void 0;
      exports2.prototype.reason = void 0;
      exports2.prototype.blockedAt = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetTransacBlockedContacts.js
var require_GetTransacBlockedContacts = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetTransacBlockedContacts.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetTransacBlockedContactsContacts"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetTransacBlockedContactsContacts());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetTransacBlockedContacts = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetTransacBlockedContactsContacts);
      }
    })(exports, function(ApiClient, GetTransacBlockedContactsContacts) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("count"))
            obj.count = ApiClient.convertToType(data["count"], "Number");
          if (data.hasOwnProperty("contacts"))
            obj.contacts = ApiClient.convertToType(data["contacts"], [GetTransacBlockedContactsContacts]);
        }
        return obj;
      };
      exports2.prototype.count = void 0;
      exports2.prototype.contacts = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetTransacEmailContentEvents.js
var require_GetTransacEmailContentEvents = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetTransacEmailContentEvents.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetTransacEmailContentEvents = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(name, time) {
        this.name = name;
        this.time = time;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
          if (data.hasOwnProperty("time"))
            obj.time = ApiClient.convertToType(data["time"], "String");
        }
        return obj;
      };
      exports2.prototype.name = void 0;
      exports2.prototype.time = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetTransacEmailContent.js
var require_GetTransacEmailContent = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetTransacEmailContent.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetTransacEmailContentEvents"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetTransacEmailContentEvents());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetTransacEmailContent = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetTransacEmailContentEvents);
      }
    })(exports, function(ApiClient, GetTransacEmailContentEvents) {
      "use strict";
      var exports2 = function(email, subject, _date, events, body, attachmentCount) {
        this.email = email;
        this.subject = subject;
        this._date = _date;
        this.events = events;
        this.body = body;
        this.attachmentCount = attachmentCount;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("email"))
            obj.email = ApiClient.convertToType(data["email"], "String");
          if (data.hasOwnProperty("subject"))
            obj.subject = ApiClient.convertToType(data["subject"], "String");
          if (data.hasOwnProperty("templateId"))
            obj.templateId = ApiClient.convertToType(data["templateId"], "Number");
          if (data.hasOwnProperty("date"))
            obj._date = ApiClient.convertToType(data["date"], "String");
          if (data.hasOwnProperty("events"))
            obj.events = ApiClient.convertToType(data["events"], [GetTransacEmailContentEvents]);
          if (data.hasOwnProperty("body"))
            obj.body = ApiClient.convertToType(data["body"], "String");
          if (data.hasOwnProperty("attachmentCount"))
            obj.attachmentCount = ApiClient.convertToType(data["attachmentCount"], "Number");
        }
        return obj;
      };
      exports2.prototype.email = void 0;
      exports2.prototype.subject = void 0;
      exports2.prototype.templateId = void 0;
      exports2.prototype._date = void 0;
      exports2.prototype.events = void 0;
      exports2.prototype.body = void 0;
      exports2.prototype.attachmentCount = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetTransacEmailsListTransactionalEmails.js
var require_GetTransacEmailsListTransactionalEmails = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetTransacEmailsListTransactionalEmails.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetTransacEmailsListTransactionalEmails = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(email, subject, messageId, uuid, _date) {
        this.email = email;
        this.subject = subject;
        this.messageId = messageId;
        this.uuid = uuid;
        this._date = _date;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("email"))
            obj.email = ApiClient.convertToType(data["email"], "String");
          if (data.hasOwnProperty("subject"))
            obj.subject = ApiClient.convertToType(data["subject"], "String");
          if (data.hasOwnProperty("templateId"))
            obj.templateId = ApiClient.convertToType(data["templateId"], "Number");
          if (data.hasOwnProperty("messageId"))
            obj.messageId = ApiClient.convertToType(data["messageId"], "String");
          if (data.hasOwnProperty("uuid"))
            obj.uuid = ApiClient.convertToType(data["uuid"], "String");
          if (data.hasOwnProperty("date"))
            obj._date = ApiClient.convertToType(data["date"], "String");
          if (data.hasOwnProperty("from"))
            obj.from = ApiClient.convertToType(data["from"], "String");
          if (data.hasOwnProperty("tags"))
            obj.tags = ApiClient.convertToType(data["tags"], ["String"]);
        }
        return obj;
      };
      exports2.prototype.email = void 0;
      exports2.prototype.subject = void 0;
      exports2.prototype.templateId = void 0;
      exports2.prototype.messageId = void 0;
      exports2.prototype.uuid = void 0;
      exports2.prototype._date = void 0;
      exports2.prototype.from = void 0;
      exports2.prototype.tags = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetTransacEmailsList.js
var require_GetTransacEmailsList = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetTransacEmailsList.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetTransacEmailsListTransactionalEmails"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetTransacEmailsListTransactionalEmails());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetTransacEmailsList = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetTransacEmailsListTransactionalEmails);
      }
    })(exports, function(ApiClient, GetTransacEmailsListTransactionalEmails) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("count"))
            obj.count = ApiClient.convertToType(data["count"], "Number");
          if (data.hasOwnProperty("transactionalEmails"))
            obj.transactionalEmails = ApiClient.convertToType(data["transactionalEmails"], [GetTransacEmailsListTransactionalEmails]);
        }
        return obj;
      };
      exports2.prototype.count = void 0;
      exports2.prototype.transactionalEmails = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetTransacSmsReportReports.js
var require_GetTransacSmsReportReports = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetTransacSmsReportReports.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetTransacSmsReportReports = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("date"))
            obj._date = ApiClient.convertToType(data["date"], "Date");
          if (data.hasOwnProperty("requests"))
            obj.requests = ApiClient.convertToType(data["requests"], "Number");
          if (data.hasOwnProperty("delivered"))
            obj.delivered = ApiClient.convertToType(data["delivered"], "Number");
          if (data.hasOwnProperty("hardBounces"))
            obj.hardBounces = ApiClient.convertToType(data["hardBounces"], "Number");
          if (data.hasOwnProperty("softBounces"))
            obj.softBounces = ApiClient.convertToType(data["softBounces"], "Number");
          if (data.hasOwnProperty("blocked"))
            obj.blocked = ApiClient.convertToType(data["blocked"], "Number");
          if (data.hasOwnProperty("unsubscribed"))
            obj.unsubscribed = ApiClient.convertToType(data["unsubscribed"], "Number");
          if (data.hasOwnProperty("replied"))
            obj.replied = ApiClient.convertToType(data["replied"], "Number");
          if (data.hasOwnProperty("accepted"))
            obj.accepted = ApiClient.convertToType(data["accepted"], "Number");
          if (data.hasOwnProperty("rejected"))
            obj.rejected = ApiClient.convertToType(data["rejected"], "Number");
        }
        return obj;
      };
      exports2.prototype._date = void 0;
      exports2.prototype.requests = void 0;
      exports2.prototype.delivered = void 0;
      exports2.prototype.hardBounces = void 0;
      exports2.prototype.softBounces = void 0;
      exports2.prototype.blocked = void 0;
      exports2.prototype.unsubscribed = void 0;
      exports2.prototype.replied = void 0;
      exports2.prototype.accepted = void 0;
      exports2.prototype.rejected = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetTransacSmsReport.js
var require_GetTransacSmsReport = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetTransacSmsReport.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetTransacSmsReportReports"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetTransacSmsReportReports());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetTransacSmsReport = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetTransacSmsReportReports);
      }
    })(exports, function(ApiClient, GetTransacSmsReportReports) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("reports"))
            obj.reports = ApiClient.convertToType(data["reports"], [GetTransacSmsReportReports]);
        }
        return obj;
      };
      exports2.prototype.reports = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetWebhook.js
var require_GetWebhook = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetWebhook.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetWebhook = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(url, id, description, events, type, createdAt, modifiedAt) {
        this.url = url;
        this.id = id;
        this.description = description;
        this.events = events;
        this.type = type;
        this.createdAt = createdAt;
        this.modifiedAt = modifiedAt;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("url"))
            obj.url = ApiClient.convertToType(data["url"], "String");
          if (data.hasOwnProperty("id"))
            obj.id = ApiClient.convertToType(data["id"], "Number");
          if (data.hasOwnProperty("description"))
            obj.description = ApiClient.convertToType(data["description"], "String");
          if (data.hasOwnProperty("events"))
            obj.events = ApiClient.convertToType(data["events"], ["String"]);
          if (data.hasOwnProperty("type"))
            obj.type = ApiClient.convertToType(data["type"], "String");
          if (data.hasOwnProperty("createdAt"))
            obj.createdAt = ApiClient.convertToType(data["createdAt"], "String");
          if (data.hasOwnProperty("modifiedAt"))
            obj.modifiedAt = ApiClient.convertToType(data["modifiedAt"], "String");
        }
        return obj;
      };
      exports2.prototype.url = void 0;
      exports2.prototype.id = void 0;
      exports2.prototype.description = void 0;
      exports2.prototype.events = void 0;
      exports2.prototype.type = void 0;
      exports2.prototype.createdAt = void 0;
      exports2.prototype.modifiedAt = void 0;
      exports2.TypeEnum = {
        marketing: "marketing",
        transac: "transac"
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/GetWebhooks.js
var require_GetWebhooks = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/GetWebhooks.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.GetWebhooks = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(webhooks) {
        this.webhooks = webhooks;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("webhooks"))
            obj.webhooks = ApiClient.convertToType(data["webhooks"], [Object]);
        }
        return obj;
      };
      exports2.prototype.webhooks = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/InlineResponse200.js
var require_InlineResponse200 = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/InlineResponse200.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.InlineResponse200 = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(id) {
        this.id = id;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("id"))
            obj.id = ApiClient.convertToType(data["id"], "String");
        }
        return obj;
      };
      exports2.prototype.id = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/InlineResponse201.js
var require_InlineResponse201 = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/InlineResponse201.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.InlineResponse201 = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(id) {
        this.id = id;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("id"))
            obj.id = ApiClient.convertToType(data["id"], "String");
        }
        return obj;
      };
      exports2.prototype.id = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/InlineResponse2011.js
var require_InlineResponse2011 = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/InlineResponse2011.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.InlineResponse2011 = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(id) {
        this.id = id;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("id"))
            obj.id = ApiClient.convertToType(data["id"], "String");
        }
        return obj;
      };
      exports2.prototype.id = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/ManageIp.js
var require_ManageIp = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/ManageIp.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.ManageIp = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("ip"))
            obj.ip = ApiClient.convertToType(data["ip"], "String");
        }
        return obj;
      };
      exports2.prototype.ip = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/MasterDetailsResponseBillingInfoAddress.js
var require_MasterDetailsResponseBillingInfoAddress = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/MasterDetailsResponseBillingInfoAddress.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.MasterDetailsResponseBillingInfoAddress = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("streetAddress"))
            obj.streetAddress = ApiClient.convertToType(data["streetAddress"], "String");
          if (data.hasOwnProperty("locality"))
            obj.locality = ApiClient.convertToType(data["locality"], "String");
          if (data.hasOwnProperty("postalCode"))
            obj.postalCode = ApiClient.convertToType(data["postalCode"], "String");
          if (data.hasOwnProperty("stateCode"))
            obj.stateCode = ApiClient.convertToType(data["stateCode"], "String");
          if (data.hasOwnProperty("countryCode"))
            obj.countryCode = ApiClient.convertToType(data["countryCode"], "String");
        }
        return obj;
      };
      exports2.prototype.streetAddress = void 0;
      exports2.prototype.locality = void 0;
      exports2.prototype.postalCode = void 0;
      exports2.prototype.stateCode = void 0;
      exports2.prototype.countryCode = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/MasterDetailsResponseBillingInfoName.js
var require_MasterDetailsResponseBillingInfoName = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/MasterDetailsResponseBillingInfoName.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.MasterDetailsResponseBillingInfoName = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("givenName"))
            obj.givenName = ApiClient.convertToType(data["givenName"], "String");
          if (data.hasOwnProperty("familyName"))
            obj.familyName = ApiClient.convertToType(data["familyName"], "String");
        }
        return obj;
      };
      exports2.prototype.givenName = void 0;
      exports2.prototype.familyName = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/MasterDetailsResponseBillingInfo.js
var require_MasterDetailsResponseBillingInfo = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/MasterDetailsResponseBillingInfo.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/MasterDetailsResponseBillingInfoAddress", "model/MasterDetailsResponseBillingInfoName"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_MasterDetailsResponseBillingInfoAddress(), require_MasterDetailsResponseBillingInfoName());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.MasterDetailsResponseBillingInfo = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.MasterDetailsResponseBillingInfoAddress, root.SibApiV3Sdk.MasterDetailsResponseBillingInfoName);
      }
    })(exports, function(ApiClient, MasterDetailsResponseBillingInfoAddress, MasterDetailsResponseBillingInfoName) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("email"))
            obj.email = ApiClient.convertToType(data["email"], "String");
          if (data.hasOwnProperty("companyName"))
            obj.companyName = ApiClient.convertToType(data["companyName"], "String");
          if (data.hasOwnProperty("name"))
            obj.name = MasterDetailsResponseBillingInfoName.constructFromObject(data["name"]);
          if (data.hasOwnProperty("address"))
            obj.address = MasterDetailsResponseBillingInfoAddress.constructFromObject(data["address"]);
        }
        return obj;
      };
      exports2.prototype.email = void 0;
      exports2.prototype.companyName = void 0;
      exports2.prototype.name = void 0;
      exports2.prototype.address = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/MasterDetailsResponsePlanInfoFeatures.js
var require_MasterDetailsResponsePlanInfoFeatures = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/MasterDetailsResponsePlanInfoFeatures.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.MasterDetailsResponsePlanInfoFeatures = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
          if (data.hasOwnProperty("unitValue"))
            obj.unitValue = ApiClient.convertToType(data["unitValue"], "String");
          if (data.hasOwnProperty("quantity"))
            obj.quantity = ApiClient.convertToType(data["quantity"], "Number");
          if (data.hasOwnProperty("used"))
            obj.used = ApiClient.convertToType(data["used"], "Number");
          if (data.hasOwnProperty("remaining"))
            obj.remaining = ApiClient.convertToType(data["remaining"], "Number");
        }
        return obj;
      };
      exports2.prototype.name = void 0;
      exports2.prototype.unitValue = void 0;
      exports2.prototype.quantity = void 0;
      exports2.prototype.used = void 0;
      exports2.prototype.remaining = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/MasterDetailsResponsePlanInfo.js
var require_MasterDetailsResponsePlanInfo = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/MasterDetailsResponsePlanInfo.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/MasterDetailsResponsePlanInfoFeatures"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_MasterDetailsResponsePlanInfoFeatures());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.MasterDetailsResponsePlanInfo = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.MasterDetailsResponsePlanInfoFeatures);
      }
    })(exports, function(ApiClient, MasterDetailsResponsePlanInfoFeatures) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("currencyCode"))
            obj.currencyCode = ApiClient.convertToType(data["currencyCode"], "String");
          if (data.hasOwnProperty("nextBillingAt"))
            obj.nextBillingAt = ApiClient.convertToType(data["nextBillingAt"], "Number");
          if (data.hasOwnProperty("price"))
            obj.price = ApiClient.convertToType(data["price"], "Number");
          if (data.hasOwnProperty("planPeriod"))
            obj.planPeriod = ApiClient.convertToType(data["planPeriod"], "String");
          if (data.hasOwnProperty("subAccounts"))
            obj.subAccounts = ApiClient.convertToType(data["subAccounts"], "Number");
          if (data.hasOwnProperty("features"))
            obj.features = ApiClient.convertToType(data["features"], [MasterDetailsResponsePlanInfoFeatures]);
        }
        return obj;
      };
      exports2.prototype.currencyCode = void 0;
      exports2.prototype.nextBillingAt = void 0;
      exports2.prototype.price = void 0;
      exports2.prototype.planPeriod = void 0;
      exports2.prototype.subAccounts = void 0;
      exports2.prototype.features = void 0;
      exports2.PlanPeriodEnum = {
        month: "month",
        year: "year"
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/MasterDetailsResponse.js
var require_MasterDetailsResponse = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/MasterDetailsResponse.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/MasterDetailsResponseBillingInfo", "model/MasterDetailsResponsePlanInfo"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_MasterDetailsResponseBillingInfo(), require_MasterDetailsResponsePlanInfo());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.MasterDetailsResponse = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.MasterDetailsResponseBillingInfo, root.SibApiV3Sdk.MasterDetailsResponsePlanInfo);
      }
    })(exports, function(ApiClient, MasterDetailsResponseBillingInfo, MasterDetailsResponsePlanInfo) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("email"))
            obj.email = ApiClient.convertToType(data["email"], "String");
          if (data.hasOwnProperty("companyName"))
            obj.companyName = ApiClient.convertToType(data["companyName"], "String");
          if (data.hasOwnProperty("id"))
            obj.id = ApiClient.convertToType(data["id"], "Number");
          if (data.hasOwnProperty("currencyCode"))
            obj.currencyCode = ApiClient.convertToType(data["currencyCode"], "String");
          if (data.hasOwnProperty("timezone"))
            obj.timezone = ApiClient.convertToType(data["timezone"], "String");
          if (data.hasOwnProperty("billingInfo"))
            obj.billingInfo = MasterDetailsResponseBillingInfo.constructFromObject(data["billingInfo"]);
          if (data.hasOwnProperty("planInfo"))
            obj.planInfo = MasterDetailsResponsePlanInfo.constructFromObject(data["planInfo"]);
        }
        return obj;
      };
      exports2.prototype.email = void 0;
      exports2.prototype.companyName = void 0;
      exports2.prototype.id = void 0;
      exports2.prototype.currencyCode = void 0;
      exports2.prototype.timezone = void 0;
      exports2.prototype.billingInfo = void 0;
      exports2.prototype.planInfo = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/Note.js
var require_Note = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/Note.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.Note = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("id"))
            obj.id = ApiClient.convertToType(data["id"], "String");
          if (data.hasOwnProperty("text"))
            obj.text = ApiClient.convertToType(data["text"], "String");
          if (data.hasOwnProperty("contactIds"))
            obj.contactIds = ApiClient.convertToType(data["contactIds"], ["Number"]);
          if (data.hasOwnProperty("dealIds"))
            obj.dealIds = ApiClient.convertToType(data["dealIds"], ["String"]);
          if (data.hasOwnProperty("authorId"))
            obj.authorId = ApiClient.convertToType(data["authorId"], Object);
          if (data.hasOwnProperty("createdAt"))
            obj.createdAt = ApiClient.convertToType(data["createdAt"], "Date");
          if (data.hasOwnProperty("updatedAt"))
            obj.updatedAt = ApiClient.convertToType(data["updatedAt"], "Date");
        }
        return obj;
      };
      exports2.prototype.id = void 0;
      exports2.prototype.text = void 0;
      exports2.prototype.contactIds = void 0;
      exports2.prototype.dealIds = void 0;
      exports2.prototype.authorId = void 0;
      exports2.prototype.createdAt = void 0;
      exports2.prototype.updatedAt = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/NoteData.js
var require_NoteData = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/NoteData.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.NoteData = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("text"))
            obj.text = ApiClient.convertToType(data["text"], "String");
          if (data.hasOwnProperty("contactIds"))
            obj.contactIds = ApiClient.convertToType(data["contactIds"], ["Number"]);
          if (data.hasOwnProperty("dealIds"))
            obj.dealIds = ApiClient.convertToType(data["dealIds"], ["String"]);
        }
        return obj;
      };
      exports2.prototype.text = void 0;
      exports2.prototype.contactIds = void 0;
      exports2.prototype.dealIds = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/NoteId.js
var require_NoteId = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/NoteId.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.NoteId = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("id"))
            obj.id = ApiClient.convertToType(data["id"], "String");
        }
        return obj;
      };
      exports2.prototype.id = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/NoteList.js
var require_NoteList = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/NoteList.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/Note"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_Note());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.NoteList = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.Note);
      }
    })(exports, function(ApiClient, Note) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          ApiClient.constructFromObject(data, obj, "Note");
        }
        return obj;
      };
      Object.setPrototypeOf(exports2.prototype, new Array());
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/PipelineStage.js
var require_PipelineStage = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/PipelineStage.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.PipelineStage = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("id"))
            obj.id = ApiClient.convertToType(data["id"], "String");
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
        }
        return obj;
      };
      exports2.prototype.id = void 0;
      exports2.prototype.name = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/Pipeline.js
var require_Pipeline = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/Pipeline.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/PipelineStage"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_PipelineStage());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.Pipeline = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.PipelineStage);
      }
    })(exports, function(ApiClient, PipelineStage) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("stages"))
            obj.stages = ApiClient.convertToType(data["stages"], [PipelineStage]);
        }
        return obj;
      };
      exports2.prototype.stages = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/PostContactInfoContacts.js
var require_PostContactInfoContacts = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/PostContactInfoContacts.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.PostContactInfoContacts = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("success"))
            obj.success = ApiClient.convertToType(data["success"], ["String"]);
          if (data.hasOwnProperty("failure"))
            obj.failure = ApiClient.convertToType(data["failure"], ["String"]);
          if (data.hasOwnProperty("total"))
            obj.total = ApiClient.convertToType(data["total"], "Number");
          if (data.hasOwnProperty("processId"))
            obj.processId = ApiClient.convertToType(data["processId"], "Number");
        }
        return obj;
      };
      exports2.prototype.success = void 0;
      exports2.prototype.failure = void 0;
      exports2.prototype.total = void 0;
      exports2.prototype.processId = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/PostContactInfo.js
var require_PostContactInfo = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/PostContactInfo.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/PostContactInfoContacts"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_PostContactInfoContacts());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.PostContactInfo = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.PostContactInfoContacts);
      }
    })(exports, function(ApiClient, PostContactInfoContacts) {
      "use strict";
      var exports2 = function(contacts) {
        this.contacts = contacts;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("contacts"))
            obj.contacts = PostContactInfoContacts.constructFromObject(data["contacts"]);
        }
        return obj;
      };
      exports2.prototype.contacts = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/PostSendFailed.js
var require_PostSendFailed = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/PostSendFailed.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.PostSendFailed = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(code, message) {
        this.code = code;
        this.message = message;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("code"))
            obj.code = ApiClient.convertToType(data["code"], "Number");
          if (data.hasOwnProperty("message"))
            obj.message = ApiClient.convertToType(data["message"], "String");
          if (data.hasOwnProperty("unexistingEmails"))
            obj.unexistingEmails = ApiClient.convertToType(data["unexistingEmails"], ["String"]);
          if (data.hasOwnProperty("withoutListEmails"))
            obj.withoutListEmails = ApiClient.convertToType(data["withoutListEmails"], ["String"]);
          if (data.hasOwnProperty("blackListedEmails"))
            obj.blackListedEmails = ApiClient.convertToType(data["blackListedEmails"], ["String"]);
        }
        return obj;
      };
      exports2.prototype.code = void 0;
      exports2.prototype.message = void 0;
      exports2.prototype.unexistingEmails = void 0;
      exports2.prototype.withoutListEmails = void 0;
      exports2.prototype.blackListedEmails = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/PostSendSmsTestFailed.js
var require_PostSendSmsTestFailed = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/PostSendSmsTestFailed.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.PostSendSmsTestFailed = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(code, message) {
        this.code = code;
        this.message = message;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("code"))
            obj.code = ApiClient.convertToType(data["code"], "Number");
          if (data.hasOwnProperty("message"))
            obj.message = ApiClient.convertToType(data["message"], "String");
          if (data.hasOwnProperty("unexistingSms"))
            obj.unexistingSms = ApiClient.convertToType(data["unexistingSms"], ["String"]);
          if (data.hasOwnProperty("withoutListSms"))
            obj.withoutListSms = ApiClient.convertToType(data["withoutListSms"], ["String"]);
        }
        return obj;
      };
      exports2.prototype.code = void 0;
      exports2.prototype.message = void 0;
      exports2.prototype.unexistingSms = void 0;
      exports2.prototype.withoutListSms = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/RemainingCreditModelChild.js
var require_RemainingCreditModelChild = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/RemainingCreditModelChild.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.RemainingCreditModelChild = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(sms, email) {
        this.sms = sms;
        this.email = email;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("sms"))
            obj.sms = ApiClient.convertToType(data["sms"], "Number");
          if (data.hasOwnProperty("email"))
            obj.email = ApiClient.convertToType(data["email"], "Number");
        }
        return obj;
      };
      exports2.prototype.sms = void 0;
      exports2.prototype.email = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/RemainingCreditModelReseller.js
var require_RemainingCreditModelReseller = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/RemainingCreditModelReseller.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.RemainingCreditModelReseller = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(sms, email) {
        this.sms = sms;
        this.email = email;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("sms"))
            obj.sms = ApiClient.convertToType(data["sms"], "Number");
          if (data.hasOwnProperty("email"))
            obj.email = ApiClient.convertToType(data["email"], "Number");
        }
        return obj;
      };
      exports2.prototype.sms = void 0;
      exports2.prototype.email = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/RemainingCreditModel.js
var require_RemainingCreditModel = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/RemainingCreditModel.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/RemainingCreditModelChild", "model/RemainingCreditModelReseller"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_RemainingCreditModelChild(), require_RemainingCreditModelReseller());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.RemainingCreditModel = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.RemainingCreditModelChild, root.SibApiV3Sdk.RemainingCreditModelReseller);
      }
    })(exports, function(ApiClient, RemainingCreditModelChild, RemainingCreditModelReseller) {
      "use strict";
      var exports2 = function(child, reseller) {
        this.child = child;
        this.reseller = reseller;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("child"))
            obj.child = RemainingCreditModelChild.constructFromObject(data["child"]);
          if (data.hasOwnProperty("reseller"))
            obj.reseller = RemainingCreditModelReseller.constructFromObject(data["reseller"]);
        }
        return obj;
      };
      exports2.prototype.child = void 0;
      exports2.prototype.reseller = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/RemoveContactFromList.js
var require_RemoveContactFromList = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/RemoveContactFromList.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.RemoveContactFromList = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("emails"))
            obj.emails = ApiClient.convertToType(data["emails"], ["String"]);
          if (data.hasOwnProperty("ids"))
            obj.ids = ApiClient.convertToType(data["ids"], ["Number"]);
          if (data.hasOwnProperty("all"))
            obj.all = ApiClient.convertToType(data["all"], "Boolean");
        }
        return obj;
      };
      exports2.prototype.emails = void 0;
      exports2.prototype.ids = void 0;
      exports2.prototype.all = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/RemoveCredits.js
var require_RemoveCredits = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/RemoveCredits.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.RemoveCredits = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("sms"))
            obj.sms = ApiClient.convertToType(data["sms"], "Number");
          if (data.hasOwnProperty("email"))
            obj.email = ApiClient.convertToType(data["email"], "Number");
        }
        return obj;
      };
      exports2.prototype.sms = void 0;
      exports2.prototype.email = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/RequestContactExportCustomContactFilter.js
var require_RequestContactExportCustomContactFilter = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/RequestContactExportCustomContactFilter.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.RequestContactExportCustomContactFilter = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("actionForContacts"))
            obj.actionForContacts = ApiClient.convertToType(data["actionForContacts"], "String");
          if (data.hasOwnProperty("actionForEmailCampaigns"))
            obj.actionForEmailCampaigns = ApiClient.convertToType(data["actionForEmailCampaigns"], "String");
          if (data.hasOwnProperty("actionForSmsCampaigns"))
            obj.actionForSmsCampaigns = ApiClient.convertToType(data["actionForSmsCampaigns"], "String");
          if (data.hasOwnProperty("listId"))
            obj.listId = ApiClient.convertToType(data["listId"], "Number");
          if (data.hasOwnProperty("emailCampaignId"))
            obj.emailCampaignId = ApiClient.convertToType(data["emailCampaignId"], "Number");
          if (data.hasOwnProperty("smsCampaignId"))
            obj.smsCampaignId = ApiClient.convertToType(data["smsCampaignId"], "Number");
        }
        return obj;
      };
      exports2.prototype.actionForContacts = void 0;
      exports2.prototype.actionForEmailCampaigns = void 0;
      exports2.prototype.actionForSmsCampaigns = void 0;
      exports2.prototype.listId = void 0;
      exports2.prototype.emailCampaignId = void 0;
      exports2.prototype.smsCampaignId = void 0;
      exports2.ActionForContactsEnum = {
        allContacts: "allContacts",
        subscribed: "subscribed",
        unsubscribed: "unsubscribed",
        unsubscribedPerList: "unsubscribedPerList"
      };
      exports2.ActionForEmailCampaignsEnum = {
        openers: "openers",
        nonOpeners: "nonOpeners",
        clickers: "clickers",
        nonClickers: "nonClickers",
        unsubscribed: "unsubscribed",
        hardBounces: "hardBounces",
        softBounces: "softBounces"
      };
      exports2.ActionForSmsCampaignsEnum = {
        hardBounces: "hardBounces",
        softBounces: "softBounces",
        unsubscribed: "unsubscribed"
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/RequestContactExport.js
var require_RequestContactExport = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/RequestContactExport.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/RequestContactExportCustomContactFilter"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_RequestContactExportCustomContactFilter());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.RequestContactExport = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.RequestContactExportCustomContactFilter);
      }
    })(exports, function(ApiClient, RequestContactExportCustomContactFilter) {
      "use strict";
      var exports2 = function(customContactFilter) {
        this.customContactFilter = customContactFilter;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("exportAttributes"))
            obj.exportAttributes = ApiClient.convertToType(data["exportAttributes"], ["String"]);
          if (data.hasOwnProperty("customContactFilter"))
            obj.customContactFilter = RequestContactExportCustomContactFilter.constructFromObject(data["customContactFilter"]);
          if (data.hasOwnProperty("notifyUrl"))
            obj.notifyUrl = ApiClient.convertToType(data["notifyUrl"], "String");
        }
        return obj;
      };
      exports2.prototype.exportAttributes = void 0;
      exports2.prototype.customContactFilter = void 0;
      exports2.prototype.notifyUrl = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/RequestContactImportNewList.js
var require_RequestContactImportNewList = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/RequestContactImportNewList.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.RequestContactImportNewList = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("listName"))
            obj.listName = ApiClient.convertToType(data["listName"], "String");
          if (data.hasOwnProperty("folderId"))
            obj.folderId = ApiClient.convertToType(data["folderId"], "Number");
        }
        return obj;
      };
      exports2.prototype.listName = void 0;
      exports2.prototype.folderId = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/RequestContactImport.js
var require_RequestContactImport = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/RequestContactImport.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/RequestContactImportNewList"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_RequestContactImportNewList());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.RequestContactImport = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.RequestContactImportNewList);
      }
    })(exports, function(ApiClient, RequestContactImportNewList) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("fileUrl"))
            obj.fileUrl = ApiClient.convertToType(data["fileUrl"], "String");
          if (data.hasOwnProperty("fileBody"))
            obj.fileBody = ApiClient.convertToType(data["fileBody"], "String");
          if (data.hasOwnProperty("jsonBody"))
            obj.jsonBody = ApiClient.convertToType(data["jsonBody"], [{ "String": Object }]);
          if (data.hasOwnProperty("listIds"))
            obj.listIds = ApiClient.convertToType(data["listIds"], ["Number"]);
          if (data.hasOwnProperty("notifyUrl"))
            obj.notifyUrl = ApiClient.convertToType(data["notifyUrl"], "String");
          if (data.hasOwnProperty("newList"))
            obj.newList = RequestContactImportNewList.constructFromObject(data["newList"]);
          if (data.hasOwnProperty("emailBlacklist"))
            obj.emailBlacklist = ApiClient.convertToType(data["emailBlacklist"], "Boolean");
          if (data.hasOwnProperty("smsBlacklist"))
            obj.smsBlacklist = ApiClient.convertToType(data["smsBlacklist"], "Boolean");
          if (data.hasOwnProperty("updateExistingContacts"))
            obj.updateExistingContacts = ApiClient.convertToType(data["updateExistingContacts"], "Boolean");
          if (data.hasOwnProperty("emptyContactsAttributes"))
            obj.emptyContactsAttributes = ApiClient.convertToType(data["emptyContactsAttributes"], "Boolean");
        }
        return obj;
      };
      exports2.prototype.fileUrl = void 0;
      exports2.prototype.fileBody = void 0;
      exports2.prototype.jsonBody = void 0;
      exports2.prototype.listIds = void 0;
      exports2.prototype.notifyUrl = void 0;
      exports2.prototype.newList = void 0;
      exports2.prototype.emailBlacklist = false;
      exports2.prototype.smsBlacklist = false;
      exports2.prototype.updateExistingContacts = true;
      exports2.prototype.emptyContactsAttributes = false;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/RequestSmsRecipientExport.js
var require_RequestSmsRecipientExport = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/RequestSmsRecipientExport.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.RequestSmsRecipientExport = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(recipientsType) {
        this.recipientsType = recipientsType;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("notifyURL"))
            obj.notifyURL = ApiClient.convertToType(data["notifyURL"], "String");
          if (data.hasOwnProperty("recipientsType"))
            obj.recipientsType = ApiClient.convertToType(data["recipientsType"], "String");
        }
        return obj;
      };
      exports2.prototype.notifyURL = void 0;
      exports2.prototype.recipientsType = void 0;
      exports2.RecipientsTypeEnum = {
        all: "all",
        delivered: "delivered",
        answered: "answered",
        softBounces: "softBounces",
        hardBounces: "hardBounces",
        unsubscribed: "unsubscribed"
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/ScheduleSmtpEmail.js
var require_ScheduleSmtpEmail = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/ScheduleSmtpEmail.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.ScheduleSmtpEmail = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("messageId"))
            obj.messageId = ApiClient.convertToType(data["messageId"], "String");
          if (data.hasOwnProperty("messageIds"))
            obj.messageIds = ApiClient.convertToType(data["messageIds"], ["String"]);
          if (data.hasOwnProperty("batchId"))
            obj.batchId = ApiClient.convertToType(data["batchId"], "String");
        }
        return obj;
      };
      exports2.prototype.messageId = void 0;
      exports2.prototype.messageIds = void 0;
      exports2.prototype.batchId = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/SendReportEmail.js
var require_SendReportEmail = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/SendReportEmail.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.SendReportEmail = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(to, body) {
        this.to = to;
        this.body = body;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("to"))
            obj.to = ApiClient.convertToType(data["to"], ["String"]);
          if (data.hasOwnProperty("body"))
            obj.body = ApiClient.convertToType(data["body"], "String");
        }
        return obj;
      };
      exports2.prototype.to = void 0;
      exports2.prototype.body = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/SendReport.js
var require_SendReport = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/SendReport.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/SendReportEmail"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_SendReportEmail());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.SendReport = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.SendReportEmail);
      }
    })(exports, function(ApiClient, SendReportEmail) {
      "use strict";
      var exports2 = function(email) {
        this.email = email;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("language"))
            obj.language = ApiClient.convertToType(data["language"], "String");
          if (data.hasOwnProperty("email"))
            obj.email = SendReportEmail.constructFromObject(data["email"]);
        }
        return obj;
      };
      exports2.prototype.language = "fr";
      exports2.prototype.email = void 0;
      exports2.LanguageEnum = {
        fr: "fr",
        es: "es",
        pt: "pt",
        it: "it",
        de: "de",
        en: "en"
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/SendSms.js
var require_SendSms = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/SendSms.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.SendSms = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(reference, messageId) {
        this.reference = reference;
        this.messageId = messageId;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("reference"))
            obj.reference = ApiClient.convertToType(data["reference"], "String");
          if (data.hasOwnProperty("messageId"))
            obj.messageId = ApiClient.convertToType(data["messageId"], "Number");
          if (data.hasOwnProperty("smsCount"))
            obj.smsCount = ApiClient.convertToType(data["smsCount"], "Number");
          if (data.hasOwnProperty("usedCredits"))
            obj.usedCredits = ApiClient.convertToType(data["usedCredits"], "Number");
          if (data.hasOwnProperty("remainingCredits"))
            obj.remainingCredits = ApiClient.convertToType(data["remainingCredits"], "Number");
        }
        return obj;
      };
      exports2.prototype.reference = void 0;
      exports2.prototype.messageId = void 0;
      exports2.prototype.smsCount = void 0;
      exports2.prototype.usedCredits = void 0;
      exports2.prototype.remainingCredits = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/SendSmtpEmailAttachment.js
var require_SendSmtpEmailAttachment = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/SendSmtpEmailAttachment.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.SendSmtpEmailAttachment = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("url"))
            obj.url = ApiClient.convertToType(data["url"], "String");
          if (data.hasOwnProperty("content"))
            obj.content = ApiClient.convertToType(data["content"], "Blob");
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
        }
        return obj;
      };
      exports2.prototype.url = void 0;
      exports2.prototype.content = void 0;
      exports2.prototype.name = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/SendSmtpEmailBcc.js
var require_SendSmtpEmailBcc = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/SendSmtpEmailBcc.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.SendSmtpEmailBcc = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(email) {
        this.email = email;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("email"))
            obj.email = ApiClient.convertToType(data["email"], "String");
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
        }
        return obj;
      };
      exports2.prototype.email = void 0;
      exports2.prototype.name = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/SendSmtpEmailCc.js
var require_SendSmtpEmailCc = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/SendSmtpEmailCc.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.SendSmtpEmailCc = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(email) {
        this.email = email;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("email"))
            obj.email = ApiClient.convertToType(data["email"], "String");
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
        }
        return obj;
      };
      exports2.prototype.email = void 0;
      exports2.prototype.name = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/SendSmtpEmailReplyTo1.js
var require_SendSmtpEmailReplyTo1 = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/SendSmtpEmailReplyTo1.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.SendSmtpEmailReplyTo1 = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(email) {
        this.email = email;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("email"))
            obj.email = ApiClient.convertToType(data["email"], "String");
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
        }
        return obj;
      };
      exports2.prototype.email = void 0;
      exports2.prototype.name = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/SendSmtpEmailTo1.js
var require_SendSmtpEmailTo1 = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/SendSmtpEmailTo1.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.SendSmtpEmailTo1 = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(email) {
        this.email = email;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("email"))
            obj.email = ApiClient.convertToType(data["email"], "String");
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
        }
        return obj;
      };
      exports2.prototype.email = void 0;
      exports2.prototype.name = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/SendSmtpEmailMessageVersions.js
var require_SendSmtpEmailMessageVersions = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/SendSmtpEmailMessageVersions.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/SendSmtpEmailBcc", "model/SendSmtpEmailCc", "model/SendSmtpEmailReplyTo1", "model/SendSmtpEmailTo1"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_SendSmtpEmailBcc(), require_SendSmtpEmailCc(), require_SendSmtpEmailReplyTo1(), require_SendSmtpEmailTo1());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.SendSmtpEmailMessageVersions = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.SendSmtpEmailBcc, root.SibApiV3Sdk.SendSmtpEmailCc, root.SibApiV3Sdk.SendSmtpEmailReplyTo1, root.SibApiV3Sdk.SendSmtpEmailTo1);
      }
    })(exports, function(ApiClient, SendSmtpEmailBcc, SendSmtpEmailCc, SendSmtpEmailReplyTo1, SendSmtpEmailTo1) {
      "use strict";
      var exports2 = function(to) {
        this.to = to;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("to"))
            obj.to = ApiClient.convertToType(data["to"], [SendSmtpEmailTo1]);
          if (data.hasOwnProperty("params"))
            obj.params = ApiClient.convertToType(data["params"], { "String": Object });
          if (data.hasOwnProperty("bcc"))
            obj.bcc = ApiClient.convertToType(data["bcc"], [SendSmtpEmailBcc]);
          if (data.hasOwnProperty("cc"))
            obj.cc = ApiClient.convertToType(data["cc"], [SendSmtpEmailCc]);
          if (data.hasOwnProperty("replyTo"))
            obj.replyTo = SendSmtpEmailReplyTo1.constructFromObject(data["replyTo"]);
          if (data.hasOwnProperty("subject"))
            obj.subject = ApiClient.convertToType(data["subject"], "String");
        }
        return obj;
      };
      exports2.prototype.to = void 0;
      exports2.prototype.params = void 0;
      exports2.prototype.bcc = void 0;
      exports2.prototype.cc = void 0;
      exports2.prototype.replyTo = void 0;
      exports2.prototype.subject = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/SendSmtpEmailReplyTo.js
var require_SendSmtpEmailReplyTo = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/SendSmtpEmailReplyTo.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.SendSmtpEmailReplyTo = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(email) {
        this.email = email;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("email"))
            obj.email = ApiClient.convertToType(data["email"], "String");
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
        }
        return obj;
      };
      exports2.prototype.email = void 0;
      exports2.prototype.name = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/SendSmtpEmailSender.js
var require_SendSmtpEmailSender = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/SendSmtpEmailSender.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.SendSmtpEmailSender = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
          if (data.hasOwnProperty("email"))
            obj.email = ApiClient.convertToType(data["email"], "String");
          if (data.hasOwnProperty("id"))
            obj.id = ApiClient.convertToType(data["id"], "Number");
        }
        return obj;
      };
      exports2.prototype.name = void 0;
      exports2.prototype.email = void 0;
      exports2.prototype.id = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/SendSmtpEmailTo.js
var require_SendSmtpEmailTo = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/SendSmtpEmailTo.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.SendSmtpEmailTo = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(email) {
        this.email = email;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("email"))
            obj.email = ApiClient.convertToType(data["email"], "String");
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
        }
        return obj;
      };
      exports2.prototype.email = void 0;
      exports2.prototype.name = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/SendSmtpEmail.js
var require_SendSmtpEmail = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/SendSmtpEmail.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/SendSmtpEmailAttachment", "model/SendSmtpEmailBcc", "model/SendSmtpEmailCc", "model/SendSmtpEmailMessageVersions", "model/SendSmtpEmailReplyTo", "model/SendSmtpEmailSender", "model/SendSmtpEmailTo"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_SendSmtpEmailAttachment(), require_SendSmtpEmailBcc(), require_SendSmtpEmailCc(), require_SendSmtpEmailMessageVersions(), require_SendSmtpEmailReplyTo(), require_SendSmtpEmailSender(), require_SendSmtpEmailTo());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.SendSmtpEmail = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.SendSmtpEmailAttachment, root.SibApiV3Sdk.SendSmtpEmailBcc, root.SibApiV3Sdk.SendSmtpEmailCc, root.SibApiV3Sdk.SendSmtpEmailMessageVersions, root.SibApiV3Sdk.SendSmtpEmailReplyTo, root.SibApiV3Sdk.SendSmtpEmailSender, root.SibApiV3Sdk.SendSmtpEmailTo);
      }
    })(exports, function(ApiClient, SendSmtpEmailAttachment, SendSmtpEmailBcc, SendSmtpEmailCc, SendSmtpEmailMessageVersions, SendSmtpEmailReplyTo, SendSmtpEmailSender, SendSmtpEmailTo) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("sender"))
            obj.sender = SendSmtpEmailSender.constructFromObject(data["sender"]);
          if (data.hasOwnProperty("to"))
            obj.to = ApiClient.convertToType(data["to"], [SendSmtpEmailTo]);
          if (data.hasOwnProperty("bcc"))
            obj.bcc = ApiClient.convertToType(data["bcc"], [SendSmtpEmailBcc]);
          if (data.hasOwnProperty("cc"))
            obj.cc = ApiClient.convertToType(data["cc"], [SendSmtpEmailCc]);
          if (data.hasOwnProperty("htmlContent"))
            obj.htmlContent = ApiClient.convertToType(data["htmlContent"], "String");
          if (data.hasOwnProperty("textContent"))
            obj.textContent = ApiClient.convertToType(data["textContent"], "String");
          if (data.hasOwnProperty("subject"))
            obj.subject = ApiClient.convertToType(data["subject"], "String");
          if (data.hasOwnProperty("replyTo"))
            obj.replyTo = SendSmtpEmailReplyTo.constructFromObject(data["replyTo"]);
          if (data.hasOwnProperty("attachment"))
            obj.attachment = ApiClient.convertToType(data["attachment"], [SendSmtpEmailAttachment]);
          if (data.hasOwnProperty("headers"))
            obj.headers = ApiClient.convertToType(data["headers"], Object);
          if (data.hasOwnProperty("templateId"))
            obj.templateId = ApiClient.convertToType(data["templateId"], "Number");
          if (data.hasOwnProperty("params"))
            obj.params = ApiClient.convertToType(data["params"], Object);
          if (data.hasOwnProperty("messageVersions"))
            obj.messageVersions = ApiClient.convertToType(data["messageVersions"], [SendSmtpEmailMessageVersions]);
          if (data.hasOwnProperty("tags"))
            obj.tags = ApiClient.convertToType(data["tags"], ["String"]);
          if (data.hasOwnProperty("scheduledAt"))
            obj.scheduledAt = ApiClient.convertToType(data["scheduledAt"], "Date");
          if (data.hasOwnProperty("batchId"))
            obj.batchId = ApiClient.convertToType(data["batchId"], "String");
        }
        return obj;
      };
      exports2.prototype.sender = void 0;
      exports2.prototype.to = void 0;
      exports2.prototype.bcc = void 0;
      exports2.prototype.cc = void 0;
      exports2.prototype.htmlContent = void 0;
      exports2.prototype.textContent = void 0;
      exports2.prototype.subject = void 0;
      exports2.prototype.replyTo = void 0;
      exports2.prototype.attachment = void 0;
      exports2.prototype.headers = void 0;
      exports2.prototype.templateId = void 0;
      exports2.prototype.params = void 0;
      exports2.prototype.messageVersions = void 0;
      exports2.prototype.tags = void 0;
      exports2.prototype.scheduledAt = void 0;
      exports2.prototype.batchId = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/SendTestEmail.js
var require_SendTestEmail = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/SendTestEmail.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.SendTestEmail = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("emailTo"))
            obj.emailTo = ApiClient.convertToType(data["emailTo"], ["String"]);
        }
        return obj;
      };
      exports2.prototype.emailTo = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/SendTestSms.js
var require_SendTestSms = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/SendTestSms.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.SendTestSms = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("phoneNumber"))
            obj.phoneNumber = ApiClient.convertToType(data["phoneNumber"], "String");
        }
        return obj;
      };
      exports2.prototype.phoneNumber = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/SendTransacSms.js
var require_SendTransacSms = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/SendTransacSms.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.SendTransacSms = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(sender, recipient, content) {
        this.sender = sender;
        this.recipient = recipient;
        this.content = content;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("sender"))
            obj.sender = ApiClient.convertToType(data["sender"], "String");
          if (data.hasOwnProperty("recipient"))
            obj.recipient = ApiClient.convertToType(data["recipient"], "String");
          if (data.hasOwnProperty("content"))
            obj.content = ApiClient.convertToType(data["content"], "String");
          if (data.hasOwnProperty("type"))
            obj.type = ApiClient.convertToType(data["type"], "String");
          if (data.hasOwnProperty("tag"))
            obj.tag = ApiClient.convertToType(data["tag"], "String");
          if (data.hasOwnProperty("webUrl"))
            obj.webUrl = ApiClient.convertToType(data["webUrl"], "String");
          if (data.hasOwnProperty("unicodeEnabled"))
            obj.unicodeEnabled = ApiClient.convertToType(data["unicodeEnabled"], "Boolean");
        }
        return obj;
      };
      exports2.prototype.sender = void 0;
      exports2.prototype.recipient = void 0;
      exports2.prototype.content = void 0;
      exports2.prototype.type = "transactional";
      exports2.prototype.tag = void 0;
      exports2.prototype.webUrl = void 0;
      exports2.prototype.unicodeEnabled = false;
      exports2.TypeEnum = {
        transactional: "transactional",
        marketing: "marketing"
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/SsoTokenRequest.js
var require_SsoTokenRequest = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/SsoTokenRequest.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.SsoTokenRequest = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(id) {
        this.id = id;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("id"))
            obj.id = ApiClient.convertToType(data["id"], "Number");
          if (data.hasOwnProperty("email"))
            obj.email = ApiClient.convertToType(data["email"], "String");
        }
        return obj;
      };
      exports2.prototype.id = void 0;
      exports2.prototype.email = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/SubAccountDetailsResponsePlanInfoCreditsEmails.js
var require_SubAccountDetailsResponsePlanInfoCreditsEmails = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/SubAccountDetailsResponsePlanInfoCreditsEmails.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.SubAccountDetailsResponsePlanInfoCreditsEmails = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("quantity"))
            obj.quantity = ApiClient.convertToType(data["quantity"], "Number");
          if (data.hasOwnProperty("remaining"))
            obj.remaining = ApiClient.convertToType(data["remaining"], "Number");
        }
        return obj;
      };
      exports2.prototype.quantity = void 0;
      exports2.prototype.remaining = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/SubAccountDetailsResponsePlanInfoCredits.js
var require_SubAccountDetailsResponsePlanInfoCredits = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/SubAccountDetailsResponsePlanInfoCredits.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/SubAccountDetailsResponsePlanInfoCreditsEmails"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_SubAccountDetailsResponsePlanInfoCreditsEmails());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.SubAccountDetailsResponsePlanInfoCredits = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.SubAccountDetailsResponsePlanInfoCreditsEmails);
      }
    })(exports, function(ApiClient, SubAccountDetailsResponsePlanInfoCreditsEmails) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("sms"))
            obj.sms = ApiClient.convertToType(data["sms"], "Number");
          if (data.hasOwnProperty("emails"))
            obj.emails = SubAccountDetailsResponsePlanInfoCreditsEmails.constructFromObject(data["emails"]);
        }
        return obj;
      };
      exports2.prototype.sms = void 0;
      exports2.prototype.emails = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/SubAccountDetailsResponsePlanInfoFeaturesInbox.js
var require_SubAccountDetailsResponsePlanInfoFeaturesInbox = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/SubAccountDetailsResponsePlanInfoFeaturesInbox.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.SubAccountDetailsResponsePlanInfoFeaturesInbox = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("quantity"))
            obj.quantity = ApiClient.convertToType(data["quantity"], "Number");
          if (data.hasOwnProperty("remaining"))
            obj.remaining = ApiClient.convertToType(data["remaining"], "Number");
        }
        return obj;
      };
      exports2.prototype.quantity = void 0;
      exports2.prototype.remaining = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/SubAccountDetailsResponsePlanInfoFeaturesLandingPage.js
var require_SubAccountDetailsResponsePlanInfoFeaturesLandingPage = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/SubAccountDetailsResponsePlanInfoFeaturesLandingPage.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.SubAccountDetailsResponsePlanInfoFeaturesLandingPage = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("quantity"))
            obj.quantity = ApiClient.convertToType(data["quantity"], "Number");
          if (data.hasOwnProperty("remaining"))
            obj.remaining = ApiClient.convertToType(data["remaining"], "Number");
        }
        return obj;
      };
      exports2.prototype.quantity = void 0;
      exports2.prototype.remaining = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/SubAccountDetailsResponsePlanInfoFeaturesUsers.js
var require_SubAccountDetailsResponsePlanInfoFeaturesUsers = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/SubAccountDetailsResponsePlanInfoFeaturesUsers.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.SubAccountDetailsResponsePlanInfoFeaturesUsers = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("quantity"))
            obj.quantity = ApiClient.convertToType(data["quantity"], "Number");
          if (data.hasOwnProperty("remaining"))
            obj.remaining = ApiClient.convertToType(data["remaining"], "Number");
        }
        return obj;
      };
      exports2.prototype.quantity = void 0;
      exports2.prototype.remaining = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/SubAccountDetailsResponsePlanInfoFeatures.js
var require_SubAccountDetailsResponsePlanInfoFeatures = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/SubAccountDetailsResponsePlanInfoFeatures.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/SubAccountDetailsResponsePlanInfoFeaturesInbox", "model/SubAccountDetailsResponsePlanInfoFeaturesLandingPage", "model/SubAccountDetailsResponsePlanInfoFeaturesUsers"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_SubAccountDetailsResponsePlanInfoFeaturesInbox(), require_SubAccountDetailsResponsePlanInfoFeaturesLandingPage(), require_SubAccountDetailsResponsePlanInfoFeaturesUsers());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.SubAccountDetailsResponsePlanInfoFeatures = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.SubAccountDetailsResponsePlanInfoFeaturesInbox, root.SibApiV3Sdk.SubAccountDetailsResponsePlanInfoFeaturesLandingPage, root.SibApiV3Sdk.SubAccountDetailsResponsePlanInfoFeaturesUsers);
      }
    })(exports, function(ApiClient, SubAccountDetailsResponsePlanInfoFeaturesInbox, SubAccountDetailsResponsePlanInfoFeaturesLandingPage, SubAccountDetailsResponsePlanInfoFeaturesUsers) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("inbox"))
            obj.inbox = SubAccountDetailsResponsePlanInfoFeaturesInbox.constructFromObject(data["inbox"]);
          if (data.hasOwnProperty("landingPage"))
            obj.landingPage = SubAccountDetailsResponsePlanInfoFeaturesLandingPage.constructFromObject(data["landingPage"]);
          if (data.hasOwnProperty("users"))
            obj.users = SubAccountDetailsResponsePlanInfoFeaturesUsers.constructFromObject(data["users"]);
        }
        return obj;
      };
      exports2.prototype.inbox = void 0;
      exports2.prototype.landingPage = void 0;
      exports2.prototype.users = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/SubAccountDetailsResponsePlanInfo.js
var require_SubAccountDetailsResponsePlanInfo = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/SubAccountDetailsResponsePlanInfo.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/SubAccountDetailsResponsePlanInfoCredits", "model/SubAccountDetailsResponsePlanInfoFeatures"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_SubAccountDetailsResponsePlanInfoCredits(), require_SubAccountDetailsResponsePlanInfoFeatures());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.SubAccountDetailsResponsePlanInfo = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.SubAccountDetailsResponsePlanInfoCredits, root.SibApiV3Sdk.SubAccountDetailsResponsePlanInfoFeatures);
      }
    })(exports, function(ApiClient, SubAccountDetailsResponsePlanInfoCredits, SubAccountDetailsResponsePlanInfoFeatures) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("credits"))
            obj.credits = SubAccountDetailsResponsePlanInfoCredits.constructFromObject(data["credits"]);
          if (data.hasOwnProperty("features"))
            obj.features = SubAccountDetailsResponsePlanInfoFeatures.constructFromObject(data["features"]);
          if (data.hasOwnProperty("planType"))
            obj.planType = ApiClient.convertToType(data["planType"], "String");
        }
        return obj;
      };
      exports2.prototype.credits = void 0;
      exports2.prototype.features = void 0;
      exports2.prototype.planType = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/SubAccountDetailsResponse.js
var require_SubAccountDetailsResponse = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/SubAccountDetailsResponse.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/SubAccountDetailsResponsePlanInfo"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_SubAccountDetailsResponsePlanInfo());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.SubAccountDetailsResponse = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.SubAccountDetailsResponsePlanInfo);
      }
    })(exports, function(ApiClient, SubAccountDetailsResponsePlanInfo) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
          if (data.hasOwnProperty("email"))
            obj.email = ApiClient.convertToType(data["email"], "String");
          if (data.hasOwnProperty("companyName"))
            obj.companyName = ApiClient.convertToType(data["companyName"], "String");
          if (data.hasOwnProperty("planInfo"))
            obj.planInfo = SubAccountDetailsResponsePlanInfo.constructFromObject(data["planInfo"]);
        }
        return obj;
      };
      exports2.prototype.name = void 0;
      exports2.prototype.email = void 0;
      exports2.prototype.companyName = void 0;
      exports2.prototype.planInfo = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/SubAccountUpdatePlanRequestCredits.js
var require_SubAccountUpdatePlanRequestCredits = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/SubAccountUpdatePlanRequestCredits.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.SubAccountUpdatePlanRequestCredits = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("email"))
            obj.email = ApiClient.convertToType(data["email"], "Number");
        }
        return obj;
      };
      exports2.prototype.email = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/SubAccountUpdatePlanRequestFeatures.js
var require_SubAccountUpdatePlanRequestFeatures = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/SubAccountUpdatePlanRequestFeatures.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.SubAccountUpdatePlanRequestFeatures = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("users"))
            obj.users = ApiClient.convertToType(data["users"], "Number");
          if (data.hasOwnProperty("landingPage"))
            obj.landingPage = ApiClient.convertToType(data["landingPage"], "Number");
          if (data.hasOwnProperty("inbox"))
            obj.inbox = ApiClient.convertToType(data["inbox"], "Number");
        }
        return obj;
      };
      exports2.prototype.users = void 0;
      exports2.prototype.landingPage = void 0;
      exports2.prototype.inbox = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/SubAccountUpdatePlanRequest.js
var require_SubAccountUpdatePlanRequest = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/SubAccountUpdatePlanRequest.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/SubAccountUpdatePlanRequestCredits", "model/SubAccountUpdatePlanRequestFeatures"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_SubAccountUpdatePlanRequestCredits(), require_SubAccountUpdatePlanRequestFeatures());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.SubAccountUpdatePlanRequest = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.SubAccountUpdatePlanRequestCredits, root.SibApiV3Sdk.SubAccountUpdatePlanRequestFeatures);
      }
    })(exports, function(ApiClient, SubAccountUpdatePlanRequestCredits, SubAccountUpdatePlanRequestFeatures) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("credits"))
            obj.credits = SubAccountUpdatePlanRequestCredits.constructFromObject(data["credits"]);
          if (data.hasOwnProperty("features"))
            obj.features = SubAccountUpdatePlanRequestFeatures.constructFromObject(data["features"]);
        }
        return obj;
      };
      exports2.prototype.credits = void 0;
      exports2.prototype.features = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/SubAccountsResponseSubAccounts.js
var require_SubAccountsResponseSubAccounts = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/SubAccountsResponseSubAccounts.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.SubAccountsResponseSubAccounts = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(id, companyName, active, createdAt) {
        this.id = id;
        this.companyName = companyName;
        this.active = active;
        this.createdAt = createdAt;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("id"))
            obj.id = ApiClient.convertToType(data["id"], "Number");
          if (data.hasOwnProperty("companyName"))
            obj.companyName = ApiClient.convertToType(data["companyName"], "String");
          if (data.hasOwnProperty("active"))
            obj.active = ApiClient.convertToType(data["active"], "Boolean");
          if (data.hasOwnProperty("createdAt"))
            obj.createdAt = ApiClient.convertToType(data["createdAt"], "Number");
        }
        return obj;
      };
      exports2.prototype.id = void 0;
      exports2.prototype.companyName = void 0;
      exports2.prototype.active = void 0;
      exports2.prototype.createdAt = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/SubAccountsResponse.js
var require_SubAccountsResponse = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/SubAccountsResponse.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/SubAccountsResponseSubAccounts"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_SubAccountsResponseSubAccounts());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.SubAccountsResponse = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.SubAccountsResponseSubAccounts);
      }
    })(exports, function(ApiClient, SubAccountsResponseSubAccounts) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("count"))
            obj.count = ApiClient.convertToType(data["count"], "Number");
          if (data.hasOwnProperty("subAccounts"))
            obj.subAccounts = ApiClient.convertToType(data["subAccounts"], [SubAccountsResponseSubAccounts]);
        }
        return obj;
      };
      exports2.prototype.count = void 0;
      exports2.prototype.subAccounts = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/Task.js
var require_Task = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/Task.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.Task = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("id"))
            obj.id = ApiClient.convertToType(data["id"], "String");
          if (data.hasOwnProperty("taskTypeId"))
            obj.taskTypeId = ApiClient.convertToType(data["taskTypeId"], "String");
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
          if (data.hasOwnProperty("contactsIds"))
            obj.contactsIds = ApiClient.convertToType(data["contactsIds"], ["Number"]);
          if (data.hasOwnProperty("dealsIds"))
            obj.dealsIds = ApiClient.convertToType(data["dealsIds"], ["String"]);
          if (data.hasOwnProperty("companiesIds"))
            obj.companiesIds = ApiClient.convertToType(data["companiesIds"], ["String"]);
          if (data.hasOwnProperty("firstContact"))
            obj.firstContact = ApiClient.convertToType(data["firstContact"], "String");
          if (data.hasOwnProperty("contacts"))
            obj.contacts = ApiClient.convertToType(data["contacts"], "String");
          if (data.hasOwnProperty("assignToId"))
            obj.assignToId = ApiClient.convertToType(data["assignToId"], "String");
          if (data.hasOwnProperty("date"))
            obj._date = ApiClient.convertToType(data["date"], "String");
          if (data.hasOwnProperty("duration"))
            obj.duration = ApiClient.convertToType(data["duration"], "String");
          if (data.hasOwnProperty("notes"))
            obj.notes = ApiClient.convertToType(data["notes"], "String");
          if (data.hasOwnProperty("done"))
            obj.done = ApiClient.convertToType(data["done"], "String");
          if (data.hasOwnProperty("reminder"))
            obj.reminder = ApiClient.convertToType(data["reminder"], "String");
          if (data.hasOwnProperty("createdAt"))
            obj.createdAt = ApiClient.convertToType(data["createdAt"], "String");
          if (data.hasOwnProperty("updatedAt"))
            obj.updatedAt = ApiClient.convertToType(data["updatedAt"], "String");
          if (data.hasOwnProperty("refs"))
            obj.refs = ApiClient.convertToType(data["refs"], "String");
        }
        return obj;
      };
      exports2.prototype.id = void 0;
      exports2.prototype.taskTypeId = void 0;
      exports2.prototype.name = void 0;
      exports2.prototype.contactsIds = void 0;
      exports2.prototype.dealsIds = void 0;
      exports2.prototype.companiesIds = void 0;
      exports2.prototype.firstContact = void 0;
      exports2.prototype.contacts = void 0;
      exports2.prototype.assignToId = void 0;
      exports2.prototype._date = void 0;
      exports2.prototype.duration = void 0;
      exports2.prototype.notes = void 0;
      exports2.prototype.done = void 0;
      exports2.prototype.reminder = void 0;
      exports2.prototype.createdAt = void 0;
      exports2.prototype.updatedAt = void 0;
      exports2.prototype.refs = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/TaskList.js
var require_TaskList = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/TaskList.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/Task"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_Task());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.TaskList = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.Task);
      }
    })(exports, function(ApiClient, Task) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("items"))
            obj.items = ApiClient.convertToType(data["items"], [Task]);
        }
        return obj;
      };
      exports2.prototype.items = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/TaskTypes.js
var require_TaskTypes = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/TaskTypes.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.TaskTypes = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("id"))
            obj.id = ApiClient.convertToType(data["id"], "String");
          if (data.hasOwnProperty("title"))
            obj.title = ApiClient.convertToType(data["title"], "String");
          if (data.hasOwnProperty("icon"))
            obj.icon = ApiClient.convertToType(data["icon"], "String");
        }
        return obj;
      };
      exports2.prototype.id = void 0;
      exports2.prototype.title = void 0;
      exports2.prototype.icon = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/UpdateAttributeEnumeration.js
var require_UpdateAttributeEnumeration = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/UpdateAttributeEnumeration.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.UpdateAttributeEnumeration = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(value, label) {
        this.value = value;
        this.label = label;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("value"))
            obj.value = ApiClient.convertToType(data["value"], "Number");
          if (data.hasOwnProperty("label"))
            obj.label = ApiClient.convertToType(data["label"], "String");
        }
        return obj;
      };
      exports2.prototype.value = void 0;
      exports2.prototype.label = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/UpdateAttribute.js
var require_UpdateAttribute = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/UpdateAttribute.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/UpdateAttributeEnumeration"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_UpdateAttributeEnumeration());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.UpdateAttribute = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.UpdateAttributeEnumeration);
      }
    })(exports, function(ApiClient, UpdateAttributeEnumeration) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("value"))
            obj.value = ApiClient.convertToType(data["value"], "String");
          if (data.hasOwnProperty("enumeration"))
            obj.enumeration = ApiClient.convertToType(data["enumeration"], [UpdateAttributeEnumeration]);
        }
        return obj;
      };
      exports2.prototype.value = void 0;
      exports2.prototype.enumeration = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/UpdateBatchContactsContacts.js
var require_UpdateBatchContactsContacts = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/UpdateBatchContactsContacts.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.UpdateBatchContactsContacts = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("email"))
            obj.email = ApiClient.convertToType(data["email"], "String");
          if (data.hasOwnProperty("id"))
            obj.id = ApiClient.convertToType(data["id"], "Number");
          if (data.hasOwnProperty("sms"))
            obj.sms = ApiClient.convertToType(data["sms"], "String");
          if (data.hasOwnProperty("attributes"))
            obj.attributes = ApiClient.convertToType(data["attributes"], { "String": Object });
          if (data.hasOwnProperty("emailBlacklisted"))
            obj.emailBlacklisted = ApiClient.convertToType(data["emailBlacklisted"], "Boolean");
          if (data.hasOwnProperty("smsBlacklisted"))
            obj.smsBlacklisted = ApiClient.convertToType(data["smsBlacklisted"], "Boolean");
          if (data.hasOwnProperty("listIds"))
            obj.listIds = ApiClient.convertToType(data["listIds"], ["Number"]);
          if (data.hasOwnProperty("unlinkListIds"))
            obj.unlinkListIds = ApiClient.convertToType(data["unlinkListIds"], ["Number"]);
          if (data.hasOwnProperty("smtpBlacklistSender"))
            obj.smtpBlacklistSender = ApiClient.convertToType(data["smtpBlacklistSender"], ["String"]);
        }
        return obj;
      };
      exports2.prototype.email = void 0;
      exports2.prototype.id = void 0;
      exports2.prototype.sms = void 0;
      exports2.prototype.attributes = void 0;
      exports2.prototype.emailBlacklisted = void 0;
      exports2.prototype.smsBlacklisted = void 0;
      exports2.prototype.listIds = void 0;
      exports2.prototype.unlinkListIds = void 0;
      exports2.prototype.smtpBlacklistSender = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/UpdateBatchContacts.js
var require_UpdateBatchContacts = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/UpdateBatchContacts.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/UpdateBatchContactsContacts"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_UpdateBatchContactsContacts());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.UpdateBatchContacts = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.UpdateBatchContactsContacts);
      }
    })(exports, function(ApiClient, UpdateBatchContactsContacts) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("contacts"))
            obj.contacts = ApiClient.convertToType(data["contacts"], [UpdateBatchContactsContacts]);
        }
        return obj;
      };
      exports2.prototype.contacts = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/UpdateBatchContactsModel.js
var require_UpdateBatchContactsModel = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/UpdateBatchContactsModel.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.UpdateBatchContactsModel = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("successIds"))
            obj.successIds = ApiClient.convertToType(data["successIds"], ["Number"]);
          if (data.hasOwnProperty("failureIds"))
            obj.failureIds = ApiClient.convertToType(data["failureIds"], ["Number"]);
        }
        return obj;
      };
      exports2.prototype.successIds = void 0;
      exports2.prototype.failureIds = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/UpdateCampaignStatus.js
var require_UpdateCampaignStatus = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/UpdateCampaignStatus.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.UpdateCampaignStatus = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("status"))
            obj.status = ApiClient.convertToType(data["status"], "String");
        }
        return obj;
      };
      exports2.prototype.status = void 0;
      exports2.StatusEnum = {
        suspended: "suspended",
        archive: "archive",
        darchive: "darchive",
        sent: "sent",
        queued: "queued",
        replicate: "replicate",
        replicateTemplate: "replicateTemplate",
        draft: "draft"
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/UpdateChild.js
var require_UpdateChild = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/UpdateChild.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.UpdateChild = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("email"))
            obj.email = ApiClient.convertToType(data["email"], "String");
          if (data.hasOwnProperty("firstName"))
            obj.firstName = ApiClient.convertToType(data["firstName"], "String");
          if (data.hasOwnProperty("lastName"))
            obj.lastName = ApiClient.convertToType(data["lastName"], "String");
          if (data.hasOwnProperty("companyName"))
            obj.companyName = ApiClient.convertToType(data["companyName"], "String");
          if (data.hasOwnProperty("password"))
            obj.password = ApiClient.convertToType(data["password"], "String");
        }
        return obj;
      };
      exports2.prototype.email = void 0;
      exports2.prototype.firstName = void 0;
      exports2.prototype.lastName = void 0;
      exports2.prototype.companyName = void 0;
      exports2.prototype.password = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/UpdateChildAccountStatus.js
var require_UpdateChildAccountStatus = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/UpdateChildAccountStatus.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.UpdateChildAccountStatus = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("transactionalEmail"))
            obj.transactionalEmail = ApiClient.convertToType(data["transactionalEmail"], "Boolean");
          if (data.hasOwnProperty("transactionalSms"))
            obj.transactionalSms = ApiClient.convertToType(data["transactionalSms"], "Boolean");
          if (data.hasOwnProperty("marketingAutomation"))
            obj.marketingAutomation = ApiClient.convertToType(data["marketingAutomation"], "Boolean");
          if (data.hasOwnProperty("smsCampaign"))
            obj.smsCampaign = ApiClient.convertToType(data["smsCampaign"], "Boolean");
        }
        return obj;
      };
      exports2.prototype.transactionalEmail = void 0;
      exports2.prototype.transactionalSms = void 0;
      exports2.prototype.marketingAutomation = void 0;
      exports2.prototype.smsCampaign = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/UpdateChildDomain.js
var require_UpdateChildDomain = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/UpdateChildDomain.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.UpdateChildDomain = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("domain"))
            obj.domain = ApiClient.convertToType(data["domain"], "String");
        }
        return obj;
      };
      exports2.prototype.domain = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/UpdateContact.js
var require_UpdateContact = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/UpdateContact.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.UpdateContact = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("attributes"))
            obj.attributes = ApiClient.convertToType(data["attributes"], Object);
          if (data.hasOwnProperty("emailBlacklisted"))
            obj.emailBlacklisted = ApiClient.convertToType(data["emailBlacklisted"], "Boolean");
          if (data.hasOwnProperty("smsBlacklisted"))
            obj.smsBlacklisted = ApiClient.convertToType(data["smsBlacklisted"], "Boolean");
          if (data.hasOwnProperty("listIds"))
            obj.listIds = ApiClient.convertToType(data["listIds"], ["Number"]);
          if (data.hasOwnProperty("unlinkListIds"))
            obj.unlinkListIds = ApiClient.convertToType(data["unlinkListIds"], ["Number"]);
          if (data.hasOwnProperty("smtpBlacklistSender"))
            obj.smtpBlacklistSender = ApiClient.convertToType(data["smtpBlacklistSender"], ["String"]);
        }
        return obj;
      };
      exports2.prototype.attributes = void 0;
      exports2.prototype.emailBlacklisted = void 0;
      exports2.prototype.smsBlacklisted = void 0;
      exports2.prototype.listIds = void 0;
      exports2.prototype.unlinkListIds = void 0;
      exports2.prototype.smtpBlacklistSender = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/UpdateEmailCampaignRecipients.js
var require_UpdateEmailCampaignRecipients = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/UpdateEmailCampaignRecipients.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.UpdateEmailCampaignRecipients = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("exclusionListIds"))
            obj.exclusionListIds = ApiClient.convertToType(data["exclusionListIds"], ["Number"]);
          if (data.hasOwnProperty("listIds"))
            obj.listIds = ApiClient.convertToType(data["listIds"], ["Number"]);
        }
        return obj;
      };
      exports2.prototype.exclusionListIds = void 0;
      exports2.prototype.listIds = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/UpdateEmailCampaignSender.js
var require_UpdateEmailCampaignSender = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/UpdateEmailCampaignSender.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.UpdateEmailCampaignSender = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
          if (data.hasOwnProperty("email"))
            obj.email = ApiClient.convertToType(data["email"], "String");
          if (data.hasOwnProperty("id"))
            obj.id = ApiClient.convertToType(data["id"], "Number");
        }
        return obj;
      };
      exports2.prototype.name = void 0;
      exports2.prototype.email = void 0;
      exports2.prototype.id = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/UpdateEmailCampaign.js
var require_UpdateEmailCampaign = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/UpdateEmailCampaign.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/UpdateEmailCampaignRecipients", "model/UpdateEmailCampaignSender"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_UpdateEmailCampaignRecipients(), require_UpdateEmailCampaignSender());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.UpdateEmailCampaign = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.UpdateEmailCampaignRecipients, root.SibApiV3Sdk.UpdateEmailCampaignSender);
      }
    })(exports, function(ApiClient, UpdateEmailCampaignRecipients, UpdateEmailCampaignSender) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("tag"))
            obj.tag = ApiClient.convertToType(data["tag"], "String");
          if (data.hasOwnProperty("sender"))
            obj.sender = UpdateEmailCampaignSender.constructFromObject(data["sender"]);
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
          if (data.hasOwnProperty("htmlContent"))
            obj.htmlContent = ApiClient.convertToType(data["htmlContent"], "String");
          if (data.hasOwnProperty("htmlUrl"))
            obj.htmlUrl = ApiClient.convertToType(data["htmlUrl"], "String");
          if (data.hasOwnProperty("scheduledAt"))
            obj.scheduledAt = ApiClient.convertToType(data["scheduledAt"], "String");
          if (data.hasOwnProperty("subject"))
            obj.subject = ApiClient.convertToType(data["subject"], "String");
          if (data.hasOwnProperty("replyTo"))
            obj.replyTo = ApiClient.convertToType(data["replyTo"], "String");
          if (data.hasOwnProperty("toField"))
            obj.toField = ApiClient.convertToType(data["toField"], "String");
          if (data.hasOwnProperty("recipients"))
            obj.recipients = UpdateEmailCampaignRecipients.constructFromObject(data["recipients"]);
          if (data.hasOwnProperty("attachmentUrl"))
            obj.attachmentUrl = ApiClient.convertToType(data["attachmentUrl"], "String");
          if (data.hasOwnProperty("inlineImageActivation"))
            obj.inlineImageActivation = ApiClient.convertToType(data["inlineImageActivation"], "Boolean");
          if (data.hasOwnProperty("mirrorActive"))
            obj.mirrorActive = ApiClient.convertToType(data["mirrorActive"], "Boolean");
          if (data.hasOwnProperty("recurring"))
            obj.recurring = ApiClient.convertToType(data["recurring"], "Boolean");
          if (data.hasOwnProperty("footer"))
            obj.footer = ApiClient.convertToType(data["footer"], "String");
          if (data.hasOwnProperty("header"))
            obj.header = ApiClient.convertToType(data["header"], "String");
          if (data.hasOwnProperty("utmCampaign"))
            obj.utmCampaign = ApiClient.convertToType(data["utmCampaign"], "String");
          if (data.hasOwnProperty("params"))
            obj.params = ApiClient.convertToType(data["params"], Object);
          if (data.hasOwnProperty("sendAtBestTime"))
            obj.sendAtBestTime = ApiClient.convertToType(data["sendAtBestTime"], "Boolean");
          if (data.hasOwnProperty("abTesting"))
            obj.abTesting = ApiClient.convertToType(data["abTesting"], "Boolean");
          if (data.hasOwnProperty("subjectA"))
            obj.subjectA = ApiClient.convertToType(data["subjectA"], "String");
          if (data.hasOwnProperty("subjectB"))
            obj.subjectB = ApiClient.convertToType(data["subjectB"], "String");
          if (data.hasOwnProperty("splitRule"))
            obj.splitRule = ApiClient.convertToType(data["splitRule"], "Number");
          if (data.hasOwnProperty("winnerCriteria"))
            obj.winnerCriteria = ApiClient.convertToType(data["winnerCriteria"], "String");
          if (data.hasOwnProperty("winnerDelay"))
            obj.winnerDelay = ApiClient.convertToType(data["winnerDelay"], "Number");
          if (data.hasOwnProperty("ipWarmupEnable"))
            obj.ipWarmupEnable = ApiClient.convertToType(data["ipWarmupEnable"], "Boolean");
          if (data.hasOwnProperty("initialQuota"))
            obj.initialQuota = ApiClient.convertToType(data["initialQuota"], "Number");
          if (data.hasOwnProperty("increaseRate"))
            obj.increaseRate = ApiClient.convertToType(data["increaseRate"], "Number");
        }
        return obj;
      };
      exports2.prototype.tag = void 0;
      exports2.prototype.sender = void 0;
      exports2.prototype.name = void 0;
      exports2.prototype.htmlContent = void 0;
      exports2.prototype.htmlUrl = void 0;
      exports2.prototype.scheduledAt = void 0;
      exports2.prototype.subject = void 0;
      exports2.prototype.replyTo = void 0;
      exports2.prototype.toField = void 0;
      exports2.prototype.recipients = void 0;
      exports2.prototype.attachmentUrl = void 0;
      exports2.prototype.inlineImageActivation = false;
      exports2.prototype.mirrorActive = void 0;
      exports2.prototype.recurring = false;
      exports2.prototype.footer = void 0;
      exports2.prototype.header = void 0;
      exports2.prototype.utmCampaign = void 0;
      exports2.prototype.params = void 0;
      exports2.prototype.sendAtBestTime = void 0;
      exports2.prototype.abTesting = false;
      exports2.prototype.subjectA = void 0;
      exports2.prototype.subjectB = void 0;
      exports2.prototype.splitRule = void 0;
      exports2.prototype.winnerCriteria = void 0;
      exports2.prototype.winnerDelay = void 0;
      exports2.prototype.ipWarmupEnable = false;
      exports2.prototype.initialQuota = void 0;
      exports2.prototype.increaseRate = void 0;
      exports2.WinnerCriteriaEnum = {
        open: "open",
        click: "click"
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/UpdateList.js
var require_UpdateList = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/UpdateList.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.UpdateList = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
          if (data.hasOwnProperty("folderId"))
            obj.folderId = ApiClient.convertToType(data["folderId"], "Number");
        }
        return obj;
      };
      exports2.prototype.name = void 0;
      exports2.prototype.folderId = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/UpdateSender.js
var require_UpdateSender = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/UpdateSender.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/CreateSenderIps"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_CreateSenderIps());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.UpdateSender = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.CreateSenderIps);
      }
    })(exports, function(ApiClient, CreateSenderIps) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
          if (data.hasOwnProperty("email"))
            obj.email = ApiClient.convertToType(data["email"], "String");
          if (data.hasOwnProperty("ips"))
            obj.ips = ApiClient.convertToType(data["ips"], [CreateSenderIps]);
        }
        return obj;
      };
      exports2.prototype.name = void 0;
      exports2.prototype.email = void 0;
      exports2.prototype.ips = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/UpdateSmsCampaign.js
var require_UpdateSmsCampaign = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/UpdateSmsCampaign.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/CreateSmsCampaignRecipients"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_CreateSmsCampaignRecipients());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.UpdateSmsCampaign = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.CreateSmsCampaignRecipients);
      }
    })(exports, function(ApiClient, CreateSmsCampaignRecipients) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
          if (data.hasOwnProperty("sender"))
            obj.sender = ApiClient.convertToType(data["sender"], "String");
          if (data.hasOwnProperty("content"))
            obj.content = ApiClient.convertToType(data["content"], "String");
          if (data.hasOwnProperty("recipients"))
            obj.recipients = CreateSmsCampaignRecipients.constructFromObject(data["recipients"]);
          if (data.hasOwnProperty("scheduledAt"))
            obj.scheduledAt = ApiClient.convertToType(data["scheduledAt"], "String");
          if (data.hasOwnProperty("unicodeEnabled"))
            obj.unicodeEnabled = ApiClient.convertToType(data["unicodeEnabled"], "Boolean");
        }
        return obj;
      };
      exports2.prototype.name = void 0;
      exports2.prototype.sender = void 0;
      exports2.prototype.content = void 0;
      exports2.prototype.recipients = void 0;
      exports2.prototype.scheduledAt = void 0;
      exports2.prototype.unicodeEnabled = false;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/UpdateSmtpTemplateSender.js
var require_UpdateSmtpTemplateSender = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/UpdateSmtpTemplateSender.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.UpdateSmtpTemplateSender = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
          if (data.hasOwnProperty("email"))
            obj.email = ApiClient.convertToType(data["email"], "String");
          if (data.hasOwnProperty("id"))
            obj.id = ApiClient.convertToType(data["id"], "Number");
        }
        return obj;
      };
      exports2.prototype.name = void 0;
      exports2.prototype.email = void 0;
      exports2.prototype.id = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/UpdateSmtpTemplate.js
var require_UpdateSmtpTemplate = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/UpdateSmtpTemplate.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/UpdateSmtpTemplateSender"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_UpdateSmtpTemplateSender());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.UpdateSmtpTemplate = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.UpdateSmtpTemplateSender);
      }
    })(exports, function(ApiClient, UpdateSmtpTemplateSender) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("tag"))
            obj.tag = ApiClient.convertToType(data["tag"], "String");
          if (data.hasOwnProperty("sender"))
            obj.sender = UpdateSmtpTemplateSender.constructFromObject(data["sender"]);
          if (data.hasOwnProperty("templateName"))
            obj.templateName = ApiClient.convertToType(data["templateName"], "String");
          if (data.hasOwnProperty("htmlContent"))
            obj.htmlContent = ApiClient.convertToType(data["htmlContent"], "String");
          if (data.hasOwnProperty("htmlUrl"))
            obj.htmlUrl = ApiClient.convertToType(data["htmlUrl"], "String");
          if (data.hasOwnProperty("subject"))
            obj.subject = ApiClient.convertToType(data["subject"], "String");
          if (data.hasOwnProperty("replyTo"))
            obj.replyTo = ApiClient.convertToType(data["replyTo"], "String");
          if (data.hasOwnProperty("toField"))
            obj.toField = ApiClient.convertToType(data["toField"], "String");
          if (data.hasOwnProperty("attachmentUrl"))
            obj.attachmentUrl = ApiClient.convertToType(data["attachmentUrl"], "String");
          if (data.hasOwnProperty("isActive"))
            obj.isActive = ApiClient.convertToType(data["isActive"], "Boolean");
        }
        return obj;
      };
      exports2.prototype.tag = void 0;
      exports2.prototype.sender = void 0;
      exports2.prototype.templateName = void 0;
      exports2.prototype.htmlContent = void 0;
      exports2.prototype.htmlUrl = void 0;
      exports2.prototype.subject = void 0;
      exports2.prototype.replyTo = void 0;
      exports2.prototype.toField = void 0;
      exports2.prototype.attachmentUrl = void 0;
      exports2.prototype.isActive = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/UpdateWebhook.js
var require_UpdateWebhook = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/UpdateWebhook.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.UpdateWebhook = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function() {
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("url"))
            obj.url = ApiClient.convertToType(data["url"], "String");
          if (data.hasOwnProperty("description"))
            obj.description = ApiClient.convertToType(data["description"], "String");
          if (data.hasOwnProperty("events"))
            obj.events = ApiClient.convertToType(data["events"], ["String"]);
          if (data.hasOwnProperty("domain"))
            obj.domain = ApiClient.convertToType(data["domain"], "String");
        }
        return obj;
      };
      exports2.prototype.url = void 0;
      exports2.prototype.description = void 0;
      exports2.prototype.events = void 0;
      exports2.prototype.domain = void 0;
      exports2.EventsEnum = {
        sent: "sent",
        hardBounce: "hardBounce",
        softBounce: "softBounce",
        blocked: "blocked",
        spam: "spam",
        delivered: "delivered",
        request: "request",
        click: "click",
        invalid: "invalid",
        deferred: "deferred",
        opened: "opened",
        uniqueOpened: "uniqueOpened",
        unsubscribed: "unsubscribed",
        listAddition: "listAddition",
        contactUpdated: "contactUpdated",
        contactDeleted: "contactDeleted",
        inboundEmailProcessed: "inboundEmailProcessed"
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/model/UploadImageToGallery.js
var require_UploadImageToGallery = __commonJS({
  "node_modules/sib-api-v3-sdk/src/model/UploadImageToGallery.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.UploadImageToGallery = factory(root.SibApiV3Sdk.ApiClient);
      }
    })(exports, function(ApiClient) {
      "use strict";
      var exports2 = function(imageUrl) {
        this.imageUrl = imageUrl;
      };
      exports2.constructFromObject = function(data, obj) {
        if (data) {
          obj = obj || new exports2();
          if (data.hasOwnProperty("imageUrl"))
            obj.imageUrl = ApiClient.convertToType(data["imageUrl"], "String");
          if (data.hasOwnProperty("name"))
            obj.name = ApiClient.convertToType(data["name"], "String");
        }
        return obj;
      };
      exports2.prototype.imageUrl = void 0;
      exports2.prototype.name = void 0;
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/api/AccountApi.js
var require_AccountApi = __commonJS({
  "node_modules/sib-api-v3-sdk/src/api/AccountApi.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/GetAccount"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_GetAccount());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.AccountApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.GetAccount);
      }
    })(exports, function(ApiClient, GetAccount) {
      "use strict";
      var exports2 = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
        this.getAccountWithHttpInfo = function() {
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetAccount;
          return this.apiClient.callApi(
            "/account",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getAccount = function() {
          return this.getAccountWithHttpInfo().then(function(response_and_data) {
            return response_and_data.data;
          });
        };
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/api/AttributesApi.js
var require_AttributesApi = __commonJS({
  "node_modules/sib-api-v3-sdk/src/api/AttributesApi.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/CreateAttribute", "model/ErrorModel", "model/GetAttributes", "model/UpdateAttribute"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_CreateAttribute(), require_ErrorModel(), require_GetAttributes(), require_UpdateAttribute());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.AttributesApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.CreateAttribute, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetAttributes, root.SibApiV3Sdk.UpdateAttribute);
      }
    })(exports, function(ApiClient, CreateAttribute, ErrorModel, GetAttributes, UpdateAttribute) {
      "use strict";
      var exports2 = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
        this.createAttributeWithHttpInfo = function(attributeCategory, attributeName, createAttribute) {
          var postBody = createAttribute;
          if (attributeCategory === void 0 || attributeCategory === null) {
            throw new Error("Missing the required parameter 'attributeCategory' when calling createAttribute");
          }
          if (attributeName === void 0 || attributeName === null) {
            throw new Error("Missing the required parameter 'attributeName' when calling createAttribute");
          }
          if (createAttribute === void 0 || createAttribute === null) {
            throw new Error("Missing the required parameter 'createAttribute' when calling createAttribute");
          }
          var pathParams = {
            "attributeCategory": attributeCategory,
            "attributeName": attributeName
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/contacts/attributes/{attributeCategory}/{attributeName}",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.createAttribute = function(attributeCategory, attributeName, createAttribute) {
          return this.createAttributeWithHttpInfo(attributeCategory, attributeName, createAttribute).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.deleteAttributeWithHttpInfo = function(attributeCategory, attributeName) {
          var postBody = null;
          if (attributeCategory === void 0 || attributeCategory === null) {
            throw new Error("Missing the required parameter 'attributeCategory' when calling deleteAttribute");
          }
          if (attributeName === void 0 || attributeName === null) {
            throw new Error("Missing the required parameter 'attributeName' when calling deleteAttribute");
          }
          var pathParams = {
            "attributeCategory": attributeCategory,
            "attributeName": attributeName
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/contacts/attributes/{attributeCategory}/{attributeName}",
            "DELETE",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.deleteAttribute = function(attributeCategory, attributeName) {
          return this.deleteAttributeWithHttpInfo(attributeCategory, attributeName).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getAttributesWithHttpInfo = function() {
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetAttributes;
          return this.apiClient.callApi(
            "/contacts/attributes",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getAttributes = function() {
          return this.getAttributesWithHttpInfo().then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.updateAttributeWithHttpInfo = function(attributeCategory, attributeName, updateAttribute) {
          var postBody = updateAttribute;
          if (attributeCategory === void 0 || attributeCategory === null) {
            throw new Error("Missing the required parameter 'attributeCategory' when calling updateAttribute");
          }
          if (attributeName === void 0 || attributeName === null) {
            throw new Error("Missing the required parameter 'attributeName' when calling updateAttribute");
          }
          if (updateAttribute === void 0 || updateAttribute === null) {
            throw new Error("Missing the required parameter 'updateAttribute' when calling updateAttribute");
          }
          var pathParams = {
            "attributeCategory": attributeCategory,
            "attributeName": attributeName
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/contacts/attributes/{attributeCategory}/{attributeName}",
            "PUT",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.updateAttribute = function(attributeCategory, attributeName, updateAttribute) {
          return this.updateAttributeWithHttpInfo(attributeCategory, attributeName, updateAttribute).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/api/CRMApi.js
var require_CRMApi = __commonJS({
  "node_modules/sib-api-v3-sdk/src/api/CRMApi.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/Body5", "model/Body6", "model/ErrorModel", "model/InlineResponse2011", "model/Note", "model/NoteData", "model/NoteId", "model/NoteList", "model/Task", "model/TaskList", "model/TaskTypes"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_Body5(), require_Body6(), require_ErrorModel(), require_InlineResponse2011(), require_Note(), require_NoteData(), require_NoteId(), require_NoteList(), require_Task(), require_TaskList(), require_TaskTypes());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.CRMApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.Body5, root.SibApiV3Sdk.Body6, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.InlineResponse2011, root.SibApiV3Sdk.Note, root.SibApiV3Sdk.NoteData, root.SibApiV3Sdk.NoteId, root.SibApiV3Sdk.NoteList, root.SibApiV3Sdk.Task, root.SibApiV3Sdk.TaskList, root.SibApiV3Sdk.TaskTypes);
      }
    })(exports, function(ApiClient, Body5, Body6, ErrorModel, InlineResponse2011, Note, NoteData, NoteId, NoteList, Task, TaskList, TaskTypes) {
      "use strict";
      var exports2 = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
        this.crmNotesGetWithHttpInfo = function(opts) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "entity": opts["entity"],
            "entityIds": opts["entityIds"],
            "dateFrom": opts["dateFrom"],
            "dateTo": opts["dateTo"],
            "offset": opts["offset"],
            "limit": opts["limit"],
            "sort": opts["sort"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = NoteList;
          return this.apiClient.callApi(
            "/crm/notes",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.crmNotesGet = function(opts) {
          return this.crmNotesGetWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.crmNotesIdDeleteWithHttpInfo = function(id) {
          var postBody = null;
          if (id === void 0 || id === null) {
            throw new Error("Missing the required parameter 'id' when calling crmNotesIdDelete");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/crm/notes/{id}",
            "DELETE",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.crmNotesIdDelete = function(id) {
          return this.crmNotesIdDeleteWithHttpInfo(id).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.crmNotesIdGetWithHttpInfo = function(id) {
          var postBody = null;
          if (id === void 0 || id === null) {
            throw new Error("Missing the required parameter 'id' when calling crmNotesIdGet");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = Note;
          return this.apiClient.callApi(
            "/crm/notes/{id}",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.crmNotesIdGet = function(id) {
          return this.crmNotesIdGetWithHttpInfo(id).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.crmNotesIdPatchWithHttpInfo = function(id, body) {
          var postBody = body;
          if (id === void 0 || id === null) {
            throw new Error("Missing the required parameter 'id' when calling crmNotesIdPatch");
          }
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling crmNotesIdPatch");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/crm/notes/{id}",
            "PATCH",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.crmNotesIdPatch = function(id, body) {
          return this.crmNotesIdPatchWithHttpInfo(id, body).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.crmNotesPostWithHttpInfo = function(body) {
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling crmNotesPost");
          }
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = NoteId;
          return this.apiClient.callApi(
            "/crm/notes",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.crmNotesPost = function(body) {
          return this.crmNotesPostWithHttpInfo(body).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.crmTasksGetWithHttpInfo = function(opts) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "filter[type]": opts["filterType"],
            "filter[status]": opts["filterStatus"],
            "filter[date]": opts["filterDate"],
            "filter[assignTo]": opts["filterAssignTo"],
            "filter[contacts]": opts["filterContacts"],
            "filter[deals]": opts["filterDeals"],
            "filter[companies]": opts["filterCompanies"],
            "dateFrom": opts["dateFrom"],
            "dateTo": opts["dateTo"],
            "offset": opts["offset"],
            "limit": opts["limit"],
            "sort": opts["sort"],
            "sortBy": opts["sortBy"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = TaskList;
          return this.apiClient.callApi(
            "/crm/tasks",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.crmTasksGet = function(opts) {
          return this.crmTasksGetWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.crmTasksIdDeleteWithHttpInfo = function(id) {
          var postBody = null;
          if (id === void 0 || id === null) {
            throw new Error("Missing the required parameter 'id' when calling crmTasksIdDelete");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/crm/tasks/{id}",
            "DELETE",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.crmTasksIdDelete = function(id) {
          return this.crmTasksIdDeleteWithHttpInfo(id).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.crmTasksIdGetWithHttpInfo = function(id) {
          var postBody = null;
          if (id === void 0 || id === null) {
            throw new Error("Missing the required parameter 'id' when calling crmTasksIdGet");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = Task;
          return this.apiClient.callApi(
            "/crm/tasks/{id}",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.crmTasksIdGet = function(id) {
          return this.crmTasksIdGetWithHttpInfo(id).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.crmTasksIdPatchWithHttpInfo = function(id, body) {
          var postBody = body;
          if (id === void 0 || id === null) {
            throw new Error("Missing the required parameter 'id' when calling crmTasksIdPatch");
          }
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling crmTasksIdPatch");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/crm/tasks/{id}",
            "PATCH",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.crmTasksIdPatch = function(id, body) {
          return this.crmTasksIdPatchWithHttpInfo(id, body).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.crmTasksPostWithHttpInfo = function(body) {
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling crmTasksPost");
          }
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = InlineResponse2011;
          return this.apiClient.callApi(
            "/crm/tasks",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.crmTasksPost = function(body) {
          return this.crmTasksPostWithHttpInfo(body).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.crmTasktypesGetWithHttpInfo = function() {
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = TaskTypes;
          return this.apiClient.callApi(
            "/crm/tasktypes",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.crmTasktypesGet = function() {
          return this.crmTasktypesGetWithHttpInfo().then(function(response_and_data) {
            return response_and_data.data;
          });
        };
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/api/CompaniesApi.js
var require_CompaniesApi = __commonJS({
  "node_modules/sib-api-v3-sdk/src/api/CompaniesApi.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/Body2", "model/Body3", "model/Body4", "model/CompaniesList", "model/Company", "model/CompanyAttributes", "model/ErrorModel", "model/InlineResponse200"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_Body2(), require_Body3(), require_Body4(), require_CompaniesList(), require_Company(), require_CompanyAttributes(), require_ErrorModel(), require_InlineResponse200());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.CompaniesApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.Body2, root.SibApiV3Sdk.Body3, root.SibApiV3Sdk.Body4, root.SibApiV3Sdk.CompaniesList, root.SibApiV3Sdk.Company, root.SibApiV3Sdk.CompanyAttributes, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.InlineResponse200);
      }
    })(exports, function(ApiClient, Body2, Body3, Body4, CompaniesList, Company, CompanyAttributes, ErrorModel, InlineResponse200) {
      "use strict";
      var exports2 = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
        this.companiesAttributesGetWithHttpInfo = function() {
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = CompanyAttributes;
          return this.apiClient.callApi(
            "/companies/attributes",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.companiesAttributesGet = function() {
          return this.companiesAttributesGetWithHttpInfo().then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.companiesGetWithHttpInfo = function(opts) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "filters": opts["filters"],
            "linkedContactsIds": opts["linkedContactsIds"],
            "linkedDealsIds": opts["linkedDealsIds"],
            "page": opts["page"],
            "limit": opts["limit"],
            "sort": opts["sort"],
            "sortBy": opts["sortBy"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = CompaniesList;
          return this.apiClient.callApi(
            "/companies",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.companiesGet = function(opts) {
          return this.companiesGetWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.companiesIdDeleteWithHttpInfo = function(id) {
          var postBody = null;
          if (id === void 0 || id === null) {
            throw new Error("Missing the required parameter 'id' when calling companiesIdDelete");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/companies/{id}",
            "DELETE",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.companiesIdDelete = function(id) {
          return this.companiesIdDeleteWithHttpInfo(id).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.companiesIdGetWithHttpInfo = function(id) {
          var postBody = null;
          if (id === void 0 || id === null) {
            throw new Error("Missing the required parameter 'id' when calling companiesIdGet");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = Company;
          return this.apiClient.callApi(
            "/companies/{id}",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.companiesIdGet = function(id) {
          return this.companiesIdGetWithHttpInfo(id).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.companiesIdPatchWithHttpInfo = function(id, body) {
          var postBody = body;
          if (id === void 0 || id === null) {
            throw new Error("Missing the required parameter 'id' when calling companiesIdPatch");
          }
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling companiesIdPatch");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = Company;
          return this.apiClient.callApi(
            "/companies/{id}",
            "PATCH",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.companiesIdPatch = function(id, body) {
          return this.companiesIdPatchWithHttpInfo(id, body).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.companiesLinkUnlinkIdPatchWithHttpInfo = function(id, body) {
          var postBody = body;
          if (id === void 0 || id === null) {
            throw new Error("Missing the required parameter 'id' when calling companiesLinkUnlinkIdPatch");
          }
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling companiesLinkUnlinkIdPatch");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/companies/link-unlink/{id}",
            "PATCH",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.companiesLinkUnlinkIdPatch = function(id, body) {
          return this.companiesLinkUnlinkIdPatchWithHttpInfo(id, body).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.companiesPostWithHttpInfo = function(body) {
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling companiesPost");
          }
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = InlineResponse200;
          return this.apiClient.callApi(
            "/companies",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.companiesPost = function(body) {
          return this.companiesPostWithHttpInfo(body).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/api/ContactsApi.js
var require_ContactsApi = __commonJS({
  "node_modules/sib-api-v3-sdk/src/api/ContactsApi.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/AddContactToList", "model/CreateAttribute", "model/CreateContact", "model/CreateDoiContact", "model/CreateList", "model/CreateModel", "model/CreateUpdateContactModel", "model/CreateUpdateFolder", "model/CreatedProcessId", "model/ErrorModel", "model/GetAttributes", "model/GetContactCampaignStats", "model/GetContacts", "model/GetExtendedContactDetails", "model/GetExtendedList", "model/GetFolder", "model/GetFolderLists", "model/GetFolders", "model/GetLists", "model/PostContactInfo", "model/RemoveContactFromList", "model/RequestContactExport", "model/RequestContactImport", "model/UpdateAttribute", "model/UpdateBatchContacts", "model/UpdateBatchContactsModel", "model/UpdateContact", "model/UpdateList"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_AddContactToList(), require_CreateAttribute(), require_CreateContact(), require_CreateDoiContact(), require_CreateList(), require_CreateModel(), require_CreateUpdateContactModel(), require_CreateUpdateFolder(), require_CreatedProcessId(), require_ErrorModel(), require_GetAttributes(), require_GetContactCampaignStats(), require_GetContacts(), require_GetExtendedContactDetails(), require_GetExtendedList(), require_GetFolder(), require_GetFolderLists(), require_GetFolders(), require_GetLists(), require_PostContactInfo(), require_RemoveContactFromList(), require_RequestContactExport(), require_RequestContactImport(), require_UpdateAttribute(), require_UpdateBatchContacts(), require_UpdateBatchContactsModel(), require_UpdateContact(), require_UpdateList());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.ContactsApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.AddContactToList, root.SibApiV3Sdk.CreateAttribute, root.SibApiV3Sdk.CreateContact, root.SibApiV3Sdk.CreateDoiContact, root.SibApiV3Sdk.CreateList, root.SibApiV3Sdk.CreateModel, root.SibApiV3Sdk.CreateUpdateContactModel, root.SibApiV3Sdk.CreateUpdateFolder, root.SibApiV3Sdk.CreatedProcessId, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetAttributes, root.SibApiV3Sdk.GetContactCampaignStats, root.SibApiV3Sdk.GetContacts, root.SibApiV3Sdk.GetExtendedContactDetails, root.SibApiV3Sdk.GetExtendedList, root.SibApiV3Sdk.GetFolder, root.SibApiV3Sdk.GetFolderLists, root.SibApiV3Sdk.GetFolders, root.SibApiV3Sdk.GetLists, root.SibApiV3Sdk.PostContactInfo, root.SibApiV3Sdk.RemoveContactFromList, root.SibApiV3Sdk.RequestContactExport, root.SibApiV3Sdk.RequestContactImport, root.SibApiV3Sdk.UpdateAttribute, root.SibApiV3Sdk.UpdateBatchContacts, root.SibApiV3Sdk.UpdateBatchContactsModel, root.SibApiV3Sdk.UpdateContact, root.SibApiV3Sdk.UpdateList);
      }
    })(exports, function(ApiClient, AddContactToList, CreateAttribute, CreateContact, CreateDoiContact, CreateList, CreateModel, CreateUpdateContactModel, CreateUpdateFolder, CreatedProcessId, ErrorModel, GetAttributes, GetContactCampaignStats, GetContacts, GetExtendedContactDetails, GetExtendedList, GetFolder, GetFolderLists, GetFolders, GetLists, PostContactInfo, RemoveContactFromList, RequestContactExport, RequestContactImport, UpdateAttribute, UpdateBatchContacts, UpdateBatchContactsModel, UpdateContact, UpdateList) {
      "use strict";
      var exports2 = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
        this.addContactToListWithHttpInfo = function(listId, contactEmails) {
          var postBody = contactEmails;
          if (listId === void 0 || listId === null) {
            throw new Error("Missing the required parameter 'listId' when calling addContactToList");
          }
          if (contactEmails === void 0 || contactEmails === null) {
            throw new Error("Missing the required parameter 'contactEmails' when calling addContactToList");
          }
          var pathParams = {
            "listId": listId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = PostContactInfo;
          return this.apiClient.callApi(
            "/contacts/lists/{listId}/contacts/add",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.addContactToList = function(listId, contactEmails) {
          return this.addContactToListWithHttpInfo(listId, contactEmails).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.createAttributeWithHttpInfo = function(attributeCategory, attributeName, createAttribute) {
          var postBody = createAttribute;
          if (attributeCategory === void 0 || attributeCategory === null) {
            throw new Error("Missing the required parameter 'attributeCategory' when calling createAttribute");
          }
          if (attributeName === void 0 || attributeName === null) {
            throw new Error("Missing the required parameter 'attributeName' when calling createAttribute");
          }
          if (createAttribute === void 0 || createAttribute === null) {
            throw new Error("Missing the required parameter 'createAttribute' when calling createAttribute");
          }
          var pathParams = {
            "attributeCategory": attributeCategory,
            "attributeName": attributeName
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/contacts/attributes/{attributeCategory}/{attributeName}",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.createAttribute = function(attributeCategory, attributeName, createAttribute) {
          return this.createAttributeWithHttpInfo(attributeCategory, attributeName, createAttribute).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.createContactWithHttpInfo = function(createContact) {
          var postBody = createContact;
          if (createContact === void 0 || createContact === null) {
            throw new Error("Missing the required parameter 'createContact' when calling createContact");
          }
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = CreateUpdateContactModel;
          return this.apiClient.callApi(
            "/contacts",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.createContact = function(createContact) {
          return this.createContactWithHttpInfo(createContact).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.createDoiContactWithHttpInfo = function(createDoiContact) {
          var postBody = createDoiContact;
          if (createDoiContact === void 0 || createDoiContact === null) {
            throw new Error("Missing the required parameter 'createDoiContact' when calling createDoiContact");
          }
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/contacts/doubleOptinConfirmation",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.createDoiContact = function(createDoiContact) {
          return this.createDoiContactWithHttpInfo(createDoiContact).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.createFolderWithHttpInfo = function(createFolder) {
          var postBody = createFolder;
          if (createFolder === void 0 || createFolder === null) {
            throw new Error("Missing the required parameter 'createFolder' when calling createFolder");
          }
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = CreateModel;
          return this.apiClient.callApi(
            "/contacts/folders",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.createFolder = function(createFolder) {
          return this.createFolderWithHttpInfo(createFolder).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.createListWithHttpInfo = function(createList) {
          var postBody = createList;
          if (createList === void 0 || createList === null) {
            throw new Error("Missing the required parameter 'createList' when calling createList");
          }
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = CreateModel;
          return this.apiClient.callApi(
            "/contacts/lists",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.createList = function(createList) {
          return this.createListWithHttpInfo(createList).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.deleteAttributeWithHttpInfo = function(attributeCategory, attributeName) {
          var postBody = null;
          if (attributeCategory === void 0 || attributeCategory === null) {
            throw new Error("Missing the required parameter 'attributeCategory' when calling deleteAttribute");
          }
          if (attributeName === void 0 || attributeName === null) {
            throw new Error("Missing the required parameter 'attributeName' when calling deleteAttribute");
          }
          var pathParams = {
            "attributeCategory": attributeCategory,
            "attributeName": attributeName
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/contacts/attributes/{attributeCategory}/{attributeName}",
            "DELETE",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.deleteAttribute = function(attributeCategory, attributeName) {
          return this.deleteAttributeWithHttpInfo(attributeCategory, attributeName).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.deleteContactWithHttpInfo = function(identifier) {
          var postBody = null;
          if (identifier === void 0 || identifier === null) {
            throw new Error("Missing the required parameter 'identifier' when calling deleteContact");
          }
          var pathParams = {
            "identifier": identifier
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/contacts/{identifier}",
            "DELETE",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.deleteContact = function(identifier) {
          return this.deleteContactWithHttpInfo(identifier).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.deleteFolderWithHttpInfo = function(folderId) {
          var postBody = null;
          if (folderId === void 0 || folderId === null) {
            throw new Error("Missing the required parameter 'folderId' when calling deleteFolder");
          }
          var pathParams = {
            "folderId": folderId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/contacts/folders/{folderId}",
            "DELETE",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.deleteFolder = function(folderId) {
          return this.deleteFolderWithHttpInfo(folderId).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.deleteListWithHttpInfo = function(listId) {
          var postBody = null;
          if (listId === void 0 || listId === null) {
            throw new Error("Missing the required parameter 'listId' when calling deleteList");
          }
          var pathParams = {
            "listId": listId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/contacts/lists/{listId}",
            "DELETE",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.deleteList = function(listId) {
          return this.deleteListWithHttpInfo(listId).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getAttributesWithHttpInfo = function() {
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetAttributes;
          return this.apiClient.callApi(
            "/contacts/attributes",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getAttributes = function() {
          return this.getAttributesWithHttpInfo().then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getContactInfoWithHttpInfo = function(identifier, opts) {
          opts = opts || {};
          var postBody = null;
          if (identifier === void 0 || identifier === null) {
            throw new Error("Missing the required parameter 'identifier' when calling getContactInfo");
          }
          var pathParams = {
            "identifier": identifier
          };
          var queryParams = {
            "startDate": opts["startDate"],
            "endDate": opts["endDate"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetExtendedContactDetails;
          return this.apiClient.callApi(
            "/contacts/{identifier}",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getContactInfo = function(identifier, opts) {
          return this.getContactInfoWithHttpInfo(identifier, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getContactStatsWithHttpInfo = function(identifier, opts) {
          opts = opts || {};
          var postBody = null;
          if (identifier === void 0 || identifier === null) {
            throw new Error("Missing the required parameter 'identifier' when calling getContactStats");
          }
          var pathParams = {
            "identifier": identifier
          };
          var queryParams = {
            "startDate": opts["startDate"],
            "endDate": opts["endDate"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetContactCampaignStats;
          return this.apiClient.callApi(
            "/contacts/{identifier}/campaignStats",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getContactStats = function(identifier, opts) {
          return this.getContactStatsWithHttpInfo(identifier, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getContactsWithHttpInfo = function(opts) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "modifiedSince": opts["modifiedSince"],
            "sort": opts["sort"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetContacts;
          return this.apiClient.callApi(
            "/contacts",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getContacts = function(opts) {
          return this.getContactsWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getContactsFromListWithHttpInfo = function(listId, opts) {
          opts = opts || {};
          var postBody = null;
          if (listId === void 0 || listId === null) {
            throw new Error("Missing the required parameter 'listId' when calling getContactsFromList");
          }
          var pathParams = {
            "listId": listId
          };
          var queryParams = {
            "modifiedSince": opts["modifiedSince"],
            "limit": opts["limit"],
            "offset": opts["offset"],
            "sort": opts["sort"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetContacts;
          return this.apiClient.callApi(
            "/contacts/lists/{listId}/contacts",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getContactsFromList = function(listId, opts) {
          return this.getContactsFromListWithHttpInfo(listId, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getFolderWithHttpInfo = function(folderId) {
          var postBody = null;
          if (folderId === void 0 || folderId === null) {
            throw new Error("Missing the required parameter 'folderId' when calling getFolder");
          }
          var pathParams = {
            "folderId": folderId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetFolder;
          return this.apiClient.callApi(
            "/contacts/folders/{folderId}",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getFolder = function(folderId) {
          return this.getFolderWithHttpInfo(folderId).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getFolderListsWithHttpInfo = function(folderId, opts) {
          opts = opts || {};
          var postBody = null;
          if (folderId === void 0 || folderId === null) {
            throw new Error("Missing the required parameter 'folderId' when calling getFolderLists");
          }
          var pathParams = {
            "folderId": folderId
          };
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "sort": opts["sort"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetFolderLists;
          return this.apiClient.callApi(
            "/contacts/folders/{folderId}/lists",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getFolderLists = function(folderId, opts) {
          return this.getFolderListsWithHttpInfo(folderId, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getFoldersWithHttpInfo = function(limit, offset, opts) {
          opts = opts || {};
          var postBody = null;
          if (limit === void 0 || limit === null) {
            throw new Error("Missing the required parameter 'limit' when calling getFolders");
          }
          if (offset === void 0 || offset === null) {
            throw new Error("Missing the required parameter 'offset' when calling getFolders");
          }
          var pathParams = {};
          var queryParams = {
            "limit": limit,
            "offset": offset,
            "sort": opts["sort"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetFolders;
          return this.apiClient.callApi(
            "/contacts/folders",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getFolders = function(limit, offset, opts) {
          return this.getFoldersWithHttpInfo(limit, offset, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getListWithHttpInfo = function(listId) {
          var postBody = null;
          if (listId === void 0 || listId === null) {
            throw new Error("Missing the required parameter 'listId' when calling getList");
          }
          var pathParams = {
            "listId": listId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetExtendedList;
          return this.apiClient.callApi(
            "/contacts/lists/{listId}",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getList = function(listId) {
          return this.getListWithHttpInfo(listId).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getListsWithHttpInfo = function(opts) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "sort": opts["sort"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetLists;
          return this.apiClient.callApi(
            "/contacts/lists",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getLists = function(opts) {
          return this.getListsWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.importContactsWithHttpInfo = function(requestContactImport) {
          var postBody = requestContactImport;
          if (requestContactImport === void 0 || requestContactImport === null) {
            throw new Error("Missing the required parameter 'requestContactImport' when calling importContacts");
          }
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = CreatedProcessId;
          return this.apiClient.callApi(
            "/contacts/import",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.importContacts = function(requestContactImport) {
          return this.importContactsWithHttpInfo(requestContactImport).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.removeContactFromListWithHttpInfo = function(listId, contactEmails) {
          var postBody = contactEmails;
          if (listId === void 0 || listId === null) {
            throw new Error("Missing the required parameter 'listId' when calling removeContactFromList");
          }
          if (contactEmails === void 0 || contactEmails === null) {
            throw new Error("Missing the required parameter 'contactEmails' when calling removeContactFromList");
          }
          var pathParams = {
            "listId": listId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = PostContactInfo;
          return this.apiClient.callApi(
            "/contacts/lists/{listId}/contacts/remove",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.removeContactFromList = function(listId, contactEmails) {
          return this.removeContactFromListWithHttpInfo(listId, contactEmails).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.requestContactExportWithHttpInfo = function(requestContactExport) {
          var postBody = requestContactExport;
          if (requestContactExport === void 0 || requestContactExport === null) {
            throw new Error("Missing the required parameter 'requestContactExport' when calling requestContactExport");
          }
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = CreatedProcessId;
          return this.apiClient.callApi(
            "/contacts/export",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.requestContactExport = function(requestContactExport) {
          return this.requestContactExportWithHttpInfo(requestContactExport).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.updateAttributeWithHttpInfo = function(attributeCategory, attributeName, updateAttribute) {
          var postBody = updateAttribute;
          if (attributeCategory === void 0 || attributeCategory === null) {
            throw new Error("Missing the required parameter 'attributeCategory' when calling updateAttribute");
          }
          if (attributeName === void 0 || attributeName === null) {
            throw new Error("Missing the required parameter 'attributeName' when calling updateAttribute");
          }
          if (updateAttribute === void 0 || updateAttribute === null) {
            throw new Error("Missing the required parameter 'updateAttribute' when calling updateAttribute");
          }
          var pathParams = {
            "attributeCategory": attributeCategory,
            "attributeName": attributeName
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/contacts/attributes/{attributeCategory}/{attributeName}",
            "PUT",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.updateAttribute = function(attributeCategory, attributeName, updateAttribute) {
          return this.updateAttributeWithHttpInfo(attributeCategory, attributeName, updateAttribute).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.updateBatchContactsWithHttpInfo = function(updateBatchContacts) {
          var postBody = updateBatchContacts;
          if (updateBatchContacts === void 0 || updateBatchContacts === null) {
            throw new Error("Missing the required parameter 'updateBatchContacts' when calling updateBatchContacts");
          }
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/contacts/batch",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.updateBatchContacts = function(updateBatchContacts) {
          return this.updateBatchContactsWithHttpInfo(updateBatchContacts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.updateContactWithHttpInfo = function(identifier, updateContact) {
          var postBody = updateContact;
          if (identifier === void 0 || identifier === null) {
            throw new Error("Missing the required parameter 'identifier' when calling updateContact");
          }
          if (updateContact === void 0 || updateContact === null) {
            throw new Error("Missing the required parameter 'updateContact' when calling updateContact");
          }
          var pathParams = {
            "identifier": identifier
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/contacts/{identifier}",
            "PUT",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.updateContact = function(identifier, updateContact) {
          return this.updateContactWithHttpInfo(identifier, updateContact).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.updateFolderWithHttpInfo = function(folderId, updateFolder) {
          var postBody = updateFolder;
          if (folderId === void 0 || folderId === null) {
            throw new Error("Missing the required parameter 'folderId' when calling updateFolder");
          }
          if (updateFolder === void 0 || updateFolder === null) {
            throw new Error("Missing the required parameter 'updateFolder' when calling updateFolder");
          }
          var pathParams = {
            "folderId": folderId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/contacts/folders/{folderId}",
            "PUT",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.updateFolder = function(folderId, updateFolder) {
          return this.updateFolderWithHttpInfo(folderId, updateFolder).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.updateListWithHttpInfo = function(listId, updateList) {
          var postBody = updateList;
          if (listId === void 0 || listId === null) {
            throw new Error("Missing the required parameter 'listId' when calling updateList");
          }
          if (updateList === void 0 || updateList === null) {
            throw new Error("Missing the required parameter 'updateList' when calling updateList");
          }
          var pathParams = {
            "listId": listId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/contacts/lists/{listId}",
            "PUT",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.updateList = function(listId, updateList) {
          return this.updateListWithHttpInfo(listId, updateList).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/api/DealsApi.js
var require_DealsApi = __commonJS({
  "node_modules/sib-api-v3-sdk/src/api/DealsApi.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/Body", "model/Body1", "model/Deal", "model/DealAttributes", "model/DealsList", "model/ErrorModel", "model/InlineResponse201", "model/Pipeline"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_Body(), require_Body1(), require_Deal(), require_DealAttributes(), require_DealsList(), require_ErrorModel(), require_InlineResponse201(), require_Pipeline());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.DealsApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.Body, root.SibApiV3Sdk.Body1, root.SibApiV3Sdk.Deal, root.SibApiV3Sdk.DealAttributes, root.SibApiV3Sdk.DealsList, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.InlineResponse201, root.SibApiV3Sdk.Pipeline);
      }
    })(exports, function(ApiClient, Body, Body1, Deal, DealAttributes, DealsList, ErrorModel, InlineResponse201, Pipeline) {
      "use strict";
      var exports2 = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
        this.crmAttributesDealsGetWithHttpInfo = function() {
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = DealAttributes;
          return this.apiClient.callApi(
            "/crm/attributes/deals",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.crmAttributesDealsGet = function() {
          return this.crmAttributesDealsGetWithHttpInfo().then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.crmDealsGetWithHttpInfo = function(opts) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "filter[attributes]": opts["filterAttributes"],
            "filter[linkedCompaniesIds]": opts["filterLinkedCompaniesIds"],
            "filter[linkedContactsIds]": opts["filterLinkedContactsIds"],
            "offset": opts["offset"],
            "limit": opts["limit"],
            "sort": opts["sort"],
            "sortBy": opts["sortBy"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = DealsList;
          return this.apiClient.callApi(
            "/crm/deals",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.crmDealsGet = function(opts) {
          return this.crmDealsGetWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.crmDealsIdDeleteWithHttpInfo = function(id) {
          var postBody = null;
          if (id === void 0 || id === null) {
            throw new Error("Missing the required parameter 'id' when calling crmDealsIdDelete");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/crm/deals/{id}",
            "DELETE",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.crmDealsIdDelete = function(id) {
          return this.crmDealsIdDeleteWithHttpInfo(id).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.crmDealsIdGetWithHttpInfo = function(id) {
          var postBody = null;
          if (id === void 0 || id === null) {
            throw new Error("Missing the required parameter 'id' when calling crmDealsIdGet");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = Deal;
          return this.apiClient.callApi(
            "/crm/deals/{id}",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.crmDealsIdGet = function(id) {
          return this.crmDealsIdGetWithHttpInfo(id).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.crmDealsIdPatchWithHttpInfo = function(id, body) {
          var postBody = body;
          if (id === void 0 || id === null) {
            throw new Error("Missing the required parameter 'id' when calling crmDealsIdPatch");
          }
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling crmDealsIdPatch");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/crm/deals/{id}",
            "PATCH",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.crmDealsIdPatch = function(id, body) {
          return this.crmDealsIdPatchWithHttpInfo(id, body).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.crmDealsPostWithHttpInfo = function(body) {
          var postBody = body;
          if (body === void 0 || body === null) {
            throw new Error("Missing the required parameter 'body' when calling crmDealsPost");
          }
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = InlineResponse201;
          return this.apiClient.callApi(
            "/crm/deals",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.crmDealsPost = function(body) {
          return this.crmDealsPostWithHttpInfo(body).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.crmPipelineDetailsGetWithHttpInfo = function() {
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = Pipeline;
          return this.apiClient.callApi(
            "/crm/pipeline/details",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.crmPipelineDetailsGet = function() {
          return this.crmPipelineDetailsGetWithHttpInfo().then(function(response_and_data) {
            return response_and_data.data;
          });
        };
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/api/EmailCampaignsApi.js
var require_EmailCampaignsApi = __commonJS({
  "node_modules/sib-api-v3-sdk/src/api/EmailCampaignsApi.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/AbTestCampaignResult", "model/CreateEmailCampaign", "model/CreateModel", "model/CreatedProcessId", "model/EmailExportRecipients", "model/ErrorModel", "model/GetEmailCampaign", "model/GetEmailCampaigns", "model/GetSharedTemplateUrl", "model/PostSendFailed", "model/SendReport", "model/SendTestEmail", "model/UpdateCampaignStatus", "model/UpdateEmailCampaign", "model/UploadImageToGallery"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_AbTestCampaignResult(), require_CreateEmailCampaign(), require_CreateModel(), require_CreatedProcessId(), require_EmailExportRecipients(), require_ErrorModel(), require_GetEmailCampaign(), require_GetEmailCampaigns(), require_GetSharedTemplateUrl(), require_PostSendFailed(), require_SendReport(), require_SendTestEmail(), require_UpdateCampaignStatus(), require_UpdateEmailCampaign(), require_UploadImageToGallery());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.EmailCampaignsApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.AbTestCampaignResult, root.SibApiV3Sdk.CreateEmailCampaign, root.SibApiV3Sdk.CreateModel, root.SibApiV3Sdk.CreatedProcessId, root.SibApiV3Sdk.EmailExportRecipients, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetEmailCampaign, root.SibApiV3Sdk.GetEmailCampaigns, root.SibApiV3Sdk.GetSharedTemplateUrl, root.SibApiV3Sdk.PostSendFailed, root.SibApiV3Sdk.SendReport, root.SibApiV3Sdk.SendTestEmail, root.SibApiV3Sdk.UpdateCampaignStatus, root.SibApiV3Sdk.UpdateEmailCampaign, root.SibApiV3Sdk.UploadImageToGallery);
      }
    })(exports, function(ApiClient, AbTestCampaignResult, CreateEmailCampaign, CreateModel, CreatedProcessId, EmailExportRecipients, ErrorModel, GetEmailCampaign, GetEmailCampaigns, GetSharedTemplateUrl, PostSendFailed, SendReport, SendTestEmail, UpdateCampaignStatus, UpdateEmailCampaign, UploadImageToGallery) {
      "use strict";
      var exports2 = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
        this.createEmailCampaignWithHttpInfo = function(emailCampaigns) {
          var postBody = emailCampaigns;
          if (emailCampaigns === void 0 || emailCampaigns === null) {
            throw new Error("Missing the required parameter 'emailCampaigns' when calling createEmailCampaign");
          }
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = CreateModel;
          return this.apiClient.callApi(
            "/emailCampaigns",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.createEmailCampaign = function(emailCampaigns) {
          return this.createEmailCampaignWithHttpInfo(emailCampaigns).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.deleteEmailCampaignWithHttpInfo = function(campaignId) {
          var postBody = null;
          if (campaignId === void 0 || campaignId === null) {
            throw new Error("Missing the required parameter 'campaignId' when calling deleteEmailCampaign");
          }
          var pathParams = {
            "campaignId": campaignId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/emailCampaigns/{campaignId}",
            "DELETE",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.deleteEmailCampaign = function(campaignId) {
          return this.deleteEmailCampaignWithHttpInfo(campaignId).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.emailExportRecipientsWithHttpInfo = function(campaignId, opts) {
          opts = opts || {};
          var postBody = opts["recipientExport"];
          if (campaignId === void 0 || campaignId === null) {
            throw new Error("Missing the required parameter 'campaignId' when calling emailExportRecipients");
          }
          var pathParams = {
            "campaignId": campaignId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = CreatedProcessId;
          return this.apiClient.callApi(
            "/emailCampaigns/{campaignId}/exportRecipients",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.emailExportRecipients = function(campaignId, opts) {
          return this.emailExportRecipientsWithHttpInfo(campaignId, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getAbTestCampaignResultWithHttpInfo = function(campaignId) {
          var postBody = null;
          if (campaignId === void 0 || campaignId === null) {
            throw new Error("Missing the required parameter 'campaignId' when calling getAbTestCampaignResult");
          }
          var pathParams = {
            "campaignId": campaignId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = AbTestCampaignResult;
          return this.apiClient.callApi(
            "/emailCampaigns/{campaignId}/abTestCampaignResult",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getAbTestCampaignResult = function(campaignId) {
          return this.getAbTestCampaignResultWithHttpInfo(campaignId).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getEmailCampaignWithHttpInfo = function(campaignId) {
          var postBody = null;
          if (campaignId === void 0 || campaignId === null) {
            throw new Error("Missing the required parameter 'campaignId' when calling getEmailCampaign");
          }
          var pathParams = {
            "campaignId": campaignId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetEmailCampaign;
          return this.apiClient.callApi(
            "/emailCampaigns/{campaignId}",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getEmailCampaign = function(campaignId) {
          return this.getEmailCampaignWithHttpInfo(campaignId).then(function(response_and_data) {
            return JSON.parse(response_and_data.response.text);
          });
        };
        this.getEmailCampaignsWithHttpInfo = function(opts) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "type": opts["type"],
            "status": opts["status"],
            "startDate": opts["startDate"],
            "endDate": opts["endDate"],
            "limit": opts["limit"],
            "offset": opts["offset"],
            "sort": opts["sort"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetEmailCampaigns;
          return this.apiClient.callApi(
            "/emailCampaigns",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getEmailCampaigns = function(opts) {
          return this.getEmailCampaignsWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getSharedTemplateUrlWithHttpInfo = function(campaignId) {
          var postBody = null;
          if (campaignId === void 0 || campaignId === null) {
            throw new Error("Missing the required parameter 'campaignId' when calling getSharedTemplateUrl");
          }
          var pathParams = {
            "campaignId": campaignId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetSharedTemplateUrl;
          return this.apiClient.callApi(
            "/emailCampaigns/{campaignId}/sharedUrl",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getSharedTemplateUrl = function(campaignId) {
          return this.getSharedTemplateUrlWithHttpInfo(campaignId).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.sendEmailCampaignNowWithHttpInfo = function(campaignId) {
          var postBody = null;
          if (campaignId === void 0 || campaignId === null) {
            throw new Error("Missing the required parameter 'campaignId' when calling sendEmailCampaignNow");
          }
          var pathParams = {
            "campaignId": campaignId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/emailCampaigns/{campaignId}/sendNow",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.sendEmailCampaignNow = function(campaignId) {
          return this.sendEmailCampaignNowWithHttpInfo(campaignId).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.sendReportWithHttpInfo = function(campaignId, sendReport) {
          var postBody = sendReport;
          if (campaignId === void 0 || campaignId === null) {
            throw new Error("Missing the required parameter 'campaignId' when calling sendReport");
          }
          if (sendReport === void 0 || sendReport === null) {
            throw new Error("Missing the required parameter 'sendReport' when calling sendReport");
          }
          var pathParams = {
            "campaignId": campaignId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/emailCampaigns/{campaignId}/sendReport",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.sendReport = function(campaignId, sendReport) {
          return this.sendReportWithHttpInfo(campaignId, sendReport).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.sendTestEmailWithHttpInfo = function(campaignId, emailTo) {
          var postBody = emailTo;
          if (campaignId === void 0 || campaignId === null) {
            throw new Error("Missing the required parameter 'campaignId' when calling sendTestEmail");
          }
          if (emailTo === void 0 || emailTo === null) {
            throw new Error("Missing the required parameter 'emailTo' when calling sendTestEmail");
          }
          var pathParams = {
            "campaignId": campaignId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/emailCampaigns/{campaignId}/sendTest",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.sendTestEmail = function(campaignId, emailTo) {
          return this.sendTestEmailWithHttpInfo(campaignId, emailTo).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.updateCampaignStatusWithHttpInfo = function(campaignId, status) {
          var postBody = status;
          if (campaignId === void 0 || campaignId === null) {
            throw new Error("Missing the required parameter 'campaignId' when calling updateCampaignStatus");
          }
          if (status === void 0 || status === null) {
            throw new Error("Missing the required parameter 'status' when calling updateCampaignStatus");
          }
          var pathParams = {
            "campaignId": campaignId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/emailCampaigns/{campaignId}/status",
            "PUT",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.updateCampaignStatus = function(campaignId, status) {
          return this.updateCampaignStatusWithHttpInfo(campaignId, status).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.updateEmailCampaignWithHttpInfo = function(campaignId, emailCampaign) {
          var postBody = emailCampaign;
          if (campaignId === void 0 || campaignId === null) {
            throw new Error("Missing the required parameter 'campaignId' when calling updateEmailCampaign");
          }
          if (emailCampaign === void 0 || emailCampaign === null) {
            throw new Error("Missing the required parameter 'emailCampaign' when calling updateEmailCampaign");
          }
          var pathParams = {
            "campaignId": campaignId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/emailCampaigns/{campaignId}",
            "PUT",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.updateEmailCampaign = function(campaignId, emailCampaign) {
          return this.updateEmailCampaignWithHttpInfo(campaignId, emailCampaign).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.uploadImageToGalleryWithHttpInfo = function(uploadImage) {
          var postBody = uploadImage;
          if (uploadImage === void 0 || uploadImage === null) {
            throw new Error("Missing the required parameter 'uploadImage' when calling uploadImageToGallery");
          }
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/emailCampaigns/images",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.uploadImageToGallery = function(uploadImage) {
          return this.uploadImageToGalleryWithHttpInfo(uploadImage).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/api/FoldersApi.js
var require_FoldersApi = __commonJS({
  "node_modules/sib-api-v3-sdk/src/api/FoldersApi.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/CreateModel", "model/CreateUpdateFolder", "model/ErrorModel", "model/GetFolder", "model/GetFolderLists", "model/GetFolders"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_CreateModel(), require_CreateUpdateFolder(), require_ErrorModel(), require_GetFolder(), require_GetFolderLists(), require_GetFolders());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.FoldersApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.CreateModel, root.SibApiV3Sdk.CreateUpdateFolder, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetFolder, root.SibApiV3Sdk.GetFolderLists, root.SibApiV3Sdk.GetFolders);
      }
    })(exports, function(ApiClient, CreateModel, CreateUpdateFolder, ErrorModel, GetFolder, GetFolderLists, GetFolders) {
      "use strict";
      var exports2 = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
        this.createFolderWithHttpInfo = function(createFolder) {
          var postBody = createFolder;
          if (createFolder === void 0 || createFolder === null) {
            throw new Error("Missing the required parameter 'createFolder' when calling createFolder");
          }
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = CreateModel;
          return this.apiClient.callApi(
            "/contacts/folders",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.createFolder = function(createFolder) {
          return this.createFolderWithHttpInfo(createFolder).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.deleteFolderWithHttpInfo = function(folderId) {
          var postBody = null;
          if (folderId === void 0 || folderId === null) {
            throw new Error("Missing the required parameter 'folderId' when calling deleteFolder");
          }
          var pathParams = {
            "folderId": folderId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/contacts/folders/{folderId}",
            "DELETE",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.deleteFolder = function(folderId) {
          return this.deleteFolderWithHttpInfo(folderId).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getFolderWithHttpInfo = function(folderId) {
          var postBody = null;
          if (folderId === void 0 || folderId === null) {
            throw new Error("Missing the required parameter 'folderId' when calling getFolder");
          }
          var pathParams = {
            "folderId": folderId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetFolder;
          return this.apiClient.callApi(
            "/contacts/folders/{folderId}",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getFolder = function(folderId) {
          return this.getFolderWithHttpInfo(folderId).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getFolderListsWithHttpInfo = function(folderId, opts) {
          opts = opts || {};
          var postBody = null;
          if (folderId === void 0 || folderId === null) {
            throw new Error("Missing the required parameter 'folderId' when calling getFolderLists");
          }
          var pathParams = {
            "folderId": folderId
          };
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "sort": opts["sort"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetFolderLists;
          return this.apiClient.callApi(
            "/contacts/folders/{folderId}/lists",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getFolderLists = function(folderId, opts) {
          return this.getFolderListsWithHttpInfo(folderId, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getFoldersWithHttpInfo = function(limit, offset, opts) {
          opts = opts || {};
          var postBody = null;
          if (limit === void 0 || limit === null) {
            throw new Error("Missing the required parameter 'limit' when calling getFolders");
          }
          if (offset === void 0 || offset === null) {
            throw new Error("Missing the required parameter 'offset' when calling getFolders");
          }
          var pathParams = {};
          var queryParams = {
            "limit": limit,
            "offset": offset,
            "sort": opts["sort"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetFolders;
          return this.apiClient.callApi(
            "/contacts/folders",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getFolders = function(limit, offset, opts) {
          return this.getFoldersWithHttpInfo(limit, offset, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.updateFolderWithHttpInfo = function(folderId, updateFolder) {
          var postBody = updateFolder;
          if (folderId === void 0 || folderId === null) {
            throw new Error("Missing the required parameter 'folderId' when calling updateFolder");
          }
          if (updateFolder === void 0 || updateFolder === null) {
            throw new Error("Missing the required parameter 'updateFolder' when calling updateFolder");
          }
          var pathParams = {
            "folderId": folderId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/contacts/folders/{folderId}",
            "PUT",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.updateFolder = function(folderId, updateFolder) {
          return this.updateFolderWithHttpInfo(folderId, updateFolder).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/api/InboundParsingApi.js
var require_InboundParsingApi = __commonJS({
  "node_modules/sib-api-v3-sdk/src/api/InboundParsingApi.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/ErrorModel", "model/GetInboundEmailEvents", "model/GetInboundEmailEventsByUuid"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_ErrorModel(), require_GetInboundEmailEvents(), require_GetInboundEmailEventsByUuid());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.InboundParsingApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetInboundEmailEvents, root.SibApiV3Sdk.GetInboundEmailEventsByUuid);
      }
    })(exports, function(ApiClient, ErrorModel, GetInboundEmailEvents, GetInboundEmailEventsByUuid) {
      "use strict";
      var exports2 = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
        this.getInboundEmailEventsWithHttpInfo = function(opts) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "sender": opts["sender"],
            "startDate": opts["startDate"],
            "endDate": opts["endDate"],
            "limit": opts["limit"],
            "offset": opts["offset"],
            "sort": opts["sort"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetInboundEmailEvents;
          return this.apiClient.callApi(
            "/inbound/events",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getInboundEmailEvents = function(opts) {
          return this.getInboundEmailEventsWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getInboundEmailEventsByUuidWithHttpInfo = function(uuid) {
          var postBody = null;
          if (uuid === void 0 || uuid === null) {
            throw new Error("Missing the required parameter 'uuid' when calling getInboundEmailEventsByUuid");
          }
          var pathParams = {
            "uuid": uuid
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetInboundEmailEventsByUuid;
          return this.apiClient.callApi(
            "/inbound/events/{uuid}",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getInboundEmailEventsByUuid = function(uuid) {
          return this.getInboundEmailEventsByUuidWithHttpInfo(uuid).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/api/ListsApi.js
var require_ListsApi = __commonJS({
  "node_modules/sib-api-v3-sdk/src/api/ListsApi.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/AddContactToList", "model/CreateList", "model/CreateModel", "model/ErrorModel", "model/GetContacts", "model/GetExtendedList", "model/GetFolderLists", "model/GetLists", "model/PostContactInfo", "model/RemoveContactFromList", "model/UpdateList"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_AddContactToList(), require_CreateList(), require_CreateModel(), require_ErrorModel(), require_GetContacts(), require_GetExtendedList(), require_GetFolderLists(), require_GetLists(), require_PostContactInfo(), require_RemoveContactFromList(), require_UpdateList());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.ListsApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.AddContactToList, root.SibApiV3Sdk.CreateList, root.SibApiV3Sdk.CreateModel, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetContacts, root.SibApiV3Sdk.GetExtendedList, root.SibApiV3Sdk.GetFolderLists, root.SibApiV3Sdk.GetLists, root.SibApiV3Sdk.PostContactInfo, root.SibApiV3Sdk.RemoveContactFromList, root.SibApiV3Sdk.UpdateList);
      }
    })(exports, function(ApiClient, AddContactToList, CreateList, CreateModel, ErrorModel, GetContacts, GetExtendedList, GetFolderLists, GetLists, PostContactInfo, RemoveContactFromList, UpdateList) {
      "use strict";
      var exports2 = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
        this.addContactToListWithHttpInfo = function(listId, contactEmails) {
          var postBody = contactEmails;
          if (listId === void 0 || listId === null) {
            throw new Error("Missing the required parameter 'listId' when calling addContactToList");
          }
          if (contactEmails === void 0 || contactEmails === null) {
            throw new Error("Missing the required parameter 'contactEmails' when calling addContactToList");
          }
          var pathParams = {
            "listId": listId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = PostContactInfo;
          return this.apiClient.callApi(
            "/contacts/lists/{listId}/contacts/add",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.addContactToList = function(listId, contactEmails) {
          return this.addContactToListWithHttpInfo(listId, contactEmails).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.createListWithHttpInfo = function(createList) {
          var postBody = createList;
          if (createList === void 0 || createList === null) {
            throw new Error("Missing the required parameter 'createList' when calling createList");
          }
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = CreateModel;
          return this.apiClient.callApi(
            "/contacts/lists",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.createList = function(createList) {
          return this.createListWithHttpInfo(createList).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.deleteListWithHttpInfo = function(listId) {
          var postBody = null;
          if (listId === void 0 || listId === null) {
            throw new Error("Missing the required parameter 'listId' when calling deleteList");
          }
          var pathParams = {
            "listId": listId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/contacts/lists/{listId}",
            "DELETE",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.deleteList = function(listId) {
          return this.deleteListWithHttpInfo(listId).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getContactsFromListWithHttpInfo = function(listId, opts) {
          opts = opts || {};
          var postBody = null;
          if (listId === void 0 || listId === null) {
            throw new Error("Missing the required parameter 'listId' when calling getContactsFromList");
          }
          var pathParams = {
            "listId": listId
          };
          var queryParams = {
            "modifiedSince": opts["modifiedSince"],
            "limit": opts["limit"],
            "offset": opts["offset"],
            "sort": opts["sort"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetContacts;
          return this.apiClient.callApi(
            "/contacts/lists/{listId}/contacts",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getContactsFromList = function(listId, opts) {
          return this.getContactsFromListWithHttpInfo(listId, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getFolderListsWithHttpInfo = function(folderId, opts) {
          opts = opts || {};
          var postBody = null;
          if (folderId === void 0 || folderId === null) {
            throw new Error("Missing the required parameter 'folderId' when calling getFolderLists");
          }
          var pathParams = {
            "folderId": folderId
          };
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "sort": opts["sort"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetFolderLists;
          return this.apiClient.callApi(
            "/contacts/folders/{folderId}/lists",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getFolderLists = function(folderId, opts) {
          return this.getFolderListsWithHttpInfo(folderId, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getListWithHttpInfo = function(listId) {
          var postBody = null;
          if (listId === void 0 || listId === null) {
            throw new Error("Missing the required parameter 'listId' when calling getList");
          }
          var pathParams = {
            "listId": listId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetExtendedList;
          return this.apiClient.callApi(
            "/contacts/lists/{listId}",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getList = function(listId) {
          return this.getListWithHttpInfo(listId).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getListsWithHttpInfo = function(opts) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "sort": opts["sort"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetLists;
          return this.apiClient.callApi(
            "/contacts/lists",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getLists = function(opts) {
          return this.getListsWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.removeContactFromListWithHttpInfo = function(listId, contactEmails) {
          var postBody = contactEmails;
          if (listId === void 0 || listId === null) {
            throw new Error("Missing the required parameter 'listId' when calling removeContactFromList");
          }
          if (contactEmails === void 0 || contactEmails === null) {
            throw new Error("Missing the required parameter 'contactEmails' when calling removeContactFromList");
          }
          var pathParams = {
            "listId": listId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = PostContactInfo;
          return this.apiClient.callApi(
            "/contacts/lists/{listId}/contacts/remove",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.removeContactFromList = function(listId, contactEmails) {
          return this.removeContactFromListWithHttpInfo(listId, contactEmails).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.updateListWithHttpInfo = function(listId, updateList) {
          var postBody = updateList;
          if (listId === void 0 || listId === null) {
            throw new Error("Missing the required parameter 'listId' when calling updateList");
          }
          if (updateList === void 0 || updateList === null) {
            throw new Error("Missing the required parameter 'updateList' when calling updateList");
          }
          var pathParams = {
            "listId": listId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/contacts/lists/{listId}",
            "PUT",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.updateList = function(listId, updateList) {
          return this.updateListWithHttpInfo(listId, updateList).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/api/MasterAccountApi.js
var require_MasterAccountApi = __commonJS({
  "node_modules/sib-api-v3-sdk/src/api/MasterAccountApi.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/CreateSubAccount", "model/CreateSubAccountResponse", "model/ErrorModel", "model/GetSsoToken", "model/MasterDetailsResponse", "model/SsoTokenRequest", "model/SubAccountDetailsResponse", "model/SubAccountUpdatePlanRequest", "model/SubAccountsResponse"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_CreateSubAccount(), require_CreateSubAccountResponse(), require_ErrorModel(), require_GetSsoToken(), require_MasterDetailsResponse(), require_SsoTokenRequest(), require_SubAccountDetailsResponse(), require_SubAccountUpdatePlanRequest(), require_SubAccountsResponse());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.MasterAccountApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.CreateSubAccount, root.SibApiV3Sdk.CreateSubAccountResponse, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetSsoToken, root.SibApiV3Sdk.MasterDetailsResponse, root.SibApiV3Sdk.SsoTokenRequest, root.SibApiV3Sdk.SubAccountDetailsResponse, root.SibApiV3Sdk.SubAccountUpdatePlanRequest, root.SibApiV3Sdk.SubAccountsResponse);
      }
    })(exports, function(ApiClient, CreateSubAccount, CreateSubAccountResponse, ErrorModel, GetSsoToken, MasterDetailsResponse, SsoTokenRequest, SubAccountDetailsResponse, SubAccountUpdatePlanRequest, SubAccountsResponse) {
      "use strict";
      var exports2 = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
        this.corporateMasterAccountGetWithHttpInfo = function() {
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = MasterDetailsResponse;
          return this.apiClient.callApi(
            "/corporate/masterAccount",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.corporateMasterAccountGet = function() {
          return this.corporateMasterAccountGetWithHttpInfo().then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.corporateSubAccountGetWithHttpInfo = function(offset, limit) {
          var postBody = null;
          if (offset === void 0 || offset === null) {
            throw new Error("Missing the required parameter 'offset' when calling corporateSubAccountGet");
          }
          if (limit === void 0 || limit === null) {
            throw new Error("Missing the required parameter 'limit' when calling corporateSubAccountGet");
          }
          var pathParams = {};
          var queryParams = {
            "offset": offset,
            "limit": limit
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = SubAccountsResponse;
          return this.apiClient.callApi(
            "/corporate/subAccount",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.corporateSubAccountGet = function(offset, limit) {
          return this.corporateSubAccountGetWithHttpInfo(offset, limit).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.corporateSubAccountIdDeleteWithHttpInfo = function(id) {
          var postBody = null;
          if (id === void 0 || id === null) {
            throw new Error("Missing the required parameter 'id' when calling corporateSubAccountIdDelete");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/corporate/subAccount/{id}",
            "DELETE",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.corporateSubAccountIdDelete = function(id) {
          return this.corporateSubAccountIdDeleteWithHttpInfo(id).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.corporateSubAccountIdGetWithHttpInfo = function(id) {
          var postBody = null;
          if (id === void 0 || id === null) {
            throw new Error("Missing the required parameter 'id' when calling corporateSubAccountIdGet");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = SubAccountDetailsResponse;
          return this.apiClient.callApi(
            "/corporate/subAccount/{id}",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.corporateSubAccountIdGet = function(id) {
          return this.corporateSubAccountIdGetWithHttpInfo(id).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.corporateSubAccountIdPlanPutWithHttpInfo = function(id, updatePlanDetails) {
          var postBody = updatePlanDetails;
          if (id === void 0 || id === null) {
            throw new Error("Missing the required parameter 'id' when calling corporateSubAccountIdPlanPut");
          }
          if (updatePlanDetails === void 0 || updatePlanDetails === null) {
            throw new Error("Missing the required parameter 'updatePlanDetails' when calling corporateSubAccountIdPlanPut");
          }
          var pathParams = {
            "id": id
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/corporate/subAccount/{id}/plan",
            "PUT",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.corporateSubAccountIdPlanPut = function(id, updatePlanDetails) {
          return this.corporateSubAccountIdPlanPutWithHttpInfo(id, updatePlanDetails).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.corporateSubAccountPostWithHttpInfo = function(subAccountCreate) {
          var postBody = subAccountCreate;
          if (subAccountCreate === void 0 || subAccountCreate === null) {
            throw new Error("Missing the required parameter 'subAccountCreate' when calling corporateSubAccountPost");
          }
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = CreateSubAccountResponse;
          return this.apiClient.callApi(
            "/corporate/subAccount",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.corporateSubAccountPost = function(subAccountCreate) {
          return this.corporateSubAccountPostWithHttpInfo(subAccountCreate).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.corporateSubAccountSsoTokenPostWithHttpInfo = function(ssoTokenRequest) {
          var postBody = ssoTokenRequest;
          if (ssoTokenRequest === void 0 || ssoTokenRequest === null) {
            throw new Error("Missing the required parameter 'ssoTokenRequest' when calling corporateSubAccountSsoTokenPost");
          }
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetSsoToken;
          return this.apiClient.callApi(
            "/corporate/subAccount/ssoToken",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.corporateSubAccountSsoTokenPost = function(ssoTokenRequest) {
          return this.corporateSubAccountSsoTokenPostWithHttpInfo(ssoTokenRequest).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/api/ProcessApi.js
var require_ProcessApi = __commonJS({
  "node_modules/sib-api-v3-sdk/src/api/ProcessApi.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/ErrorModel", "model/GetProcess", "model/GetProcesses"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_ErrorModel(), require_GetProcess(), require_GetProcesses());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.ProcessApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetProcess, root.SibApiV3Sdk.GetProcesses);
      }
    })(exports, function(ApiClient, ErrorModel, GetProcess, GetProcesses) {
      "use strict";
      var exports2 = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
        this.getProcessWithHttpInfo = function(processId) {
          var postBody = null;
          if (processId === void 0 || processId === null) {
            throw new Error("Missing the required parameter 'processId' when calling getProcess");
          }
          var pathParams = {
            "processId": processId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetProcess;
          return this.apiClient.callApi(
            "/processes/{processId}",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getProcess = function(processId) {
          return this.getProcessWithHttpInfo(processId).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getProcessesWithHttpInfo = function(opts) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "sort": opts["sort"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetProcesses;
          return this.apiClient.callApi(
            "/processes",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getProcesses = function(opts) {
          return this.getProcessesWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/api/ResellerApi.js
var require_ResellerApi = __commonJS({
  "node_modules/sib-api-v3-sdk/src/api/ResellerApi.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/AddChildDomain", "model/AddCredits", "model/CreateChild", "model/CreateReseller", "model/ErrorModel", "model/GetChildAccountCreationStatus", "model/GetChildDomains", "model/GetChildInfo", "model/GetChildrenList", "model/GetSsoToken", "model/ManageIp", "model/RemainingCreditModel", "model/RemoveCredits", "model/UpdateChild", "model/UpdateChildAccountStatus", "model/UpdateChildDomain"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_AddChildDomain(), require_AddCredits(), require_CreateChild(), require_CreateReseller(), require_ErrorModel(), require_GetChildAccountCreationStatus(), require_GetChildDomains(), require_GetChildInfo(), require_GetChildrenList(), require_GetSsoToken(), require_ManageIp(), require_RemainingCreditModel(), require_RemoveCredits(), require_UpdateChild(), require_UpdateChildAccountStatus(), require_UpdateChildDomain());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.ResellerApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.AddChildDomain, root.SibApiV3Sdk.AddCredits, root.SibApiV3Sdk.CreateChild, root.SibApiV3Sdk.CreateReseller, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetChildAccountCreationStatus, root.SibApiV3Sdk.GetChildDomains, root.SibApiV3Sdk.GetChildInfo, root.SibApiV3Sdk.GetChildrenList, root.SibApiV3Sdk.GetSsoToken, root.SibApiV3Sdk.ManageIp, root.SibApiV3Sdk.RemainingCreditModel, root.SibApiV3Sdk.RemoveCredits, root.SibApiV3Sdk.UpdateChild, root.SibApiV3Sdk.UpdateChildAccountStatus, root.SibApiV3Sdk.UpdateChildDomain);
      }
    })(exports, function(ApiClient, AddChildDomain, AddCredits, CreateChild, CreateReseller, ErrorModel, GetChildAccountCreationStatus, GetChildDomains, GetChildInfo, GetChildrenList, GetSsoToken, ManageIp, RemainingCreditModel, RemoveCredits, UpdateChild, UpdateChildAccountStatus, UpdateChildDomain) {
      "use strict";
      var exports2 = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
        this.addCreditsWithHttpInfo = function(childIdentifier, addCredits) {
          var postBody = addCredits;
          if (childIdentifier === void 0 || childIdentifier === null) {
            throw new Error("Missing the required parameter 'childIdentifier' when calling addCredits");
          }
          if (addCredits === void 0 || addCredits === null) {
            throw new Error("Missing the required parameter 'addCredits' when calling addCredits");
          }
          var pathParams = {
            "childIdentifier": childIdentifier
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = RemainingCreditModel;
          return this.apiClient.callApi(
            "/reseller/children/{childIdentifier}/credits/add",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.addCredits = function(childIdentifier, addCredits) {
          return this.addCreditsWithHttpInfo(childIdentifier, addCredits).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.associateIpToChildWithHttpInfo = function(childIdentifier, ip) {
          var postBody = ip;
          if (childIdentifier === void 0 || childIdentifier === null) {
            throw new Error("Missing the required parameter 'childIdentifier' when calling associateIpToChild");
          }
          if (ip === void 0 || ip === null) {
            throw new Error("Missing the required parameter 'ip' when calling associateIpToChild");
          }
          var pathParams = {
            "childIdentifier": childIdentifier
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/reseller/children/{childIdentifier}/ips/associate",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.associateIpToChild = function(childIdentifier, ip) {
          return this.associateIpToChildWithHttpInfo(childIdentifier, ip).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.createChildDomainWithHttpInfo = function(childIdentifier, addChildDomain) {
          var postBody = addChildDomain;
          if (childIdentifier === void 0 || childIdentifier === null) {
            throw new Error("Missing the required parameter 'childIdentifier' when calling createChildDomain");
          }
          if (addChildDomain === void 0 || addChildDomain === null) {
            throw new Error("Missing the required parameter 'addChildDomain' when calling createChildDomain");
          }
          var pathParams = {
            "childIdentifier": childIdentifier
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/reseller/children/{childIdentifier}/domains",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.createChildDomain = function(childIdentifier, addChildDomain) {
          return this.createChildDomainWithHttpInfo(childIdentifier, addChildDomain).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.createResellerChildWithHttpInfo = function(opts) {
          opts = opts || {};
          var postBody = opts["resellerChild"];
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = CreateReseller;
          return this.apiClient.callApi(
            "/reseller/children",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.createResellerChild = function(opts) {
          return this.createResellerChildWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.deleteChildDomainWithHttpInfo = function(childIdentifier, domainName) {
          var postBody = null;
          if (childIdentifier === void 0 || childIdentifier === null) {
            throw new Error("Missing the required parameter 'childIdentifier' when calling deleteChildDomain");
          }
          if (domainName === void 0 || domainName === null) {
            throw new Error("Missing the required parameter 'domainName' when calling deleteChildDomain");
          }
          var pathParams = {
            "childIdentifier": childIdentifier,
            "domainName": domainName
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/reseller/children/{childIdentifier}/domains/{domainName}",
            "DELETE",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.deleteChildDomain = function(childIdentifier, domainName) {
          return this.deleteChildDomainWithHttpInfo(childIdentifier, domainName).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.deleteResellerChildWithHttpInfo = function(childIdentifier) {
          var postBody = null;
          if (childIdentifier === void 0 || childIdentifier === null) {
            throw new Error("Missing the required parameter 'childIdentifier' when calling deleteResellerChild");
          }
          var pathParams = {
            "childIdentifier": childIdentifier
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/reseller/children/{childIdentifier}",
            "DELETE",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.deleteResellerChild = function(childIdentifier) {
          return this.deleteResellerChildWithHttpInfo(childIdentifier).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.dissociateIpFromChildWithHttpInfo = function(childIdentifier, ip) {
          var postBody = ip;
          if (childIdentifier === void 0 || childIdentifier === null) {
            throw new Error("Missing the required parameter 'childIdentifier' when calling dissociateIpFromChild");
          }
          if (ip === void 0 || ip === null) {
            throw new Error("Missing the required parameter 'ip' when calling dissociateIpFromChild");
          }
          var pathParams = {
            "childIdentifier": childIdentifier
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/reseller/children/{childIdentifier}/ips/dissociate",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.dissociateIpFromChild = function(childIdentifier, ip) {
          return this.dissociateIpFromChildWithHttpInfo(childIdentifier, ip).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getChildAccountCreationStatusWithHttpInfo = function(childIdentifier) {
          var postBody = null;
          if (childIdentifier === void 0 || childIdentifier === null) {
            throw new Error("Missing the required parameter 'childIdentifier' when calling getChildAccountCreationStatus");
          }
          var pathParams = {
            "childIdentifier": childIdentifier
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetChildAccountCreationStatus;
          return this.apiClient.callApi(
            "/reseller/children/{childIdentifier}/accountCreationStatus",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getChildAccountCreationStatus = function(childIdentifier) {
          return this.getChildAccountCreationStatusWithHttpInfo(childIdentifier).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getChildDomainsWithHttpInfo = function(childIdentifier) {
          var postBody = null;
          if (childIdentifier === void 0 || childIdentifier === null) {
            throw new Error("Missing the required parameter 'childIdentifier' when calling getChildDomains");
          }
          var pathParams = {
            "childIdentifier": childIdentifier
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetChildDomains;
          return this.apiClient.callApi(
            "/reseller/children/{childIdentifier}/domains",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getChildDomains = function(childIdentifier) {
          return this.getChildDomainsWithHttpInfo(childIdentifier).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getChildInfoWithHttpInfo = function(childIdentifier) {
          var postBody = null;
          if (childIdentifier === void 0 || childIdentifier === null) {
            throw new Error("Missing the required parameter 'childIdentifier' when calling getChildInfo");
          }
          var pathParams = {
            "childIdentifier": childIdentifier
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetChildInfo;
          return this.apiClient.callApi(
            "/reseller/children/{childIdentifier}",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getChildInfo = function(childIdentifier) {
          return this.getChildInfoWithHttpInfo(childIdentifier).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getResellerChildsWithHttpInfo = function(opts) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetChildrenList;
          return this.apiClient.callApi(
            "/reseller/children",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getResellerChilds = function(opts) {
          return this.getResellerChildsWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getSsoTokenWithHttpInfo = function(childIdentifier) {
          var postBody = null;
          if (childIdentifier === void 0 || childIdentifier === null) {
            throw new Error("Missing the required parameter 'childIdentifier' when calling getSsoToken");
          }
          var pathParams = {
            "childIdentifier": childIdentifier
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetSsoToken;
          return this.apiClient.callApi(
            "/reseller/children/{childIdentifier}/auth",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getSsoToken = function(childIdentifier) {
          return this.getSsoTokenWithHttpInfo(childIdentifier).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.removeCreditsWithHttpInfo = function(childIdentifier, removeCredits) {
          var postBody = removeCredits;
          if (childIdentifier === void 0 || childIdentifier === null) {
            throw new Error("Missing the required parameter 'childIdentifier' when calling removeCredits");
          }
          if (removeCredits === void 0 || removeCredits === null) {
            throw new Error("Missing the required parameter 'removeCredits' when calling removeCredits");
          }
          var pathParams = {
            "childIdentifier": childIdentifier
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = RemainingCreditModel;
          return this.apiClient.callApi(
            "/reseller/children/{childIdentifier}/credits/remove",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.removeCredits = function(childIdentifier, removeCredits) {
          return this.removeCreditsWithHttpInfo(childIdentifier, removeCredits).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.updateChildAccountStatusWithHttpInfo = function(childIdentifier, updateChildAccountStatus) {
          var postBody = updateChildAccountStatus;
          if (childIdentifier === void 0 || childIdentifier === null) {
            throw new Error("Missing the required parameter 'childIdentifier' when calling updateChildAccountStatus");
          }
          if (updateChildAccountStatus === void 0 || updateChildAccountStatus === null) {
            throw new Error("Missing the required parameter 'updateChildAccountStatus' when calling updateChildAccountStatus");
          }
          var pathParams = {
            "childIdentifier": childIdentifier
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/reseller/children/{childIdentifier}/accountStatus",
            "PUT",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.updateChildAccountStatus = function(childIdentifier, updateChildAccountStatus) {
          return this.updateChildAccountStatusWithHttpInfo(childIdentifier, updateChildAccountStatus).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.updateChildDomainWithHttpInfo = function(childIdentifier, domainName, updateChildDomain) {
          var postBody = updateChildDomain;
          if (childIdentifier === void 0 || childIdentifier === null) {
            throw new Error("Missing the required parameter 'childIdentifier' when calling updateChildDomain");
          }
          if (domainName === void 0 || domainName === null) {
            throw new Error("Missing the required parameter 'domainName' when calling updateChildDomain");
          }
          if (updateChildDomain === void 0 || updateChildDomain === null) {
            throw new Error("Missing the required parameter 'updateChildDomain' when calling updateChildDomain");
          }
          var pathParams = {
            "childIdentifier": childIdentifier,
            "domainName": domainName
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/reseller/children/{childIdentifier}/domains/{domainName}",
            "PUT",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.updateChildDomain = function(childIdentifier, domainName, updateChildDomain) {
          return this.updateChildDomainWithHttpInfo(childIdentifier, domainName, updateChildDomain).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.updateResellerChildWithHttpInfo = function(childIdentifier, resellerChild) {
          var postBody = resellerChild;
          if (childIdentifier === void 0 || childIdentifier === null) {
            throw new Error("Missing the required parameter 'childIdentifier' when calling updateResellerChild");
          }
          if (resellerChild === void 0 || resellerChild === null) {
            throw new Error("Missing the required parameter 'resellerChild' when calling updateResellerChild");
          }
          var pathParams = {
            "childIdentifier": childIdentifier
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/reseller/children/{childIdentifier}",
            "PUT",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.updateResellerChild = function(childIdentifier, resellerChild) {
          return this.updateResellerChildWithHttpInfo(childIdentifier, resellerChild).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/api/SMSCampaignsApi.js
var require_SMSCampaignsApi = __commonJS({
  "node_modules/sib-api-v3-sdk/src/api/SMSCampaignsApi.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/CreateModel", "model/CreateSmsCampaign", "model/CreatedProcessId", "model/ErrorModel", "model/GetSmsCampaign", "model/GetSmsCampaigns", "model/PostSendSmsTestFailed", "model/RequestSmsRecipientExport", "model/SendReport", "model/SendTestSms", "model/UpdateCampaignStatus", "model/UpdateSmsCampaign"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_CreateModel(), require_CreateSmsCampaign(), require_CreatedProcessId(), require_ErrorModel(), require_GetSmsCampaign(), require_GetSmsCampaigns(), require_PostSendSmsTestFailed(), require_RequestSmsRecipientExport(), require_SendReport(), require_SendTestSms(), require_UpdateCampaignStatus(), require_UpdateSmsCampaign());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.SMSCampaignsApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.CreateModel, root.SibApiV3Sdk.CreateSmsCampaign, root.SibApiV3Sdk.CreatedProcessId, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetSmsCampaign, root.SibApiV3Sdk.GetSmsCampaigns, root.SibApiV3Sdk.PostSendSmsTestFailed, root.SibApiV3Sdk.RequestSmsRecipientExport, root.SibApiV3Sdk.SendReport, root.SibApiV3Sdk.SendTestSms, root.SibApiV3Sdk.UpdateCampaignStatus, root.SibApiV3Sdk.UpdateSmsCampaign);
      }
    })(exports, function(ApiClient, CreateModel, CreateSmsCampaign, CreatedProcessId, ErrorModel, GetSmsCampaign, GetSmsCampaigns, PostSendSmsTestFailed, RequestSmsRecipientExport, SendReport, SendTestSms, UpdateCampaignStatus, UpdateSmsCampaign) {
      "use strict";
      var exports2 = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
        this.createSmsCampaignWithHttpInfo = function(createSmsCampaign) {
          var postBody = createSmsCampaign;
          if (createSmsCampaign === void 0 || createSmsCampaign === null) {
            throw new Error("Missing the required parameter 'createSmsCampaign' when calling createSmsCampaign");
          }
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = CreateModel;
          return this.apiClient.callApi(
            "/smsCampaigns",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.createSmsCampaign = function(createSmsCampaign) {
          return this.createSmsCampaignWithHttpInfo(createSmsCampaign).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.deleteSmsCampaignWithHttpInfo = function(campaignId) {
          var postBody = null;
          if (campaignId === void 0 || campaignId === null) {
            throw new Error("Missing the required parameter 'campaignId' when calling deleteSmsCampaign");
          }
          var pathParams = {
            "campaignId": campaignId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/smsCampaigns/{campaignId}",
            "DELETE",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.deleteSmsCampaign = function(campaignId) {
          return this.deleteSmsCampaignWithHttpInfo(campaignId).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getSmsCampaignWithHttpInfo = function(campaignId) {
          var postBody = null;
          if (campaignId === void 0 || campaignId === null) {
            throw new Error("Missing the required parameter 'campaignId' when calling getSmsCampaign");
          }
          var pathParams = {
            "campaignId": campaignId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetSmsCampaign;
          return this.apiClient.callApi(
            "/smsCampaigns/{campaignId}",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getSmsCampaign = function(campaignId) {
          return this.getSmsCampaignWithHttpInfo(campaignId).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getSmsCampaignsWithHttpInfo = function(opts) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "status": opts["status"],
            "startDate": opts["startDate"],
            "endDate": opts["endDate"],
            "limit": opts["limit"],
            "offset": opts["offset"],
            "sort": opts["sort"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetSmsCampaigns;
          return this.apiClient.callApi(
            "/smsCampaigns",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getSmsCampaigns = function(opts) {
          return this.getSmsCampaignsWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.requestSmsRecipientExportWithHttpInfo = function(campaignId, opts) {
          opts = opts || {};
          var postBody = opts["recipientExport"];
          if (campaignId === void 0 || campaignId === null) {
            throw new Error("Missing the required parameter 'campaignId' when calling requestSmsRecipientExport");
          }
          var pathParams = {
            "campaignId": campaignId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = CreatedProcessId;
          return this.apiClient.callApi(
            "/smsCampaigns/{campaignId}/exportRecipients",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.requestSmsRecipientExport = function(campaignId, opts) {
          return this.requestSmsRecipientExportWithHttpInfo(campaignId, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.sendSmsCampaignNowWithHttpInfo = function(campaignId) {
          var postBody = null;
          if (campaignId === void 0 || campaignId === null) {
            throw new Error("Missing the required parameter 'campaignId' when calling sendSmsCampaignNow");
          }
          var pathParams = {
            "campaignId": campaignId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/smsCampaigns/{campaignId}/sendNow",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.sendSmsCampaignNow = function(campaignId) {
          return this.sendSmsCampaignNowWithHttpInfo(campaignId).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.sendSmsReportWithHttpInfo = function(campaignId, sendReport) {
          var postBody = sendReport;
          if (campaignId === void 0 || campaignId === null) {
            throw new Error("Missing the required parameter 'campaignId' when calling sendSmsReport");
          }
          if (sendReport === void 0 || sendReport === null) {
            throw new Error("Missing the required parameter 'sendReport' when calling sendSmsReport");
          }
          var pathParams = {
            "campaignId": campaignId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/smsCampaigns/{campaignId}/sendReport",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.sendSmsReport = function(campaignId, sendReport) {
          return this.sendSmsReportWithHttpInfo(campaignId, sendReport).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.sendTestSmsWithHttpInfo = function(campaignId, phoneNumber) {
          var postBody = phoneNumber;
          if (campaignId === void 0 || campaignId === null) {
            throw new Error("Missing the required parameter 'campaignId' when calling sendTestSms");
          }
          if (phoneNumber === void 0 || phoneNumber === null) {
            throw new Error("Missing the required parameter 'phoneNumber' when calling sendTestSms");
          }
          var pathParams = {
            "campaignId": campaignId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/smsCampaigns/{campaignId}/sendTest",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.sendTestSms = function(campaignId, phoneNumber) {
          return this.sendTestSmsWithHttpInfo(campaignId, phoneNumber).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.updateSmsCampaignWithHttpInfo = function(campaignId, updateSmsCampaign) {
          var postBody = updateSmsCampaign;
          if (campaignId === void 0 || campaignId === null) {
            throw new Error("Missing the required parameter 'campaignId' when calling updateSmsCampaign");
          }
          if (updateSmsCampaign === void 0 || updateSmsCampaign === null) {
            throw new Error("Missing the required parameter 'updateSmsCampaign' when calling updateSmsCampaign");
          }
          var pathParams = {
            "campaignId": campaignId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/smsCampaigns/{campaignId}",
            "PUT",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.updateSmsCampaign = function(campaignId, updateSmsCampaign) {
          return this.updateSmsCampaignWithHttpInfo(campaignId, updateSmsCampaign).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.updateSmsCampaignStatusWithHttpInfo = function(campaignId, status) {
          var postBody = status;
          if (campaignId === void 0 || campaignId === null) {
            throw new Error("Missing the required parameter 'campaignId' when calling updateSmsCampaignStatus");
          }
          if (status === void 0 || status === null) {
            throw new Error("Missing the required parameter 'status' when calling updateSmsCampaignStatus");
          }
          var pathParams = {
            "campaignId": campaignId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/smsCampaigns/{campaignId}/status",
            "PUT",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.updateSmsCampaignStatus = function(campaignId, status) {
          return this.updateSmsCampaignStatusWithHttpInfo(campaignId, status).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/api/SendersApi.js
var require_SendersApi = __commonJS({
  "node_modules/sib-api-v3-sdk/src/api/SendersApi.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/CreateSender", "model/CreateSenderModel", "model/ErrorModel", "model/GetIps", "model/GetIpsFromSender", "model/GetSendersList", "model/UpdateSender"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_CreateSender(), require_CreateSenderModel(), require_ErrorModel(), require_GetIps(), require_GetIpsFromSender(), require_GetSendersList(), require_UpdateSender());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.SendersApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.CreateSender, root.SibApiV3Sdk.CreateSenderModel, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetIps, root.SibApiV3Sdk.GetIpsFromSender, root.SibApiV3Sdk.GetSendersList, root.SibApiV3Sdk.UpdateSender);
      }
    })(exports, function(ApiClient, CreateSender, CreateSenderModel, ErrorModel, GetIps, GetIpsFromSender, GetSendersList, UpdateSender) {
      "use strict";
      var exports2 = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
        this.createSenderWithHttpInfo = function(opts) {
          opts = opts || {};
          var postBody = opts["sender"];
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = CreateSenderModel;
          return this.apiClient.callApi(
            "/senders",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.createSender = function(opts) {
          return this.createSenderWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.deleteSenderWithHttpInfo = function(senderId) {
          var postBody = null;
          if (senderId === void 0 || senderId === null) {
            throw new Error("Missing the required parameter 'senderId' when calling deleteSender");
          }
          var pathParams = {
            "senderId": senderId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/senders/{senderId}",
            "DELETE",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.deleteSender = function(senderId) {
          return this.deleteSenderWithHttpInfo(senderId).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getIpsWithHttpInfo = function() {
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetIps;
          return this.apiClient.callApi(
            "/senders/ips",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getIps = function() {
          return this.getIpsWithHttpInfo().then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getIpsFromSenderWithHttpInfo = function(senderId) {
          var postBody = null;
          if (senderId === void 0 || senderId === null) {
            throw new Error("Missing the required parameter 'senderId' when calling getIpsFromSender");
          }
          var pathParams = {
            "senderId": senderId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetIpsFromSender;
          return this.apiClient.callApi(
            "/senders/{senderId}/ips",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getIpsFromSender = function(senderId) {
          return this.getIpsFromSenderWithHttpInfo(senderId).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getSendersWithHttpInfo = function(opts) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "ip": opts["ip"],
            "domain": opts["domain"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetSendersList;
          return this.apiClient.callApi(
            "/senders",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getSenders = function(opts) {
          return this.getSendersWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.updateSenderWithHttpInfo = function(senderId, opts) {
          opts = opts || {};
          var postBody = opts["sender"];
          if (senderId === void 0 || senderId === null) {
            throw new Error("Missing the required parameter 'senderId' when calling updateSender");
          }
          var pathParams = {
            "senderId": senderId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/senders/{senderId}",
            "PUT",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.updateSender = function(senderId, opts) {
          return this.updateSenderWithHttpInfo(senderId, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/api/TransactionalEmailsApi.js
var require_TransactionalEmailsApi = __commonJS({
  "node_modules/sib-api-v3-sdk/src/api/TransactionalEmailsApi.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/BlockDomain", "model/CreateModel", "model/CreateSmtpEmail", "model/CreateSmtpTemplate", "model/DeleteHardbounces", "model/ErrorModel", "model/GetAggregatedReport", "model/GetBlockedDomains", "model/GetEmailEventReport", "model/GetReports", "model/GetScheduledEmailByBatchId", "model/GetScheduledEmailByMessageId", "model/GetSmtpTemplateOverview", "model/GetSmtpTemplates", "model/GetTransacBlockedContacts", "model/GetTransacEmailContent", "model/GetTransacEmailsList", "model/PostSendFailed", "model/ScheduleSmtpEmail", "model/SendSmtpEmail", "model/SendTestEmail", "model/UpdateSmtpTemplate"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_BlockDomain(), require_CreateModel(), require_CreateSmtpEmail(), require_CreateSmtpTemplate(), require_DeleteHardbounces(), require_ErrorModel(), require_GetAggregatedReport(), require_GetBlockedDomains(), require_GetEmailEventReport(), require_GetReports(), require_GetScheduledEmailByBatchId(), require_GetScheduledEmailByMessageId(), require_GetSmtpTemplateOverview(), require_GetSmtpTemplates(), require_GetTransacBlockedContacts(), require_GetTransacEmailContent(), require_GetTransacEmailsList(), require_PostSendFailed(), require_ScheduleSmtpEmail(), require_SendSmtpEmail(), require_SendTestEmail(), require_UpdateSmtpTemplate());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.TransactionalEmailsApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.BlockDomain, root.SibApiV3Sdk.CreateModel, root.SibApiV3Sdk.CreateSmtpEmail, root.SibApiV3Sdk.CreateSmtpTemplate, root.SibApiV3Sdk.DeleteHardbounces, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetAggregatedReport, root.SibApiV3Sdk.GetBlockedDomains, root.SibApiV3Sdk.GetEmailEventReport, root.SibApiV3Sdk.GetReports, root.SibApiV3Sdk.GetScheduledEmailByBatchId, root.SibApiV3Sdk.GetScheduledEmailByMessageId, root.SibApiV3Sdk.GetSmtpTemplateOverview, root.SibApiV3Sdk.GetSmtpTemplates, root.SibApiV3Sdk.GetTransacBlockedContacts, root.SibApiV3Sdk.GetTransacEmailContent, root.SibApiV3Sdk.GetTransacEmailsList, root.SibApiV3Sdk.PostSendFailed, root.SibApiV3Sdk.ScheduleSmtpEmail, root.SibApiV3Sdk.SendSmtpEmail, root.SibApiV3Sdk.SendTestEmail, root.SibApiV3Sdk.UpdateSmtpTemplate);
      }
    })(exports, function(ApiClient, BlockDomain, CreateModel, CreateSmtpEmail, CreateSmtpTemplate, DeleteHardbounces, ErrorModel, GetAggregatedReport, GetBlockedDomains, GetEmailEventReport, GetReports, GetScheduledEmailByBatchId, GetScheduledEmailByMessageId, GetSmtpTemplateOverview, GetSmtpTemplates, GetTransacBlockedContacts, GetTransacEmailContent, GetTransacEmailsList, PostSendFailed, ScheduleSmtpEmail, SendSmtpEmail, SendTestEmail, UpdateSmtpTemplate) {
      "use strict";
      var exports2 = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
        this.blockNewDomainWithHttpInfo = function(blockDomain) {
          var postBody = blockDomain;
          if (blockDomain === void 0 || blockDomain === null) {
            throw new Error("Missing the required parameter 'blockDomain' when calling blockNewDomain");
          }
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/smtp/blockedDomains",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.blockNewDomain = function(blockDomain) {
          return this.blockNewDomainWithHttpInfo(blockDomain).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.createSmtpTemplateWithHttpInfo = function(smtpTemplate) {
          var postBody = smtpTemplate;
          if (smtpTemplate === void 0 || smtpTemplate === null) {
            throw new Error("Missing the required parameter 'smtpTemplate' when calling createSmtpTemplate");
          }
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = CreateModel;
          return this.apiClient.callApi(
            "/smtp/templates",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.createSmtpTemplate = function(smtpTemplate) {
          return this.createSmtpTemplateWithHttpInfo(smtpTemplate).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.deleteBlockedDomainWithHttpInfo = function(domain) {
          var postBody = null;
          if (domain === void 0 || domain === null) {
            throw new Error("Missing the required parameter 'domain' when calling deleteBlockedDomain");
          }
          var pathParams = {
            "domain": domain
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/smtp/blockedDomains/{domain}",
            "DELETE",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.deleteBlockedDomain = function(domain) {
          return this.deleteBlockedDomainWithHttpInfo(domain).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.deleteHardbouncesWithHttpInfo = function(opts) {
          opts = opts || {};
          var postBody = opts["deleteHardbounces"];
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/smtp/deleteHardbounces",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.deleteHardbounces = function(opts) {
          return this.deleteHardbouncesWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.deleteScheduledEmailByIdWithHttpInfo = function(identifier) {
          var postBody = null;
          if (identifier === void 0 || identifier === null) {
            throw new Error("Missing the required parameter 'identifier' when calling deleteScheduledEmailById");
          }
          var pathParams = {
            "identifier": identifier
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/smtp/email/{identifier}",
            "DELETE",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.deleteScheduledEmailById = function(identifier) {
          return this.deleteScheduledEmailByIdWithHttpInfo(identifier).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.deleteSmtpTemplateWithHttpInfo = function(templateId) {
          var postBody = null;
          if (templateId === void 0 || templateId === null) {
            throw new Error("Missing the required parameter 'templateId' when calling deleteSmtpTemplate");
          }
          var pathParams = {
            "templateId": templateId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/smtp/templates/{templateId}",
            "DELETE",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.deleteSmtpTemplate = function(templateId) {
          return this.deleteSmtpTemplateWithHttpInfo(templateId).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getAggregatedSmtpReportWithHttpInfo = function(opts) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "startDate": opts["startDate"],
            "endDate": opts["endDate"],
            "days": opts["days"],
            "tag": opts["tag"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetAggregatedReport;
          return this.apiClient.callApi(
            "/smtp/statistics/aggregatedReport",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getAggregatedSmtpReport = function(opts) {
          return this.getAggregatedSmtpReportWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getBlockedDomainsWithHttpInfo = function() {
          var postBody = null;
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetBlockedDomains;
          return this.apiClient.callApi(
            "/smtp/blockedDomains",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getBlockedDomains = function() {
          return this.getBlockedDomainsWithHttpInfo().then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getEmailEventReportWithHttpInfo = function(opts) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "startDate": opts["startDate"],
            "endDate": opts["endDate"],
            "days": opts["days"],
            "email": opts["email"],
            "event": opts["event"],
            "tags": opts["tags"],
            "messageId": opts["messageId"],
            "templateId": opts["templateId"],
            "sort": opts["sort"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetEmailEventReport;
          return this.apiClient.callApi(
            "/smtp/statistics/events",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getEmailEventReport = function(opts) {
          return this.getEmailEventReportWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getScheduledEmailByBatchIdWithHttpInfo = function(batchId, opts) {
          opts = opts || {};
          var postBody = null;
          if (batchId === void 0 || batchId === null) {
            throw new Error("Missing the required parameter 'batchId' when calling getScheduledEmailByBatchId");
          }
          var pathParams = {
            "batchId": batchId
          };
          var queryParams = {
            "startDate": opts["startDate"],
            "endDate": opts["endDate"],
            "sort": opts["sort"],
            "status": opts["status"],
            "limit": opts["limit"],
            "offset": opts["offset"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetScheduledEmailByBatchId;
          return this.apiClient.callApi(
            "/smtp/emailStatus/{batchId}",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getScheduledEmailByBatchId = function(batchId, opts) {
          return this.getScheduledEmailByBatchIdWithHttpInfo(batchId, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getScheduledEmailByMessageIdWithHttpInfo = function(messageId, opts) {
          opts = opts || {};
          var postBody = null;
          if (messageId === void 0 || messageId === null) {
            throw new Error("Missing the required parameter 'messageId' when calling getScheduledEmailByMessageId");
          }
          var pathParams = {
            "messageId": messageId
          };
          var queryParams = {
            "startDate": opts["startDate"],
            "endDate": opts["endDate"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetScheduledEmailByMessageId;
          return this.apiClient.callApi(
            "/smtp/emailStatus/{messageId}",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getScheduledEmailByMessageId = function(messageId, opts) {
          return this.getScheduledEmailByMessageIdWithHttpInfo(messageId, opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getSmtpReportWithHttpInfo = function(opts) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "limit": opts["limit"],
            "offset": opts["offset"],
            "startDate": opts["startDate"],
            "endDate": opts["endDate"],
            "days": opts["days"],
            "tag": opts["tag"],
            "sort": opts["sort"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetReports;
          return this.apiClient.callApi(
            "/smtp/statistics/reports",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getSmtpReport = function(opts) {
          return this.getSmtpReportWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getSmtpTemplateWithHttpInfo = function(templateId) {
          var postBody = null;
          if (templateId === void 0 || templateId === null) {
            throw new Error("Missing the required parameter 'templateId' when calling getSmtpTemplate");
          }
          var pathParams = {
            "templateId": templateId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetSmtpTemplateOverview;
          return this.apiClient.callApi(
            "/smtp/templates/{templateId}",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getSmtpTemplate = function(templateId) {
          return this.getSmtpTemplateWithHttpInfo(templateId).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getSmtpTemplatesWithHttpInfo = function(opts) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "templateStatus": opts["templateStatus"],
            "limit": opts["limit"],
            "offset": opts["offset"],
            "sort": opts["sort"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetSmtpTemplates;
          return this.apiClient.callApi(
            "/smtp/templates",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getSmtpTemplates = function(opts) {
          return this.getSmtpTemplatesWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getTransacBlockedContactsWithHttpInfo = function(opts) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "startDate": opts["startDate"],
            "endDate": opts["endDate"],
            "limit": opts["limit"],
            "offset": opts["offset"],
            "sort": opts["sort"]
          };
          var collectionQueryParams = {
            "senders": {
              value: opts["senders"],
              collectionFormat: "csv"
            }
          };
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetTransacBlockedContacts;
          return this.apiClient.callApi(
            "/smtp/blockedContacts",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getTransacBlockedContacts = function(opts) {
          return this.getTransacBlockedContactsWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getTransacEmailContentWithHttpInfo = function(uuid) {
          var postBody = null;
          if (uuid === void 0 || uuid === null) {
            throw new Error("Missing the required parameter 'uuid' when calling getTransacEmailContent");
          }
          var pathParams = {
            "uuid": uuid
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetTransacEmailContent;
          return this.apiClient.callApi(
            "/smtp/emails/{uuid}",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getTransacEmailContent = function(uuid) {
          return this.getTransacEmailContentWithHttpInfo(uuid).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getTransacEmailsListWithHttpInfo = function(opts) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "email": opts["email"],
            "templateId": opts["templateId"],
            "messageId": opts["messageId"],
            "startDate": opts["startDate"],
            "endDate": opts["endDate"],
            "sort": opts["sort"],
            "limit": opts["limit"],
            "offset": opts["offset"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetTransacEmailsList;
          return this.apiClient.callApi(
            "/smtp/emails",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getTransacEmailsList = function(opts) {
          return this.getTransacEmailsListWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.sendTestTemplateWithHttpInfo = function(templateId, sendTestEmail) {
          var postBody = sendTestEmail;
          if (templateId === void 0 || templateId === null) {
            throw new Error("Missing the required parameter 'templateId' when calling sendTestTemplate");
          }
          if (sendTestEmail === void 0 || sendTestEmail === null) {
            throw new Error("Missing the required parameter 'sendTestEmail' when calling sendTestTemplate");
          }
          var pathParams = {
            "templateId": templateId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/smtp/templates/{templateId}/sendTest",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.sendTestTemplate = function(templateId, sendTestEmail) {
          return this.sendTestTemplateWithHttpInfo(templateId, sendTestEmail).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.sendTransacEmailWithHttpInfo = function(sendSmtpEmail) {
          var postBody = sendSmtpEmail;
          if (sendSmtpEmail === void 0 || sendSmtpEmail === null) {
            throw new Error("Missing the required parameter 'sendSmtpEmail' when calling sendTransacEmail");
          }
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = CreateSmtpEmail;
          return this.apiClient.callApi(
            "/smtp/email",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.sendTransacEmail = function(sendSmtpEmail) {
          return this.sendTransacEmailWithHttpInfo(sendSmtpEmail).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.smtpBlockedContactsEmailDeleteWithHttpInfo = function(email) {
          var postBody = null;
          if (email === void 0 || email === null) {
            throw new Error("Missing the required parameter 'email' when calling smtpBlockedContactsEmailDelete");
          }
          var pathParams = {
            "email": email
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/smtp/blockedContacts/{email}",
            "DELETE",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.smtpBlockedContactsEmailDelete = function(email) {
          return this.smtpBlockedContactsEmailDeleteWithHttpInfo(email).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.smtpLogMessageIdDeleteWithHttpInfo = function(messageId) {
          var postBody = null;
          if (messageId === void 0 || messageId === null) {
            throw new Error("Missing the required parameter 'messageId' when calling smtpLogMessageIdDelete");
          }
          var pathParams = {
            "messageId": messageId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/smtp/log/{messageId}",
            "DELETE",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.smtpLogMessageIdDelete = function(messageId) {
          return this.smtpLogMessageIdDeleteWithHttpInfo(messageId).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.updateSmtpTemplateWithHttpInfo = function(templateId, smtpTemplate) {
          var postBody = smtpTemplate;
          if (templateId === void 0 || templateId === null) {
            throw new Error("Missing the required parameter 'templateId' when calling updateSmtpTemplate");
          }
          if (smtpTemplate === void 0 || smtpTemplate === null) {
            throw new Error("Missing the required parameter 'smtpTemplate' when calling updateSmtpTemplate");
          }
          var pathParams = {
            "templateId": templateId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/smtp/templates/{templateId}",
            "PUT",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.updateSmtpTemplate = function(templateId, smtpTemplate) {
          return this.updateSmtpTemplateWithHttpInfo(templateId, smtpTemplate).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/api/TransactionalSMSApi.js
var require_TransactionalSMSApi = __commonJS({
  "node_modules/sib-api-v3-sdk/src/api/TransactionalSMSApi.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/ErrorModel", "model/GetSmsEventReport", "model/GetTransacAggregatedSmsReport", "model/GetTransacSmsReport", "model/SendSms", "model/SendTransacSms"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_ErrorModel(), require_GetSmsEventReport(), require_GetTransacAggregatedSmsReport(), require_GetTransacSmsReport(), require_SendSms(), require_SendTransacSms());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.TransactionalSMSApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetSmsEventReport, root.SibApiV3Sdk.GetTransacAggregatedSmsReport, root.SibApiV3Sdk.GetTransacSmsReport, root.SibApiV3Sdk.SendSms, root.SibApiV3Sdk.SendTransacSms);
      }
    })(exports, function(ApiClient, ErrorModel, GetSmsEventReport, GetTransacAggregatedSmsReport, GetTransacSmsReport, SendSms, SendTransacSms) {
      "use strict";
      var exports2 = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
        this.getSmsEventsWithHttpInfo = function(opts) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "limit": opts["limit"],
            "startDate": opts["startDate"],
            "endDate": opts["endDate"],
            "offset": opts["offset"],
            "days": opts["days"],
            "phoneNumber": opts["phoneNumber"],
            "event": opts["event"],
            "tags": opts["tags"],
            "sort": opts["sort"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetSmsEventReport;
          return this.apiClient.callApi(
            "/transactionalSMS/statistics/events",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getSmsEvents = function(opts) {
          return this.getSmsEventsWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getTransacAggregatedSmsReportWithHttpInfo = function(opts) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "startDate": opts["startDate"],
            "endDate": opts["endDate"],
            "days": opts["days"],
            "tag": opts["tag"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetTransacAggregatedSmsReport;
          return this.apiClient.callApi(
            "/transactionalSMS/statistics/aggregatedReport",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getTransacAggregatedSmsReport = function(opts) {
          return this.getTransacAggregatedSmsReportWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getTransacSmsReportWithHttpInfo = function(opts) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "startDate": opts["startDate"],
            "endDate": opts["endDate"],
            "days": opts["days"],
            "tag": opts["tag"],
            "sort": opts["sort"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetTransacSmsReport;
          return this.apiClient.callApi(
            "/transactionalSMS/statistics/reports",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getTransacSmsReport = function(opts) {
          return this.getTransacSmsReportWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.sendTransacSmsWithHttpInfo = function(sendTransacSms) {
          var postBody = sendTransacSms;
          if (sendTransacSms === void 0 || sendTransacSms === null) {
            throw new Error("Missing the required parameter 'sendTransacSms' when calling sendTransacSms");
          }
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = SendSms;
          return this.apiClient.callApi(
            "/transactionalSMS/sms",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.sendTransacSms = function(sendTransacSms) {
          return this.sendTransacSmsWithHttpInfo(sendTransacSms).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/api/WebhooksApi.js
var require_WebhooksApi = __commonJS({
  "node_modules/sib-api-v3-sdk/src/api/WebhooksApi.js"(exports, module) {
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/CreateModel", "model/CreateWebhook", "model/ErrorModel", "model/GetWebhook", "model/GetWebhooks", "model/UpdateWebhook"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_CreateModel(), require_CreateWebhook(), require_ErrorModel(), require_GetWebhook(), require_GetWebhooks(), require_UpdateWebhook());
      } else {
        if (!root.SibApiV3Sdk) {
          root.SibApiV3Sdk = {};
        }
        root.SibApiV3Sdk.WebhooksApi = factory(root.SibApiV3Sdk.ApiClient, root.SibApiV3Sdk.CreateModel, root.SibApiV3Sdk.CreateWebhook, root.SibApiV3Sdk.ErrorModel, root.SibApiV3Sdk.GetWebhook, root.SibApiV3Sdk.GetWebhooks, root.SibApiV3Sdk.UpdateWebhook);
      }
    })(exports, function(ApiClient, CreateModel, CreateWebhook, ErrorModel, GetWebhook, GetWebhooks, UpdateWebhook) {
      "use strict";
      var exports2 = function(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
        this.createWebhookWithHttpInfo = function(createWebhook) {
          var postBody = createWebhook;
          if (createWebhook === void 0 || createWebhook === null) {
            throw new Error("Missing the required parameter 'createWebhook' when calling createWebhook");
          }
          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = CreateModel;
          return this.apiClient.callApi(
            "/webhooks",
            "POST",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.createWebhook = function(createWebhook) {
          return this.createWebhookWithHttpInfo(createWebhook).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.deleteWebhookWithHttpInfo = function(webhookId) {
          var postBody = null;
          if (webhookId === void 0 || webhookId === null) {
            throw new Error("Missing the required parameter 'webhookId' when calling deleteWebhook");
          }
          var pathParams = {
            "webhookId": webhookId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/webhooks/{webhookId}",
            "DELETE",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.deleteWebhook = function(webhookId) {
          return this.deleteWebhookWithHttpInfo(webhookId).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getWebhookWithHttpInfo = function(webhookId) {
          var postBody = null;
          if (webhookId === void 0 || webhookId === null) {
            throw new Error("Missing the required parameter 'webhookId' when calling getWebhook");
          }
          var pathParams = {
            "webhookId": webhookId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetWebhook;
          return this.apiClient.callApi(
            "/webhooks/{webhookId}",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getWebhook = function(webhookId) {
          return this.getWebhookWithHttpInfo(webhookId).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.getWebhooksWithHttpInfo = function(opts) {
          opts = opts || {};
          var postBody = null;
          var pathParams = {};
          var queryParams = {
            "type": opts["type"],
            "sort": opts["sort"]
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = GetWebhooks;
          return this.apiClient.callApi(
            "/webhooks",
            "GET",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.getWebhooks = function(opts) {
          return this.getWebhooksWithHttpInfo(opts).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
        this.updateWebhookWithHttpInfo = function(webhookId, updateWebhook) {
          var postBody = updateWebhook;
          if (webhookId === void 0 || webhookId === null) {
            throw new Error("Missing the required parameter 'webhookId' when calling updateWebhook");
          }
          if (updateWebhook === void 0 || updateWebhook === null) {
            throw new Error("Missing the required parameter 'updateWebhook' when calling updateWebhook");
          }
          var pathParams = {
            "webhookId": webhookId
          };
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};
          var authNames = ["api-key", "partner-key"];
          var contentTypes = ["application/json"];
          var accepts = ["application/json"];
          var returnType = null;
          return this.apiClient.callApi(
            "/webhooks/{webhookId}",
            "PUT",
            pathParams,
            queryParams,
            collectionQueryParams,
            headerParams,
            formParams,
            postBody,
            authNames,
            contentTypes,
            accepts,
            returnType
          );
        };
        this.updateWebhook = function(webhookId, updateWebhook) {
          return this.updateWebhookWithHttpInfo(webhookId, updateWebhook).then(function(response_and_data) {
            return response_and_data.data;
          });
        };
      };
      return exports2;
    });
  }
});

// node_modules/sib-api-v3-sdk/src/index.js
var require_src = __commonJS({
  "node_modules/sib-api-v3-sdk/src/index.js"(exports, module) {
    (function(factory) {
      if (typeof define === "function" && define.amd) {
        define(["ApiClient", "model/AbTestCampaignResult", "model/AbTestCampaignResultClickedLinks", "model/AbTestCampaignResultStatistics", "model/AbTestVersionClicks", "model/AbTestVersionClicksInner", "model/AbTestVersionStats", "model/AddChildDomain", "model/AddContactToList", "model/AddCredits", "model/BlockDomain", "model/Body", "model/Body1", "model/Body2", "model/Body3", "model/Body4", "model/Body5", "model/Body6", "model/CompaniesList", "model/Company", "model/CompanyAttributes", "model/CompanyAttributesInner", "model/CreateAttribute", "model/CreateAttributeEnumeration", "model/CreateChild", "model/CreateContact", "model/CreateDoiContact", "model/CreateEmailCampaign", "model/CreateEmailCampaignRecipients", "model/CreateEmailCampaignSender", "model/CreateList", "model/CreateModel", "model/CreateReseller", "model/CreateSender", "model/CreateSenderIps", "model/CreateSenderModel", "model/CreateSmsCampaign", "model/CreateSmsCampaignRecipients", "model/CreateSmtpEmail", "model/CreateSmtpTemplate", "model/CreateSmtpTemplateSender", "model/CreateSubAccount", "model/CreateSubAccountResponse", "model/CreateUpdateContactModel", "model/CreateUpdateFolder", "model/CreateWebhook", "model/CreatedProcessId", "model/Deal", "model/DealAttributes", "model/DealAttributesInner", "model/DealsList", "model/DeleteHardbounces", "model/EmailExportRecipients", "model/ErrorModel", "model/GetAccount", "model/GetAccountMarketingAutomation", "model/GetAccountPlan", "model/GetAccountRelay", "model/GetAccountRelayData", "model/GetAggregatedReport", "model/GetAttributes", "model/GetAttributesAttributes", "model/GetAttributesEnumeration", "model/GetBlockedDomains", "model/GetCampaignOverview", "model/GetCampaignRecipients", "model/GetCampaignStats", "model/GetChildAccountCreationStatus", "model/GetChildDomain", "model/GetChildDomains", "model/GetChildInfo", "model/GetChildInfoApiKeys", "model/GetChildInfoApiKeysV2", "model/GetChildInfoApiKeysV3", "model/GetChildInfoCredits", "model/GetChildInfoStatistics", "model/GetChildrenList", "model/GetClient", "model/GetContactCampaignStats", "model/GetContactCampaignStatsClicked", "model/GetContactCampaignStatsOpened", "model/GetContactCampaignStatsTransacAttributes", "model/GetContactCampaignStatsUnsubscriptions", "model/GetContactDetails", "model/GetContacts", "model/GetDeviceBrowserStats", "model/GetEmailCampaign", "model/GetEmailCampaigns", "model/GetEmailEventReport", "model/GetEmailEventReportEvents", "model/GetExtendedCampaignOverview", "model/GetExtendedCampaignOverviewSender", "model/GetExtendedCampaignStats", "model/GetExtendedCampaignStatsGlobalStats", "model/GetExtendedClient", "model/GetExtendedClientAddress", "model/GetExtendedContactDetails", "model/GetExtendedContactDetailsStatistics", "model/GetExtendedContactDetailsStatisticsClicked", "model/GetExtendedContactDetailsStatisticsDelivered", "model/GetExtendedContactDetailsStatisticsLinks", "model/GetExtendedContactDetailsStatisticsMessagesSent", "model/GetExtendedContactDetailsStatisticsOpened", "model/GetExtendedContactDetailsStatisticsUnsubscriptions", "model/GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription", "model/GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription", "model/GetExtendedList", "model/GetExtendedListCampaignStats", "model/GetFolder", "model/GetFolderLists", "model/GetFolders", "model/GetInboundEmailEvents", "model/GetInboundEmailEventsByUuid", "model/GetInboundEmailEventsByUuidAttachments", "model/GetInboundEmailEventsByUuidLogs", "model/GetInboundEmailEventsEvents", "model/GetIp", "model/GetIpFromSender", "model/GetIps", "model/GetIpsFromSender", "model/GetList", "model/GetLists", "model/GetProcess", "model/GetProcesses", "model/GetReports", "model/GetReportsReports", "model/GetScheduledEmailByBatchId", "model/GetScheduledEmailByBatchIdBatches", "model/GetScheduledEmailByMessageId", "model/GetSendersList", "model/GetSendersListIps", "model/GetSendersListSenders", "model/GetSharedTemplateUrl", "model/GetSmsCampaign", "model/GetSmsCampaignOverview", "model/GetSmsCampaignRecipients", "model/GetSmsCampaignStats", "model/GetSmsCampaigns", "model/GetSmsEventReport", "model/GetSmsEventReportEvents", "model/GetSmtpTemplateOverview", "model/GetSmtpTemplateOverviewSender", "model/GetSmtpTemplates", "model/GetSsoToken", "model/GetStatsByBrowser", "model/GetStatsByDevice", "model/GetStatsByDomain", "model/GetTransacAggregatedSmsReport", "model/GetTransacBlockedContacts", "model/GetTransacBlockedContactsContacts", "model/GetTransacBlockedContactsReason", "model/GetTransacEmailContent", "model/GetTransacEmailContentEvents", "model/GetTransacEmailsList", "model/GetTransacEmailsListTransactionalEmails", "model/GetTransacSmsReport", "model/GetTransacSmsReportReports", "model/GetWebhook", "model/GetWebhooks", "model/InlineResponse200", "model/InlineResponse201", "model/InlineResponse2011", "model/ManageIp", "model/MasterDetailsResponse", "model/MasterDetailsResponseBillingInfo", "model/MasterDetailsResponseBillingInfoAddress", "model/MasterDetailsResponseBillingInfoName", "model/MasterDetailsResponsePlanInfo", "model/MasterDetailsResponsePlanInfoFeatures", "model/Note", "model/NoteData", "model/NoteId", "model/NoteList", "model/Pipeline", "model/PipelineStage", "model/PostContactInfo", "model/PostContactInfoContacts", "model/PostSendFailed", "model/PostSendSmsTestFailed", "model/RemainingCreditModel", "model/RemainingCreditModelChild", "model/RemainingCreditModelReseller", "model/RemoveContactFromList", "model/RemoveCredits", "model/RequestContactExport", "model/RequestContactExportCustomContactFilter", "model/RequestContactImport", "model/RequestContactImportNewList", "model/RequestSmsRecipientExport", "model/ScheduleSmtpEmail", "model/SendReport", "model/SendReportEmail", "model/SendSms", "model/SendSmtpEmail", "model/SendSmtpEmailAttachment", "model/SendSmtpEmailBcc", "model/SendSmtpEmailCc", "model/SendSmtpEmailMessageVersions", "model/SendSmtpEmailReplyTo", "model/SendSmtpEmailReplyTo1", "model/SendSmtpEmailSender", "model/SendSmtpEmailTo", "model/SendSmtpEmailTo1", "model/SendTestEmail", "model/SendTestSms", "model/SendTransacSms", "model/SsoTokenRequest", "model/SubAccountDetailsResponse", "model/SubAccountDetailsResponsePlanInfo", "model/SubAccountDetailsResponsePlanInfoCredits", "model/SubAccountDetailsResponsePlanInfoCreditsEmails", "model/SubAccountDetailsResponsePlanInfoFeatures", "model/SubAccountDetailsResponsePlanInfoFeaturesInbox", "model/SubAccountDetailsResponsePlanInfoFeaturesLandingPage", "model/SubAccountDetailsResponsePlanInfoFeaturesUsers", "model/SubAccountUpdatePlanRequest", "model/SubAccountUpdatePlanRequestCredits", "model/SubAccountUpdatePlanRequestFeatures", "model/SubAccountsResponse", "model/SubAccountsResponseSubAccounts", "model/Task", "model/TaskList", "model/TaskReminder", "model/TaskTypes", "model/UpdateAttribute", "model/UpdateAttributeEnumeration", "model/UpdateBatchContacts", "model/UpdateBatchContactsContacts", "model/UpdateBatchContactsModel", "model/UpdateCampaignStatus", "model/UpdateChild", "model/UpdateChildAccountStatus", "model/UpdateChildDomain", "model/UpdateContact", "model/UpdateEmailCampaign", "model/UpdateEmailCampaignRecipients", "model/UpdateEmailCampaignSender", "model/UpdateList", "model/UpdateSender", "model/UpdateSmsCampaign", "model/UpdateSmtpTemplate", "model/UpdateSmtpTemplateSender", "model/UpdateWebhook", "model/UploadImageToGallery", "api/AccountApi", "api/AttributesApi", "api/CRMApi", "api/CompaniesApi", "api/ContactsApi", "api/DealsApi", "api/EmailCampaignsApi", "api/FoldersApi", "api/InboundParsingApi", "api/ListsApi", "api/MasterAccountApi", "api/ProcessApi", "api/ResellerApi", "api/SMSCampaignsApi", "api/SendersApi", "api/TransactionalEmailsApi", "api/TransactionalSMSApi", "api/WebhooksApi"], factory);
      } else if (typeof module === "object" && module.exports) {
        module.exports = factory(require_ApiClient(), require_AbTestCampaignResult(), require_AbTestCampaignResultClickedLinks(), require_AbTestCampaignResultStatistics(), require_AbTestVersionClicks(), require_AbTestVersionClicksInner(), require_AbTestVersionStats(), require_AddChildDomain(), require_AddContactToList(), require_AddCredits(), require_BlockDomain(), require_Body(), require_Body1(), require_Body2(), require_Body3(), require_Body4(), require_Body5(), require_Body6(), require_CompaniesList(), require_Company(), require_CompanyAttributes(), require_CompanyAttributesInner(), require_CreateAttribute(), require_CreateAttributeEnumeration(), require_CreateChild(), require_CreateContact(), require_CreateDoiContact(), require_CreateEmailCampaign(), require_CreateEmailCampaignRecipients(), require_CreateEmailCampaignSender(), require_CreateList(), require_CreateModel(), require_CreateReseller(), require_CreateSender(), require_CreateSenderIps(), require_CreateSenderModel(), require_CreateSmsCampaign(), require_CreateSmsCampaignRecipients(), require_CreateSmtpEmail(), require_CreateSmtpTemplate(), require_CreateSmtpTemplateSender(), require_CreateSubAccount(), require_CreateSubAccountResponse(), require_CreateUpdateContactModel(), require_CreateUpdateFolder(), require_CreateWebhook(), require_CreatedProcessId(), require_Deal(), require_DealAttributes(), require_DealAttributesInner(), require_DealsList(), require_DeleteHardbounces(), require_EmailExportRecipients(), require_ErrorModel(), require_GetAccount(), require_GetAccountMarketingAutomation(), require_GetAccountPlan(), require_GetAccountRelay(), require_GetAccountRelayData(), require_GetAggregatedReport(), require_GetAttributes(), require_GetAttributesAttributes(), require_GetAttributesEnumeration(), require_GetBlockedDomains(), require_GetCampaignOverview(), require_GetCampaignRecipients(), require_GetCampaignStats(), require_GetChildAccountCreationStatus(), require_GetChildDomain(), require_GetChildDomains(), require_GetChildInfo(), require_GetChildInfoApiKeys(), require_GetChildInfoApiKeysV2(), require_GetChildInfoApiKeysV3(), require_GetChildInfoCredits(), require_GetChildInfoStatistics(), require_GetChildrenList(), require_GetClient(), require_GetContactCampaignStats(), require_GetContactCampaignStatsClicked(), require_GetContactCampaignStatsOpened(), require_GetContactCampaignStatsTransacAttributes(), require_GetContactCampaignStatsUnsubscriptions(), require_GetContactDetails(), require_GetContacts(), require_GetDeviceBrowserStats(), require_GetEmailCampaign(), require_GetEmailCampaigns(), require_GetEmailEventReport(), require_GetEmailEventReportEvents(), require_GetExtendedCampaignOverview(), require_GetExtendedCampaignOverviewSender(), require_GetExtendedCampaignStats(), require_GetExtendedCampaignStatsGlobalStats(), require_GetExtendedClient(), require_GetExtendedClientAddress(), require_GetExtendedContactDetails(), require_GetExtendedContactDetailsStatistics(), require_GetExtendedContactDetailsStatisticsClicked(), require_GetExtendedContactDetailsStatisticsDelivered(), require_GetExtendedContactDetailsStatisticsLinks(), require_GetExtendedContactDetailsStatisticsMessagesSent(), require_GetExtendedContactDetailsStatisticsOpened(), require_GetExtendedContactDetailsStatisticsUnsubscriptions(), require_GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription(), require_GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription(), require_GetExtendedList(), require_GetExtendedListCampaignStats(), require_GetFolder(), require_GetFolderLists(), require_GetFolders(), require_GetInboundEmailEvents(), require_GetInboundEmailEventsByUuid(), require_GetInboundEmailEventsByUuidAttachments(), require_GetInboundEmailEventsByUuidLogs(), require_GetInboundEmailEventsEvents(), require_GetIp(), require_GetIpFromSender(), require_GetIps(), require_GetIpsFromSender(), require_GetList(), require_GetLists(), require_GetProcess(), require_GetProcesses(), require_GetReports(), require_GetReportsReports(), require_GetScheduledEmailByBatchId(), require_GetScheduledEmailByBatchIdBatches(), require_GetScheduledEmailByMessageId(), require_GetSendersList(), require_GetSendersListIps(), require_GetSendersListSenders(), require_GetSharedTemplateUrl(), require_GetSmsCampaign(), require_GetSmsCampaignOverview(), require_GetSmsCampaignRecipients(), require_GetSmsCampaignStats(), require_GetSmsCampaigns(), require_GetSmsEventReport(), require_GetSmsEventReportEvents(), require_GetSmtpTemplateOverview(), require_GetSmtpTemplateOverviewSender(), require_GetSmtpTemplates(), require_GetSsoToken(), require_GetStatsByBrowser(), require_GetStatsByDevice(), require_GetStatsByDomain(), require_GetTransacAggregatedSmsReport(), require_GetTransacBlockedContacts(), require_GetTransacBlockedContactsContacts(), require_GetTransacBlockedContactsReason(), require_GetTransacEmailContent(), require_GetTransacEmailContentEvents(), require_GetTransacEmailsList(), require_GetTransacEmailsListTransactionalEmails(), require_GetTransacSmsReport(), require_GetTransacSmsReportReports(), require_GetWebhook(), require_GetWebhooks(), require_InlineResponse200(), require_InlineResponse201(), require_InlineResponse2011(), require_ManageIp(), require_MasterDetailsResponse(), require_MasterDetailsResponseBillingInfo(), require_MasterDetailsResponseBillingInfoAddress(), require_MasterDetailsResponseBillingInfoName(), require_MasterDetailsResponsePlanInfo(), require_MasterDetailsResponsePlanInfoFeatures(), require_Note(), require_NoteData(), require_NoteId(), require_NoteList(), require_Pipeline(), require_PipelineStage(), require_PostContactInfo(), require_PostContactInfoContacts(), require_PostSendFailed(), require_PostSendSmsTestFailed(), require_RemainingCreditModel(), require_RemainingCreditModelChild(), require_RemainingCreditModelReseller(), require_RemoveContactFromList(), require_RemoveCredits(), require_RequestContactExport(), require_RequestContactExportCustomContactFilter(), require_RequestContactImport(), require_RequestContactImportNewList(), require_RequestSmsRecipientExport(), require_ScheduleSmtpEmail(), require_SendReport(), require_SendReportEmail(), require_SendSms(), require_SendSmtpEmail(), require_SendSmtpEmailAttachment(), require_SendSmtpEmailBcc(), require_SendSmtpEmailCc(), require_SendSmtpEmailMessageVersions(), require_SendSmtpEmailReplyTo(), require_SendSmtpEmailReplyTo1(), require_SendSmtpEmailSender(), require_SendSmtpEmailTo(), require_SendSmtpEmailTo1(), require_SendTestEmail(), require_SendTestSms(), require_SendTransacSms(), require_SsoTokenRequest(), require_SubAccountDetailsResponse(), require_SubAccountDetailsResponsePlanInfo(), require_SubAccountDetailsResponsePlanInfoCredits(), require_SubAccountDetailsResponsePlanInfoCreditsEmails(), require_SubAccountDetailsResponsePlanInfoFeatures(), require_SubAccountDetailsResponsePlanInfoFeaturesInbox(), require_SubAccountDetailsResponsePlanInfoFeaturesLandingPage(), require_SubAccountDetailsResponsePlanInfoFeaturesUsers(), require_SubAccountUpdatePlanRequest(), require_SubAccountUpdatePlanRequestCredits(), require_SubAccountUpdatePlanRequestFeatures(), require_SubAccountsResponse(), require_SubAccountsResponseSubAccounts(), require_Task(), require_TaskList(), require_TaskReminder(), require_TaskTypes(), require_UpdateAttribute(), require_UpdateAttributeEnumeration(), require_UpdateBatchContacts(), require_UpdateBatchContactsContacts(), require_UpdateBatchContactsModel(), require_UpdateCampaignStatus(), require_UpdateChild(), require_UpdateChildAccountStatus(), require_UpdateChildDomain(), require_UpdateContact(), require_UpdateEmailCampaign(), require_UpdateEmailCampaignRecipients(), require_UpdateEmailCampaignSender(), require_UpdateList(), require_UpdateSender(), require_UpdateSmsCampaign(), require_UpdateSmtpTemplate(), require_UpdateSmtpTemplateSender(), require_UpdateWebhook(), require_UploadImageToGallery(), require_AccountApi(), require_AttributesApi(), require_CRMApi(), require_CompaniesApi(), require_ContactsApi(), require_DealsApi(), require_EmailCampaignsApi(), require_FoldersApi(), require_InboundParsingApi(), require_ListsApi(), require_MasterAccountApi(), require_ProcessApi(), require_ResellerApi(), require_SMSCampaignsApi(), require_SendersApi(), require_TransactionalEmailsApi(), require_TransactionalSMSApi(), require_WebhooksApi());
      }
    })(function(ApiClient, AbTestCampaignResult, AbTestCampaignResultClickedLinks, AbTestCampaignResultStatistics, AbTestVersionClicks, AbTestVersionClicksInner, AbTestVersionStats, AddChildDomain, AddContactToList, AddCredits, BlockDomain, Body, Body1, Body2, Body3, Body4, Body5, Body6, CompaniesList, Company, CompanyAttributes, CompanyAttributesInner, CreateAttribute, CreateAttributeEnumeration, CreateChild, CreateContact, CreateDoiContact, CreateEmailCampaign, CreateEmailCampaignRecipients, CreateEmailCampaignSender, CreateList, CreateModel, CreateReseller, CreateSender, CreateSenderIps, CreateSenderModel, CreateSmsCampaign, CreateSmsCampaignRecipients, CreateSmtpEmail, CreateSmtpTemplate, CreateSmtpTemplateSender, CreateSubAccount, CreateSubAccountResponse, CreateUpdateContactModel, CreateUpdateFolder, CreateWebhook, CreatedProcessId, Deal, DealAttributes, DealAttributesInner, DealsList, DeleteHardbounces, EmailExportRecipients, ErrorModel, GetAccount, GetAccountMarketingAutomation, GetAccountPlan, GetAccountRelay, GetAccountRelayData, GetAggregatedReport, GetAttributes, GetAttributesAttributes, GetAttributesEnumeration, GetBlockedDomains, GetCampaignOverview, GetCampaignRecipients, GetCampaignStats, GetChildAccountCreationStatus, GetChildDomain, GetChildDomains, GetChildInfo, GetChildInfoApiKeys, GetChildInfoApiKeysV2, GetChildInfoApiKeysV3, GetChildInfoCredits, GetChildInfoStatistics, GetChildrenList, GetClient, GetContactCampaignStats, GetContactCampaignStatsClicked, GetContactCampaignStatsOpened, GetContactCampaignStatsTransacAttributes, GetContactCampaignStatsUnsubscriptions, GetContactDetails, GetContacts, GetDeviceBrowserStats, GetEmailCampaign, GetEmailCampaigns, GetEmailEventReport, GetEmailEventReportEvents, GetExtendedCampaignOverview, GetExtendedCampaignOverviewSender, GetExtendedCampaignStats, GetExtendedCampaignStatsGlobalStats, GetExtendedClient, GetExtendedClientAddress, GetExtendedContactDetails, GetExtendedContactDetailsStatistics, GetExtendedContactDetailsStatisticsClicked, GetExtendedContactDetailsStatisticsDelivered, GetExtendedContactDetailsStatisticsLinks, GetExtendedContactDetailsStatisticsMessagesSent, GetExtendedContactDetailsStatisticsOpened, GetExtendedContactDetailsStatisticsUnsubscriptions, GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription, GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription, GetExtendedList, GetExtendedListCampaignStats, GetFolder, GetFolderLists, GetFolders, GetInboundEmailEvents, GetInboundEmailEventsByUuid, GetInboundEmailEventsByUuidAttachments, GetInboundEmailEventsByUuidLogs, GetInboundEmailEventsEvents, GetIp, GetIpFromSender, GetIps, GetIpsFromSender, GetList, GetLists, GetProcess, GetProcesses, GetReports, GetReportsReports, GetScheduledEmailByBatchId, GetScheduledEmailByBatchIdBatches, GetScheduledEmailByMessageId, GetSendersList, GetSendersListIps, GetSendersListSenders, GetSharedTemplateUrl, GetSmsCampaign, GetSmsCampaignOverview, GetSmsCampaignRecipients, GetSmsCampaignStats, GetSmsCampaigns, GetSmsEventReport, GetSmsEventReportEvents, GetSmtpTemplateOverview, GetSmtpTemplateOverviewSender, GetSmtpTemplates, GetSsoToken, GetStatsByBrowser, GetStatsByDevice, GetStatsByDomain, GetTransacAggregatedSmsReport, GetTransacBlockedContacts, GetTransacBlockedContactsContacts, GetTransacBlockedContactsReason, GetTransacEmailContent, GetTransacEmailContentEvents, GetTransacEmailsList, GetTransacEmailsListTransactionalEmails, GetTransacSmsReport, GetTransacSmsReportReports, GetWebhook, GetWebhooks, InlineResponse200, InlineResponse201, InlineResponse2011, ManageIp, MasterDetailsResponse, MasterDetailsResponseBillingInfo, MasterDetailsResponseBillingInfoAddress, MasterDetailsResponseBillingInfoName, MasterDetailsResponsePlanInfo, MasterDetailsResponsePlanInfoFeatures, Note, NoteData, NoteId, NoteList, Pipeline, PipelineStage, PostContactInfo, PostContactInfoContacts, PostSendFailed, PostSendSmsTestFailed, RemainingCreditModel, RemainingCreditModelChild, RemainingCreditModelReseller, RemoveContactFromList, RemoveCredits, RequestContactExport, RequestContactExportCustomContactFilter, RequestContactImport, RequestContactImportNewList, RequestSmsRecipientExport, ScheduleSmtpEmail, SendReport, SendReportEmail, SendSms, SendSmtpEmail, SendSmtpEmailAttachment, SendSmtpEmailBcc, SendSmtpEmailCc, SendSmtpEmailMessageVersions, SendSmtpEmailReplyTo, SendSmtpEmailReplyTo1, SendSmtpEmailSender, SendSmtpEmailTo, SendSmtpEmailTo1, SendTestEmail, SendTestSms, SendTransacSms, SsoTokenRequest, SubAccountDetailsResponse, SubAccountDetailsResponsePlanInfo, SubAccountDetailsResponsePlanInfoCredits, SubAccountDetailsResponsePlanInfoCreditsEmails, SubAccountDetailsResponsePlanInfoFeatures, SubAccountDetailsResponsePlanInfoFeaturesInbox, SubAccountDetailsResponsePlanInfoFeaturesLandingPage, SubAccountDetailsResponsePlanInfoFeaturesUsers, SubAccountUpdatePlanRequest, SubAccountUpdatePlanRequestCredits, SubAccountUpdatePlanRequestFeatures, SubAccountsResponse, SubAccountsResponseSubAccounts, Task, TaskList, TaskReminder2, TaskTypes, UpdateAttribute, UpdateAttributeEnumeration, UpdateBatchContacts, UpdateBatchContactsContacts, UpdateBatchContactsModel, UpdateCampaignStatus, UpdateChild, UpdateChildAccountStatus, UpdateChildDomain, UpdateContact, UpdateEmailCampaign, UpdateEmailCampaignRecipients, UpdateEmailCampaignSender, UpdateList, UpdateSender, UpdateSmsCampaign, UpdateSmtpTemplate, UpdateSmtpTemplateSender, UpdateWebhook, UploadImageToGallery, AccountApi, AttributesApi, CRMApi, CompaniesApi, ContactsApi, DealsApi, EmailCampaignsApi, FoldersApi, InboundParsingApi, ListsApi, MasterAccountApi, ProcessApi, ResellerApi, SMSCampaignsApi, SendersApi, TransactionalEmailsApi, TransactionalSMSApi, WebhooksApi) {
      "use strict";
      var exports2 = {
        ApiClient,
        AbTestCampaignResult,
        AbTestCampaignResultClickedLinks,
        AbTestCampaignResultStatistics,
        AbTestVersionClicks,
        AbTestVersionClicksInner,
        AbTestVersionStats,
        AddChildDomain,
        AddContactToList,
        AddCredits,
        BlockDomain,
        Body,
        Body1,
        Body2,
        Body3,
        Body4,
        Body5,
        Body6,
        CompaniesList,
        Company,
        CompanyAttributes,
        CompanyAttributesInner,
        CreateAttribute,
        CreateAttributeEnumeration,
        CreateChild,
        CreateContact,
        CreateDoiContact,
        CreateEmailCampaign,
        CreateEmailCampaignRecipients,
        CreateEmailCampaignSender,
        CreateList,
        CreateModel,
        CreateReseller,
        CreateSender,
        CreateSenderIps,
        CreateSenderModel,
        CreateSmsCampaign,
        CreateSmsCampaignRecipients,
        CreateSmtpEmail,
        CreateSmtpTemplate,
        CreateSmtpTemplateSender,
        CreateSubAccount,
        CreateSubAccountResponse,
        CreateUpdateContactModel,
        CreateUpdateFolder,
        CreateWebhook,
        CreatedProcessId,
        Deal,
        DealAttributes,
        DealAttributesInner,
        DealsList,
        DeleteHardbounces,
        EmailExportRecipients,
        ErrorModel,
        GetAccount,
        GetAccountMarketingAutomation,
        GetAccountPlan,
        GetAccountRelay,
        GetAccountRelayData,
        GetAggregatedReport,
        GetAttributes,
        GetAttributesAttributes,
        GetAttributesEnumeration,
        GetBlockedDomains,
        GetCampaignOverview,
        GetCampaignRecipients,
        GetCampaignStats,
        GetChildAccountCreationStatus,
        GetChildDomain,
        GetChildDomains,
        GetChildInfo,
        GetChildInfoApiKeys,
        GetChildInfoApiKeysV2,
        GetChildInfoApiKeysV3,
        GetChildInfoCredits,
        GetChildInfoStatistics,
        GetChildrenList,
        GetClient,
        GetContactCampaignStats,
        GetContactCampaignStatsClicked,
        GetContactCampaignStatsOpened,
        GetContactCampaignStatsTransacAttributes,
        GetContactCampaignStatsUnsubscriptions,
        GetContactDetails,
        GetContacts,
        GetDeviceBrowserStats,
        GetEmailCampaign,
        GetEmailCampaigns,
        GetEmailEventReport,
        GetEmailEventReportEvents,
        GetExtendedCampaignOverview,
        GetExtendedCampaignOverviewSender,
        GetExtendedCampaignStats,
        GetExtendedCampaignStatsGlobalStats,
        GetExtendedClient,
        GetExtendedClientAddress,
        GetExtendedContactDetails,
        GetExtendedContactDetailsStatistics,
        GetExtendedContactDetailsStatisticsClicked,
        GetExtendedContactDetailsStatisticsDelivered,
        GetExtendedContactDetailsStatisticsLinks,
        GetExtendedContactDetailsStatisticsMessagesSent,
        GetExtendedContactDetailsStatisticsOpened,
        GetExtendedContactDetailsStatisticsUnsubscriptions,
        GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription,
        GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription,
        GetExtendedList,
        GetExtendedListCampaignStats,
        GetFolder,
        GetFolderLists,
        GetFolders,
        GetInboundEmailEvents,
        GetInboundEmailEventsByUuid,
        GetInboundEmailEventsByUuidAttachments,
        GetInboundEmailEventsByUuidLogs,
        GetInboundEmailEventsEvents,
        GetIp,
        GetIpFromSender,
        GetIps,
        GetIpsFromSender,
        GetList,
        GetLists,
        GetProcess,
        GetProcesses,
        GetReports,
        GetReportsReports,
        GetScheduledEmailByBatchId,
        GetScheduledEmailByBatchIdBatches,
        GetScheduledEmailByMessageId,
        GetSendersList,
        GetSendersListIps,
        GetSendersListSenders,
        GetSharedTemplateUrl,
        GetSmsCampaign,
        GetSmsCampaignOverview,
        GetSmsCampaignRecipients,
        GetSmsCampaignStats,
        GetSmsCampaigns,
        GetSmsEventReport,
        GetSmsEventReportEvents,
        GetSmtpTemplateOverview,
        GetSmtpTemplateOverviewSender,
        GetSmtpTemplates,
        GetSsoToken,
        GetStatsByBrowser,
        GetStatsByDevice,
        GetStatsByDomain,
        GetTransacAggregatedSmsReport,
        GetTransacBlockedContacts,
        GetTransacBlockedContactsContacts,
        GetTransacBlockedContactsReason,
        GetTransacEmailContent,
        GetTransacEmailContentEvents,
        GetTransacEmailsList,
        GetTransacEmailsListTransactionalEmails,
        GetTransacSmsReport,
        GetTransacSmsReportReports,
        GetWebhook,
        GetWebhooks,
        InlineResponse200,
        InlineResponse201,
        InlineResponse2011,
        ManageIp,
        MasterDetailsResponse,
        MasterDetailsResponseBillingInfo,
        MasterDetailsResponseBillingInfoAddress,
        MasterDetailsResponseBillingInfoName,
        MasterDetailsResponsePlanInfo,
        MasterDetailsResponsePlanInfoFeatures,
        Note,
        NoteData,
        NoteId,
        NoteList,
        Pipeline,
        PipelineStage,
        PostContactInfo,
        PostContactInfoContacts,
        PostSendFailed,
        PostSendSmsTestFailed,
        RemainingCreditModel,
        RemainingCreditModelChild,
        RemainingCreditModelReseller,
        RemoveContactFromList,
        RemoveCredits,
        RequestContactExport,
        RequestContactExportCustomContactFilter,
        RequestContactImport,
        RequestContactImportNewList,
        RequestSmsRecipientExport,
        ScheduleSmtpEmail,
        SendReport,
        SendReportEmail,
        SendSms,
        SendSmtpEmail,
        SendSmtpEmailAttachment,
        SendSmtpEmailBcc,
        SendSmtpEmailCc,
        SendSmtpEmailMessageVersions,
        SendSmtpEmailReplyTo,
        SendSmtpEmailReplyTo1,
        SendSmtpEmailSender,
        SendSmtpEmailTo,
        SendSmtpEmailTo1,
        SendTestEmail,
        SendTestSms,
        SendTransacSms,
        SsoTokenRequest,
        SubAccountDetailsResponse,
        SubAccountDetailsResponsePlanInfo,
        SubAccountDetailsResponsePlanInfoCredits,
        SubAccountDetailsResponsePlanInfoCreditsEmails,
        SubAccountDetailsResponsePlanInfoFeatures,
        SubAccountDetailsResponsePlanInfoFeaturesInbox,
        SubAccountDetailsResponsePlanInfoFeaturesLandingPage,
        SubAccountDetailsResponsePlanInfoFeaturesUsers,
        SubAccountUpdatePlanRequest,
        SubAccountUpdatePlanRequestCredits,
        SubAccountUpdatePlanRequestFeatures,
        SubAccountsResponse,
        SubAccountsResponseSubAccounts,
        Task,
        TaskList,
        TaskReminder: TaskReminder2,
        TaskTypes,
        UpdateAttribute,
        UpdateAttributeEnumeration,
        UpdateBatchContacts,
        UpdateBatchContactsContacts,
        UpdateBatchContactsModel,
        UpdateCampaignStatus,
        UpdateChild,
        UpdateChildAccountStatus,
        UpdateChildDomain,
        UpdateContact,
        UpdateEmailCampaign,
        UpdateEmailCampaignRecipients,
        UpdateEmailCampaignSender,
        UpdateList,
        UpdateSender,
        UpdateSmsCampaign,
        UpdateSmtpTemplate,
        UpdateSmtpTemplateSender,
        UpdateWebhook,
        UploadImageToGallery,
        AccountApi,
        AttributesApi,
        CRMApi,
        CompaniesApi,
        ContactsApi,
        DealsApi,
        EmailCampaignsApi,
        FoldersApi,
        InboundParsingApi,
        ListsApi,
        MasterAccountApi,
        ProcessApi,
        ResellerApi,
        SMSCampaignsApi,
        SendersApi,
        TransactionalEmailsApi,
        TransactionalSMSApi,
        WebhooksApi
      };
      return exports2;
    });
  }
});

// dep:sib-api-v3-sdk
var sib_api_v3_sdk_default = require_src();
export {
  sib_api_v3_sdk_default as default
};
//# sourceMappingURL=sib-api-v3-sdk.js.map
