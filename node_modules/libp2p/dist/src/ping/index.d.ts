import type { IncomingStreamData } from '@libp2p/interface-registrar';
import type { PeerId } from '@libp2p/interface-peer-id';
import type { Startable } from '@libp2p/interfaces/startable';
import type { Components } from '@libp2p/components';
import type { AbortOptions } from '@libp2p/interfaces';
export interface PingServiceInit {
    protocolPrefix: string;
    maxInboundStreams: number;
    maxOutboundStreams: number;
    /**
     * How long we should wait for a ping response
     */
    timeout: number;
}
export declare class PingService implements Startable {
    readonly protocol: string;
    private readonly components;
    private started;
    private readonly init;
    constructor(components: Components, init: PingServiceInit);
    start(): Promise<void>;
    stop(): Promise<void>;
    isStarted(): boolean;
    /**
     * A handler to register with Libp2p to process ping messages
     */
    handleMessage(data: IncomingStreamData): void;
    /**
     * Ping a given peer and wait for its response, getting the operation latency.
     *
     * @param {PeerId|Multiaddr} peer
     * @returns {Promise<number>}
     */
    ping(peer: PeerId, options?: AbortOptions): Promise<number>;
}
//# sourceMappingURL=index.d.ts.map