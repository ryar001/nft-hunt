/* eslint-disable import/export */
/* eslint-disable @typescript-eslint/no-namespace */
import { encodeMessage, decodeMessage, message } from 'protons-runtime';
export var pb;
(function (pb) {
    let NoiseHandshakePayload;
    (function (NoiseHandshakePayload) {
        let _codec;
        NoiseHandshakePayload.codec = () => {
            if (_codec == null) {
                _codec = message((obj, writer, opts = {}) => {
                    if (opts.lengthDelimited !== false) {
                        writer.fork();
                    }
                    if (obj.identityKey != null) {
                        writer.uint32(10);
                        writer.bytes(obj.identityKey);
                    }
                    else {
                        throw new Error('Protocol error: required field "identityKey" was not found in object');
                    }
                    if (obj.identitySig != null) {
                        writer.uint32(18);
                        writer.bytes(obj.identitySig);
                    }
                    else {
                        throw new Error('Protocol error: required field "identitySig" was not found in object');
                    }
                    if (obj.data != null) {
                        writer.uint32(26);
                        writer.bytes(obj.data);
                    }
                    else {
                        throw new Error('Protocol error: required field "data" was not found in object');
                    }
                    if (opts.lengthDelimited !== false) {
                        writer.ldelim();
                    }
                }, (reader, length) => {
                    const obj = {
                        identityKey: new Uint8Array(0),
                        identitySig: new Uint8Array(0),
                        data: new Uint8Array(0)
                    };
                    const end = length == null ? reader.len : reader.pos + length;
                    while (reader.pos < end) {
                        const tag = reader.uint32();
                        switch (tag >>> 3) {
                            case 1:
                                obj.identityKey = reader.bytes();
                                break;
                            case 2:
                                obj.identitySig = reader.bytes();
                                break;
                            case 3:
                                obj.data = reader.bytes();
                                break;
                            default:
                                reader.skipType(tag & 7);
                                break;
                        }
                    }
                    if (obj.identityKey == null) {
                        throw new Error('Protocol error: value for required field "identityKey" was not found in protobuf');
                    }
                    if (obj.identitySig == null) {
                        throw new Error('Protocol error: value for required field "identitySig" was not found in protobuf');
                    }
                    if (obj.data == null) {
                        throw new Error('Protocol error: value for required field "data" was not found in protobuf');
                    }
                    return obj;
                });
            }
            return _codec;
        };
        NoiseHandshakePayload.encode = (obj) => {
            return encodeMessage(obj, NoiseHandshakePayload.codec());
        };
        NoiseHandshakePayload.decode = (buf) => {
            return decodeMessage(buf, NoiseHandshakePayload.codec());
        };
    })(NoiseHandshakePayload = pb.NoiseHandshakePayload || (pb.NoiseHandshakePayload = {}));
})(pb || (pb = {}));
//# sourceMappingURL=payload.js.map