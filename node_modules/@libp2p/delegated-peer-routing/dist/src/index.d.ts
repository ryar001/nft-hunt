import type { PeerId } from '@libp2p/interface-peer-id';
import type { IPFSHTTPClient, HTTPClientExtraOptions } from 'ipfs-http-client';
import type { AbortOptions } from 'ipfs-core-types/src/utils';
import type { PeerRouting } from '@libp2p/interface-peer-routing';
import type { PeerInfo } from '@libp2p/interface-peer-info';
import type { Startable } from '@libp2p/interfaces/startable';
export declare class DelegatedPeerRouting implements PeerRouting, Startable {
    private readonly client;
    private readonly httpQueue;
    private started;
    private abortController;
    /**
     * Create a new DelegatedPeerRouting instance
     */
    constructor(client: IPFSHTTPClient);
    isStarted(): boolean;
    start(): void;
    stop(): void;
    /**
     * Attempts to find the given peer
     */
    findPeer(id: PeerId, options?: HTTPClientExtraOptions & AbortOptions): Promise<PeerInfo>;
    /**
     * Attempt to find the closest peers on the network to the given key
     */
    getClosestPeers(key: Uint8Array, options?: HTTPClientExtraOptions & AbortOptions): AsyncGenerator<{
        id: PeerId;
        multiaddrs: import("ipfs-http-client").multiaddr[];
        protocols: never[];
    }, void, undefined>;
}
//# sourceMappingURL=index.d.ts.map